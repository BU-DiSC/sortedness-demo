// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"bQKaC":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
var HMR_USE_SSE = false;
module.bundle.HMR_BUNDLE_ID = "d22b80a2f0f04e5b";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var HMR_USE_SSE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && ![
        "localhost",
        "127.0.0.1",
        "0.0.0.0"
    ].includes(hostname) ? "wss" : "ws";
    var ws;
    if (HMR_USE_SSE) ws = new EventSource("/__parcel_hmr");
    else try {
        ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    } catch (err) {
        if (err.message) console.error(err.message);
        ws = {};
    }
    // Web extension context
    var extCtx = typeof browser === "undefined" ? typeof chrome === "undefined" ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    if (ws instanceof WebSocket) {
        ws.onerror = function(e) {
            if (e.message) console.error(e.message);
        };
        ws.onclose = function() {
            console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
        };
    }
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"jXAve":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _auto = require("chart.js/auto");
var _autoDefault = parcelHelpers.interopDefault(_auto);
var _chartjsPluginZoom = require("chartjs-plugin-zoom");
var _chartjsPluginZoomDefault = parcelHelpers.interopDefault(_chartjsPluginZoom);
(0, _autoDefault.default).register((0, _chartjsPluginZoomDefault.default));
(async function() {
    const data = {
        datasets: [
            {
                label: "Shuffled 5k",
                data: [
                    {
                        x: 1,
                        y: 3475
                    },
                    {
                        x: 2,
                        y: 64
                    },
                    {
                        x: 3,
                        y: 3404
                    },
                    {
                        x: 4,
                        y: 1335
                    },
                    {
                        x: 5,
                        y: 356
                    },
                    {
                        x: 6,
                        y: 4269
                    },
                    {
                        x: 7,
                        y: 4640
                    },
                    {
                        x: 8,
                        y: 180
                    },
                    {
                        x: 9,
                        y: 3519
                    },
                    {
                        x: 10,
                        y: 1060
                    },
                    {
                        x: 11,
                        y: 2277
                    },
                    {
                        x: 12,
                        y: 1533
                    },
                    {
                        x: 13,
                        y: 182
                    },
                    {
                        x: 14,
                        y: 257
                    },
                    {
                        x: 15,
                        y: 4417
                    },
                    {
                        x: 16,
                        y: 282
                    },
                    {
                        x: 17,
                        y: 4270
                    },
                    {
                        x: 18,
                        y: 4625
                    },
                    {
                        x: 19,
                        y: 4307
                    },
                    {
                        x: 20,
                        y: 2260
                    },
                    {
                        x: 21,
                        y: 3874
                    },
                    {
                        x: 22,
                        y: 4549
                    },
                    {
                        x: 23,
                        y: 1425
                    },
                    {
                        x: 24,
                        y: 1434
                    },
                    {
                        x: 25,
                        y: 4008
                    },
                    {
                        x: 26,
                        y: 350
                    },
                    {
                        x: 27,
                        y: 166
                    },
                    {
                        x: 28,
                        y: 2335
                    },
                    {
                        x: 29,
                        y: 2738
                    },
                    {
                        x: 30,
                        y: 243
                    },
                    {
                        x: 31,
                        y: 3912
                    },
                    {
                        x: 32,
                        y: 2061
                    },
                    {
                        x: 33,
                        y: 2844
                    },
                    {
                        x: 34,
                        y: 2361
                    },
                    {
                        x: 35,
                        y: 3960
                    },
                    {
                        x: 36,
                        y: 2461
                    },
                    {
                        x: 37,
                        y: 1206
                    },
                    {
                        x: 38,
                        y: 3713
                    },
                    {
                        x: 39,
                        y: 3856
                    },
                    {
                        x: 40,
                        y: 3362
                    },
                    {
                        x: 41,
                        y: 2131
                    },
                    {
                        x: 42,
                        y: 4509
                    },
                    {
                        x: 43,
                        y: 1340
                    },
                    {
                        x: 44,
                        y: 3628
                    },
                    {
                        x: 45,
                        y: 4587
                    },
                    {
                        x: 46,
                        y: 2462
                    },
                    {
                        x: 47,
                        y: 2700
                    },
                    {
                        x: 48,
                        y: 4926
                    },
                    {
                        x: 49,
                        y: 4890
                    },
                    {
                        x: 50,
                        y: 3413
                    },
                    {
                        x: 51,
                        y: 1323
                    },
                    {
                        x: 52,
                        y: 3340
                    },
                    {
                        x: 53,
                        y: 3231
                    },
                    {
                        x: 54,
                        y: 1618
                    },
                    {
                        x: 55,
                        y: 841
                    },
                    {
                        x: 56,
                        y: 3639
                    },
                    {
                        x: 57,
                        y: 3650
                    },
                    {
                        x: 58,
                        y: 3532
                    },
                    {
                        x: 59,
                        y: 344
                    },
                    {
                        x: 60,
                        y: 626
                    },
                    {
                        x: 61,
                        y: 2966
                    },
                    {
                        x: 62,
                        y: 2615
                    },
                    {
                        x: 63,
                        y: 3302
                    },
                    {
                        x: 64,
                        y: 4562
                    },
                    {
                        x: 65,
                        y: 674
                    },
                    {
                        x: 66,
                        y: 1255
                    },
                    {
                        x: 67,
                        y: 2326
                    },
                    {
                        x: 68,
                        y: 1088
                    },
                    {
                        x: 69,
                        y: 3872
                    },
                    {
                        x: 70,
                        y: 4865
                    },
                    {
                        x: 71,
                        y: 3963
                    },
                    {
                        x: 72,
                        y: 2989
                    },
                    {
                        x: 73,
                        y: 3583
                    },
                    {
                        x: 74,
                        y: 3287
                    },
                    {
                        x: 75,
                        y: 2677
                    },
                    {
                        x: 76,
                        y: 4912
                    },
                    {
                        x: 77,
                        y: 4491
                    },
                    {
                        x: 78,
                        y: 593
                    },
                    {
                        x: 79,
                        y: 4396
                    },
                    {
                        x: 80,
                        y: 3847
                    },
                    {
                        x: 81,
                        y: 2021
                    },
                    {
                        x: 82,
                        y: 1696
                    },
                    {
                        x: 83,
                        y: 4476
                    },
                    {
                        x: 84,
                        y: 4882
                    },
                    {
                        x: 85,
                        y: 4962
                    },
                    {
                        x: 86,
                        y: 4236
                    },
                    {
                        x: 87,
                        y: 3484
                    },
                    {
                        x: 88,
                        y: 1844
                    },
                    {
                        x: 89,
                        y: 2546
                    },
                    {
                        x: 90,
                        y: 1363
                    },
                    {
                        x: 91,
                        y: 2725
                    },
                    {
                        x: 92,
                        y: 2627
                    },
                    {
                        x: 93,
                        y: 4610
                    },
                    {
                        x: 94,
                        y: 2145
                    },
                    {
                        x: 95,
                        y: 591
                    },
                    {
                        x: 96,
                        y: 3132
                    },
                    {
                        x: 97,
                        y: 1609
                    },
                    {
                        x: 98,
                        y: 3120
                    },
                    {
                        x: 99,
                        y: 4435
                    },
                    {
                        x: 100,
                        y: 4706
                    },
                    {
                        x: 101,
                        y: 2211
                    },
                    {
                        x: 102,
                        y: 2308
                    },
                    {
                        x: 103,
                        y: 362
                    },
                    {
                        x: 104,
                        y: 1549
                    },
                    {
                        x: 105,
                        y: 2316
                    },
                    {
                        x: 106,
                        y: 2564
                    },
                    {
                        x: 107,
                        y: 2281
                    },
                    {
                        x: 108,
                        y: 4244
                    },
                    {
                        x: 109,
                        y: 458
                    },
                    {
                        x: 110,
                        y: 2376
                    },
                    {
                        x: 111,
                        y: 1683
                    },
                    {
                        x: 112,
                        y: 2792
                    },
                    {
                        x: 113,
                        y: 2015
                    },
                    {
                        x: 114,
                        y: 4310
                    },
                    {
                        x: 115,
                        y: 747
                    },
                    {
                        x: 116,
                        y: 3355
                    },
                    {
                        x: 117,
                        y: 4797
                    },
                    {
                        x: 118,
                        y: 1944
                    },
                    {
                        x: 119,
                        y: 2005
                    },
                    {
                        x: 120,
                        y: 866
                    },
                    {
                        x: 121,
                        y: 3086
                    },
                    {
                        x: 122,
                        y: 3176
                    },
                    {
                        x: 123,
                        y: 766
                    },
                    {
                        x: 124,
                        y: 4980
                    },
                    {
                        x: 125,
                        y: 4325
                    },
                    {
                        x: 126,
                        y: 3720
                    },
                    {
                        x: 127,
                        y: 3985
                    },
                    {
                        x: 128,
                        y: 3913
                    },
                    {
                        x: 129,
                        y: 3195
                    },
                    {
                        x: 130,
                        y: 464
                    },
                    {
                        x: 131,
                        y: 1963
                    },
                    {
                        x: 132,
                        y: 1326
                    },
                    {
                        x: 133,
                        y: 3781
                    },
                    {
                        x: 134,
                        y: 4434
                    },
                    {
                        x: 135,
                        y: 981
                    },
                    {
                        x: 136,
                        y: 1305
                    },
                    {
                        x: 137,
                        y: 3453
                    },
                    {
                        x: 138,
                        y: 3397
                    },
                    {
                        x: 139,
                        y: 156
                    },
                    {
                        x: 140,
                        y: 2169
                    },
                    {
                        x: 141,
                        y: 742
                    },
                    {
                        x: 142,
                        y: 3305
                    },
                    {
                        x: 143,
                        y: 700
                    },
                    {
                        x: 144,
                        y: 2164
                    },
                    {
                        x: 145,
                        y: 2161
                    },
                    {
                        x: 146,
                        y: 1166
                    },
                    {
                        x: 147,
                        y: 2476
                    },
                    {
                        x: 148,
                        y: 1218
                    },
                    {
                        x: 149,
                        y: 1941
                    },
                    {
                        x: 150,
                        y: 3290
                    },
                    {
                        x: 151,
                        y: 1673
                    },
                    {
                        x: 152,
                        y: 1000
                    },
                    {
                        x: 153,
                        y: 2008
                    },
                    {
                        x: 154,
                        y: 1745
                    },
                    {
                        x: 155,
                        y: 3449
                    },
                    {
                        x: 156,
                        y: 3076
                    },
                    {
                        x: 157,
                        y: 2293
                    },
                    {
                        x: 158,
                        y: 805
                    },
                    {
                        x: 159,
                        y: 4104
                    },
                    {
                        x: 160,
                        y: 429
                    },
                    {
                        x: 161,
                        y: 817
                    },
                    {
                        x: 162,
                        y: 2451
                    },
                    {
                        x: 163,
                        y: 1113
                    },
                    {
                        x: 164,
                        y: 459
                    },
                    {
                        x: 165,
                        y: 2144
                    },
                    {
                        x: 166,
                        y: 216
                    },
                    {
                        x: 167,
                        y: 4097
                    },
                    {
                        x: 168,
                        y: 1886
                    },
                    {
                        x: 169,
                        y: 4782
                    },
                    {
                        x: 170,
                        y: 3239
                    },
                    {
                        x: 171,
                        y: 2657
                    },
                    {
                        x: 172,
                        y: 2944
                    },
                    {
                        x: 173,
                        y: 93
                    },
                    {
                        x: 174,
                        y: 4569
                    },
                    {
                        x: 175,
                        y: 2158
                    },
                    {
                        x: 176,
                        y: 1732
                    },
                    {
                        x: 177,
                        y: 3025
                    },
                    {
                        x: 178,
                        y: 1405
                    },
                    {
                        x: 179,
                        y: 4592
                    },
                    {
                        x: 180,
                        y: 417
                    },
                    {
                        x: 181,
                        y: 294
                    },
                    {
                        x: 182,
                        y: 365
                    },
                    {
                        x: 183,
                        y: 2534
                    },
                    {
                        x: 184,
                        y: 2520
                    },
                    {
                        x: 185,
                        y: 2272
                    },
                    {
                        x: 186,
                        y: 2980
                    },
                    {
                        x: 187,
                        y: 207
                    },
                    {
                        x: 188,
                        y: 514
                    },
                    {
                        x: 189,
                        y: 4761
                    },
                    {
                        x: 190,
                        y: 2115
                    },
                    {
                        x: 191,
                        y: 3887
                    },
                    {
                        x: 192,
                        y: 387
                    },
                    {
                        x: 193,
                        y: 4588
                    },
                    {
                        x: 194,
                        y: 3796
                    },
                    {
                        x: 195,
                        y: 3734
                    },
                    {
                        x: 196,
                        y: 4018
                    },
                    {
                        x: 197,
                        y: 4080
                    },
                    {
                        x: 198,
                        y: 351
                    },
                    {
                        x: 199,
                        y: 3568
                    },
                    {
                        x: 200,
                        y: 1847
                    },
                    {
                        x: 201,
                        y: 4914
                    },
                    {
                        x: 202,
                        y: 2239
                    },
                    {
                        x: 203,
                        y: 2992
                    },
                    {
                        x: 204,
                        y: 2251
                    },
                    {
                        x: 205,
                        y: 1074
                    },
                    {
                        x: 206,
                        y: 4246
                    },
                    {
                        x: 207,
                        y: 4171
                    },
                    {
                        x: 208,
                        y: 3192
                    },
                    {
                        x: 209,
                        y: 1492
                    },
                    {
                        x: 210,
                        y: 602
                    },
                    {
                        x: 211,
                        y: 3429
                    },
                    {
                        x: 212,
                        y: 3338
                    },
                    {
                        x: 213,
                        y: 864
                    },
                    {
                        x: 214,
                        y: 4365
                    },
                    {
                        x: 215,
                        y: 3902
                    },
                    {
                        x: 216,
                        y: 1585
                    },
                    {
                        x: 217,
                        y: 4465
                    },
                    {
                        x: 218,
                        y: 1511
                    },
                    {
                        x: 219,
                        y: 4164
                    },
                    {
                        x: 220,
                        y: 1621
                    },
                    {
                        x: 221,
                        y: 1193
                    },
                    {
                        x: 222,
                        y: 2252
                    },
                    {
                        x: 223,
                        y: 2082
                    },
                    {
                        x: 224,
                        y: 698
                    },
                    {
                        x: 225,
                        y: 2917
                    },
                    {
                        x: 226,
                        y: 1368
                    },
                    {
                        x: 227,
                        y: 3601
                    },
                    {
                        x: 228,
                        y: 191
                    },
                    {
                        x: 229,
                        y: 386
                    },
                    {
                        x: 230,
                        y: 1767
                    },
                    {
                        x: 231,
                        y: 4605
                    },
                    {
                        x: 232,
                        y: 3667
                    },
                    {
                        x: 233,
                        y: 2116
                    },
                    {
                        x: 234,
                        y: 4874
                    },
                    {
                        x: 235,
                        y: 3328
                    },
                    {
                        x: 236,
                        y: 3924
                    },
                    {
                        x: 237,
                        y: 3783
                    },
                    {
                        x: 238,
                        y: 889
                    },
                    {
                        x: 239,
                        y: 2864
                    },
                    {
                        x: 240,
                        y: 2879
                    },
                    {
                        x: 241,
                        y: 2640
                    },
                    {
                        x: 242,
                        y: 1227
                    },
                    {
                        x: 243,
                        y: 1443
                    },
                    {
                        x: 244,
                        y: 484
                    },
                    {
                        x: 245,
                        y: 616
                    },
                    {
                        x: 246,
                        y: 1858
                    },
                    {
                        x: 247,
                        y: 1762
                    },
                    {
                        x: 248,
                        y: 2020
                    },
                    {
                        x: 249,
                        y: 1269
                    },
                    {
                        x: 250,
                        y: 3565
                    },
                    {
                        x: 251,
                        y: 4223
                    },
                    {
                        x: 252,
                        y: 2017
                    },
                    {
                        x: 253,
                        y: 3795
                    },
                    {
                        x: 254,
                        y: 3385
                    },
                    {
                        x: 255,
                        y: 2545
                    },
                    {
                        x: 256,
                        y: 745
                    },
                    {
                        x: 257,
                        y: 582
                    },
                    {
                        x: 258,
                        y: 2287
                    },
                    {
                        x: 259,
                        y: 3157
                    },
                    {
                        x: 260,
                        y: 3653
                    },
                    {
                        x: 261,
                        y: 780
                    },
                    {
                        x: 262,
                        y: 929
                    },
                    {
                        x: 263,
                        y: 1493
                    },
                    {
                        x: 264,
                        y: 4576
                    },
                    {
                        x: 265,
                        y: 2139
                    },
                    {
                        x: 266,
                        y: 4229
                    },
                    {
                        x: 267,
                        y: 574
                    },
                    {
                        x: 268,
                        y: 4313
                    },
                    {
                        x: 269,
                        y: 2806
                    },
                    {
                        x: 270,
                        y: 627
                    },
                    {
                        x: 271,
                        y: 1035
                    },
                    {
                        x: 272,
                        y: 3486
                    },
                    {
                        x: 273,
                        y: 4656
                    },
                    {
                        x: 274,
                        y: 3709
                    },
                    {
                        x: 275,
                        y: 2345
                    },
                    {
                        x: 276,
                        y: 4528
                    },
                    {
                        x: 277,
                        y: 2034
                    },
                    {
                        x: 278,
                        y: 2332
                    },
                    {
                        x: 279,
                        y: 3988
                    },
                    {
                        x: 280,
                        y: 1729
                    },
                    {
                        x: 281,
                        y: 2120
                    },
                    {
                        x: 282,
                        y: 2226
                    },
                    {
                        x: 283,
                        y: 3051
                    },
                    {
                        x: 284,
                        y: 1353
                    },
                    {
                        x: 285,
                        y: 36
                    },
                    {
                        x: 286,
                        y: 4332
                    },
                    {
                        x: 287,
                        y: 2470
                    },
                    {
                        x: 288,
                        y: 1436
                    },
                    {
                        x: 289,
                        y: 4083
                    },
                    {
                        x: 290,
                        y: 1480
                    },
                    {
                        x: 291,
                        y: 1117
                    },
                    {
                        x: 292,
                        y: 4035
                    },
                    {
                        x: 293,
                        y: 4096
                    },
                    {
                        x: 294,
                        y: 3949
                    },
                    {
                        x: 295,
                        y: 2775
                    },
                    {
                        x: 296,
                        y: 2320
                    },
                    {
                        x: 297,
                        y: 86
                    },
                    {
                        x: 298,
                        y: 4537
                    },
                    {
                        x: 299,
                        y: 849
                    },
                    {
                        x: 300,
                        y: 220
                    },
                    {
                        x: 301,
                        y: 1258
                    },
                    {
                        x: 302,
                        y: 1644
                    },
                    {
                        x: 303,
                        y: 1066
                    },
                    {
                        x: 304,
                        y: 3393
                    },
                    {
                        x: 305,
                        y: 3894
                    },
                    {
                        x: 306,
                        y: 588
                    },
                    {
                        x: 307,
                        y: 497
                    },
                    {
                        x: 308,
                        y: 4186
                    },
                    {
                        x: 309,
                        y: 4838
                    },
                    {
                        x: 310,
                        y: 944
                    },
                    {
                        x: 311,
                        y: 1253
                    },
                    {
                        x: 312,
                        y: 3223
                    },
                    {
                        x: 313,
                        y: 2086
                    },
                    {
                        x: 314,
                        y: 3310
                    },
                    {
                        x: 315,
                        y: 4478
                    },
                    {
                        x: 316,
                        y: 2048
                    },
                    {
                        x: 317,
                        y: 2317
                    },
                    {
                        x: 318,
                        y: 3045
                    },
                    {
                        x: 319,
                        y: 749
                    },
                    {
                        x: 320,
                        y: 3737
                    },
                    {
                        x: 321,
                        y: 2803
                    },
                    {
                        x: 322,
                        y: 595
                    },
                    {
                        x: 323,
                        y: 2949
                    },
                    {
                        x: 324,
                        y: 1971
                    },
                    {
                        x: 325,
                        y: 2414
                    },
                    {
                        x: 326,
                        y: 424
                    },
                    {
                        x: 327,
                        y: 1209
                    },
                    {
                        x: 328,
                        y: 3805
                    },
                    {
                        x: 329,
                        y: 4581
                    },
                    {
                        x: 330,
                        y: 1031
                    },
                    {
                        x: 331,
                        y: 2704
                    },
                    {
                        x: 332,
                        y: 1349
                    },
                    {
                        x: 333,
                        y: 587
                    },
                    {
                        x: 334,
                        y: 3900
                    },
                    {
                        x: 335,
                        y: 1319
                    },
                    {
                        x: 336,
                        y: 4993
                    },
                    {
                        x: 337,
                        y: 1789
                    },
                    {
                        x: 338,
                        y: 2747
                    },
                    {
                        x: 339,
                        y: 3895
                    },
                    {
                        x: 340,
                        y: 1575
                    },
                    {
                        x: 341,
                        y: 852
                    },
                    {
                        x: 342,
                        y: 4364
                    },
                    {
                        x: 343,
                        y: 4977
                    },
                    {
                        x: 344,
                        y: 606
                    },
                    {
                        x: 345,
                        y: 3059
                    },
                    {
                        x: 346,
                        y: 4101
                    },
                    {
                        x: 347,
                        y: 3562
                    },
                    {
                        x: 348,
                        y: 1562
                    },
                    {
                        x: 349,
                        y: 3663
                    },
                    {
                        x: 350,
                        y: 3899
                    },
                    {
                        x: 351,
                        y: 1205
                    },
                    {
                        x: 352,
                        y: 3292
                    },
                    {
                        x: 353,
                        y: 1920
                    },
                    {
                        x: 354,
                        y: 3972
                    },
                    {
                        x: 355,
                        y: 1539
                    },
                    {
                        x: 356,
                        y: 1426
                    },
                    {
                        x: 357,
                        y: 3884
                    },
                    {
                        x: 358,
                        y: 258
                    },
                    {
                        x: 359,
                        y: 3058
                    },
                    {
                        x: 360,
                        y: 2516
                    },
                    {
                        x: 361,
                        y: 1718
                    },
                    {
                        x: 362,
                        y: 202
                    },
                    {
                        x: 363,
                        y: 2359
                    },
                    {
                        x: 364,
                        y: 1176
                    },
                    {
                        x: 365,
                        y: 4259
                    },
                    {
                        x: 366,
                        y: 3539
                    },
                    {
                        x: 367,
                        y: 1697
                    },
                    {
                        x: 368,
                        y: 4851
                    },
                    {
                        x: 369,
                        y: 3603
                    },
                    {
                        x: 370,
                        y: 439
                    },
                    {
                        x: 371,
                        y: 4932
                    },
                    {
                        x: 372,
                        y: 125
                    },
                    {
                        x: 373,
                        y: 3199
                    },
                    {
                        x: 374,
                        y: 802
                    },
                    {
                        x: 375,
                        y: 604
                    },
                    {
                        x: 376,
                        y: 2089
                    },
                    {
                        x: 377,
                        y: 3479
                    },
                    {
                        x: 378,
                        y: 650
                    },
                    {
                        x: 379,
                        y: 2339
                    },
                    {
                        x: 380,
                        y: 3820
                    },
                    {
                        x: 381,
                        y: 3767
                    },
                    {
                        x: 382,
                        y: 4352
                    },
                    {
                        x: 383,
                        y: 3421
                    },
                    {
                        x: 384,
                        y: 269
                    },
                    {
                        x: 385,
                        y: 99
                    },
                    {
                        x: 386,
                        y: 2518
                    },
                    {
                        x: 387,
                        y: 1232
                    },
                    {
                        x: 388,
                        y: 670
                    },
                    {
                        x: 389,
                        y: 4709
                    },
                    {
                        x: 390,
                        y: 1079
                    },
                    {
                        x: 391,
                        y: 4032
                    },
                    {
                        x: 392,
                        y: 4410
                    },
                    {
                        x: 393,
                        y: 4317
                    },
                    {
                        x: 394,
                        y: 4879
                    },
                    {
                        x: 395,
                        y: 4391
                    },
                    {
                        x: 396,
                        y: 3668
                    },
                    {
                        x: 397,
                        y: 2044
                    },
                    {
                        x: 398,
                        y: 128
                    },
                    {
                        x: 399,
                        y: 2537
                    },
                    {
                        x: 400,
                        y: 4367
                    },
                    {
                        x: 401,
                        y: 4679
                    },
                    {
                        x: 402,
                        y: 3323
                    },
                    {
                        x: 403,
                        y: 2247
                    },
                    {
                        x: 404,
                        y: 2744
                    },
                    {
                        x: 405,
                        y: 2579
                    },
                    {
                        x: 406,
                        y: 4893
                    },
                    {
                        x: 407,
                        y: 1439
                    },
                    {
                        x: 408,
                        y: 3128
                    },
                    {
                        x: 409,
                        y: 470
                    },
                    {
                        x: 410,
                        y: 1478
                    },
                    {
                        x: 411,
                        y: 551
                    },
                    {
                        x: 412,
                        y: 4687
                    },
                    {
                        x: 413,
                        y: 1902
                    },
                    {
                        x: 414,
                        y: 3330
                    },
                    {
                        x: 415,
                        y: 1055
                    },
                    {
                        x: 416,
                        y: 1701
                    },
                    {
                        x: 417,
                        y: 1337
                    },
                    {
                        x: 418,
                        y: 4901
                    },
                    {
                        x: 419,
                        y: 4054
                    },
                    {
                        x: 420,
                        y: 3257
                    },
                    {
                        x: 421,
                        y: 4754
                    },
                    {
                        x: 422,
                        y: 4485
                    },
                    {
                        x: 423,
                        y: 4071
                    },
                    {
                        x: 424,
                        y: 3430
                    },
                    {
                        x: 425,
                        y: 2510
                    },
                    {
                        x: 426,
                        y: 2176
                    },
                    {
                        x: 427,
                        y: 4065
                    },
                    {
                        x: 428,
                        y: 4795
                    },
                    {
                        x: 429,
                        y: 4262
                    },
                    {
                        x: 430,
                        y: 4013
                    },
                    {
                        x: 431,
                        y: 1891
                    },
                    {
                        x: 432,
                        y: 1244
                    },
                    {
                        x: 433,
                        y: 2391
                    },
                    {
                        x: 434,
                        y: 3946
                    },
                    {
                        x: 435,
                        y: 4978
                    },
                    {
                        x: 436,
                        y: 1779
                    },
                    {
                        x: 437,
                        y: 2664
                    },
                    {
                        x: 438,
                        y: 3600
                    },
                    {
                        x: 439,
                        y: 2295
                    },
                    {
                        x: 440,
                        y: 1331
                    },
                    {
                        x: 441,
                        y: 3579
                    },
                    {
                        x: 442,
                        y: 3236
                    },
                    {
                        x: 443,
                        y: 2788
                    },
                    {
                        x: 444,
                        y: 3377
                    },
                    {
                        x: 445,
                        y: 3586
                    },
                    {
                        x: 446,
                        y: 768
                    },
                    {
                        x: 447,
                        y: 481
                    },
                    {
                        x: 448,
                        y: 4260
                    },
                    {
                        x: 449,
                        y: 2097
                    },
                    {
                        x: 450,
                        y: 1156
                    },
                    {
                        x: 451,
                        y: 3939
                    },
                    {
                        x: 452,
                        y: 2292
                    },
                    {
                        x: 453,
                        y: 3457
                    },
                    {
                        x: 454,
                        y: 4265
                    },
                    {
                        x: 455,
                        y: 3043
                    },
                    {
                        x: 456,
                        y: 3012
                    },
                    {
                        x: 457,
                        y: 2074
                    },
                    {
                        x: 458,
                        y: 1983
                    },
                    {
                        x: 459,
                        y: 654
                    },
                    {
                        x: 460,
                        y: 3455
                    },
                    {
                        x: 461,
                        y: 370
                    },
                    {
                        x: 462,
                        y: 502
                    },
                    {
                        x: 463,
                        y: 3936
                    },
                    {
                        x: 464,
                        y: 3799
                    },
                    {
                        x: 465,
                        y: 4055
                    },
                    {
                        x: 466,
                        y: 1797
                    },
                    {
                        x: 467,
                        y: 3466
                    },
                    {
                        x: 468,
                        y: 1211
                    },
                    {
                        x: 469,
                        y: 3354
                    },
                    {
                        x: 470,
                        y: 335
                    },
                    {
                        x: 471,
                        y: 2228
                    },
                    {
                        x: 472,
                        y: 2349
                    },
                    {
                        x: 473,
                        y: 3188
                    },
                    {
                        x: 474,
                        y: 4120
                    },
                    {
                        x: 475,
                        y: 764
                    },
                    {
                        x: 476,
                        y: 2929
                    },
                    {
                        x: 477,
                        y: 4416
                    },
                    {
                        x: 478,
                        y: 565
                    },
                    {
                        x: 479,
                        y: 1572
                    },
                    {
                        x: 480,
                        y: 3975
                    },
                    {
                        x: 481,
                        y: 1243
                    },
                    {
                        x: 482,
                        y: 4472
                    },
                    {
                        x: 483,
                        y: 3221
                    },
                    {
                        x: 484,
                        y: 3968
                    },
                    {
                        x: 485,
                        y: 3836
                    },
                    {
                        x: 486,
                        y: 267
                    },
                    {
                        x: 487,
                        y: 212
                    },
                    {
                        x: 488,
                        y: 1757
                    },
                    {
                        x: 489,
                        y: 1014
                    },
                    {
                        x: 490,
                        y: 2166
                    },
                    {
                        x: 491,
                        y: 1883
                    },
                    {
                        x: 492,
                        y: 4812
                    },
                    {
                        x: 493,
                        y: 2764
                    },
                    {
                        x: 494,
                        y: 4899
                    },
                    {
                        x: 495,
                        y: 2602
                    },
                    {
                        x: 496,
                        y: 4363
                    },
                    {
                        x: 497,
                        y: 1421
                    },
                    {
                        x: 498,
                        y: 1415
                    },
                    {
                        x: 499,
                        y: 2198
                    },
                    {
                        x: 500,
                        y: 2556
                    },
                    {
                        x: 501,
                        y: 3703
                    },
                    {
                        x: 502,
                        y: 248
                    },
                    {
                        x: 503,
                        y: 2862
                    },
                    {
                        x: 504,
                        y: 2503
                    },
                    {
                        x: 505,
                        y: 1643
                    },
                    {
                        x: 506,
                        y: 4202
                    },
                    {
                        x: 507,
                        y: 2348
                    },
                    {
                        x: 508,
                        y: 2914
                    },
                    {
                        x: 509,
                        y: 3117
                    },
                    {
                        x: 510,
                        y: 913
                    },
                    {
                        x: 511,
                        y: 1466
                    },
                    {
                        x: 512,
                        y: 2411
                    },
                    {
                        x: 513,
                        y: 3126
                    },
                    {
                        x: 514,
                        y: 1036
                    },
                    {
                        x: 515,
                        y: 2444
                    },
                    {
                        x: 516,
                        y: 2146
                    },
                    {
                        x: 517,
                        y: 4885
                    },
                    {
                        x: 518,
                        y: 2887
                    },
                    {
                        x: 519,
                        y: 1787
                    },
                    {
                        x: 520,
                        y: 4025
                    },
                    {
                        x: 521,
                        y: 3228
                    },
                    {
                        x: 522,
                        y: 3282
                    },
                    {
                        x: 523,
                        y: 98
                    },
                    {
                        x: 524,
                        y: 457
                    },
                    {
                        x: 525,
                        y: 234
                    },
                    {
                        x: 526,
                        y: 2392
                    },
                    {
                        x: 527,
                        y: 3142
                    },
                    {
                        x: 528,
                        y: 4892
                    },
                    {
                        x: 529,
                        y: 3322
                    },
                    {
                        x: 530,
                        y: 1038
                    },
                    {
                        x: 531,
                        y: 1291
                    },
                    {
                        x: 532,
                        y: 81
                    },
                    {
                        x: 533,
                        y: 2246
                    },
                    {
                        x: 534,
                        y: 2311
                    },
                    {
                        x: 535,
                        y: 1651
                    },
                    {
                        x: 536,
                        y: 2140
                    },
                    {
                        x: 537,
                        y: 744
                    },
                    {
                        x: 538,
                        y: 4858
                    },
                    {
                        x: 539,
                        y: 517
                    },
                    {
                        x: 540,
                        y: 2062
                    },
                    {
                        x: 541,
                        y: 775
                    },
                    {
                        x: 542,
                        y: 724
                    },
                    {
                        x: 543,
                        y: 499
                    },
                    {
                        x: 544,
                        y: 1063
                    },
                    {
                        x: 545,
                        y: 3961
                    },
                    {
                        x: 546,
                        y: 1777
                    },
                    {
                        x: 547,
                        y: 3693
                    },
                    {
                        x: 548,
                        y: 2991
                    },
                    {
                        x: 549,
                        y: 4069
                    },
                    {
                        x: 550,
                        y: 2994
                    },
                    {
                        x: 551,
                        y: 578
                    },
                    {
                        x: 552,
                        y: 4086
                    },
                    {
                        x: 553,
                        y: 10
                    },
                    {
                        x: 554,
                        y: 434
                    },
                    {
                        x: 555,
                        y: 2096
                    },
                    {
                        x: 556,
                        y: 3991
                    },
                    {
                        x: 557,
                        y: 2970
                    },
                    {
                        x: 558,
                        y: 2425
                    },
                    {
                        x: 559,
                        y: 3634
                    },
                    {
                        x: 560,
                        y: 71
                    },
                    {
                        x: 561,
                        y: 1836
                    },
                    {
                        x: 562,
                        y: 4760
                    },
                    {
                        x: 563,
                        y: 688
                    },
                    {
                        x: 564,
                        y: 2515
                    },
                    {
                        x: 565,
                        y: 1189
                    },
                    {
                        x: 566,
                        y: 500
                    },
                    {
                        x: 567,
                        y: 1558
                    },
                    {
                        x: 568,
                        y: 1724
                    },
                    {
                        x: 569,
                        y: 1523
                    },
                    {
                        x: 570,
                        y: 1969
                    },
                    {
                        x: 571,
                        y: 4668
                    },
                    {
                        x: 572,
                        y: 628
                    },
                    {
                        x: 573,
                        y: 246
                    },
                    {
                        x: 574,
                        y: 3249
                    },
                    {
                        x: 575,
                        y: 2400
                    },
                    {
                        x: 576,
                        y: 4792
                    },
                    {
                        x: 577,
                        y: 4094
                    },
                    {
                        x: 578,
                        y: 4632
                    },
                    {
                        x: 579,
                        y: 4693
                    },
                    {
                        x: 580,
                        y: 2905
                    },
                    {
                        x: 581,
                        y: 1852
                    },
                    {
                        x: 582,
                        y: 1794
                    },
                    {
                        x: 583,
                        y: 3637
                    },
                    {
                        x: 584,
                        y: 1001
                    },
                    {
                        x: 585,
                        y: 1587
                    },
                    {
                        x: 586,
                        y: 4401
                    },
                    {
                        x: 587,
                        y: 1382
                    },
                    {
                        x: 588,
                        y: 1765
                    },
                    {
                        x: 589,
                        y: 3889
                    },
                    {
                        x: 590,
                        y: 701
                    },
                    {
                        x: 591,
                        y: 2329
                    },
                    {
                        x: 592,
                        y: 846
                    },
                    {
                        x: 593,
                        y: 2250
                    },
                    {
                        x: 594,
                        y: 2514
                    },
                    {
                        x: 595,
                        y: 4742
                    },
                    {
                        x: 596,
                        y: 1447
                    },
                    {
                        x: 597,
                        y: 4427
                    },
                    {
                        x: 598,
                        y: 594
                    },
                    {
                        x: 599,
                        y: 3116
                    },
                    {
                        x: 600,
                        y: 264
                    },
                    {
                        x: 601,
                        y: 2648
                    },
                    {
                        x: 602,
                        y: 3925
                    },
                    {
                        x: 603,
                        y: 4378
                    },
                    {
                        x: 604,
                        y: 3196
                    },
                    {
                        x: 605,
                        y: 3274
                    },
                    {
                        x: 606,
                        y: 1548
                    },
                    {
                        x: 607,
                        y: 609
                    },
                    {
                        x: 608,
                        y: 1084
                    },
                    {
                        x: 609,
                        y: 2230
                    },
                    {
                        x: 610,
                        y: 2235
                    },
                    {
                        x: 611,
                        y: 399
                    },
                    {
                        x: 612,
                        y: 1671
                    },
                    {
                        x: 613,
                        y: 4818
                    },
                    {
                        x: 614,
                        y: 440
                    },
                    {
                        x: 615,
                        y: 1398
                    },
                    {
                        x: 616,
                        y: 1756
                    },
                    {
                        x: 617,
                        y: 2028
                    },
                    {
                        x: 618,
                        y: 149
                    },
                    {
                        x: 619,
                        y: 2908
                    },
                    {
                        x: 620,
                        y: 3923
                    },
                    {
                        x: 621,
                        y: 2350
                    },
                    {
                        x: 622,
                        y: 2248
                    },
                    {
                        x: 623,
                        y: 1262
                    },
                    {
                        x: 624,
                        y: 3490
                    },
                    {
                        x: 625,
                        y: 3307
                    },
                    {
                        x: 626,
                        y: 943
                    },
                    {
                        x: 627,
                        y: 4649
                    },
                    {
                        x: 628,
                        y: 3775
                    },
                    {
                        x: 629,
                        y: 2346
                    },
                    {
                        x: 630,
                        y: 117
                    },
                    {
                        x: 631,
                        y: 2208
                    },
                    {
                        x: 632,
                        y: 791
                    },
                    {
                        x: 633,
                        y: 1584
                    },
                    {
                        x: 634,
                        y: 4602
                    },
                    {
                        x: 635,
                        y: 3635
                    },
                    {
                        x: 636,
                        y: 353
                    },
                    {
                        x: 637,
                        y: 4530
                    },
                    {
                        x: 638,
                        y: 2306
                    },
                    {
                        x: 639,
                        y: 3617
                    },
                    {
                        x: 640,
                        y: 3661
                    },
                    {
                        x: 641,
                        y: 1925
                    },
                    {
                        x: 642,
                        y: 3965
                    },
                    {
                        x: 643,
                        y: 411
                    },
                    {
                        x: 644,
                        y: 2416
                    },
                    {
                        x: 645,
                        y: 448
                    },
                    {
                        x: 646,
                        y: 2759
                    },
                    {
                        x: 647,
                        y: 2175
                    },
                    {
                        x: 648,
                        y: 2754
                    },
                    {
                        x: 649,
                        y: 1024
                    },
                    {
                        x: 650,
                        y: 1499
                    },
                    {
                        x: 651,
                        y: 4203
                    },
                    {
                        x: 652,
                        y: 4831
                    },
                    {
                        x: 653,
                        y: 719
                    },
                    {
                        x: 654,
                        y: 2154
                    },
                    {
                        x: 655,
                        y: 1864
                    },
                    {
                        x: 656,
                        y: 1295
                    },
                    {
                        x: 657,
                        y: 1396
                    },
                    {
                        x: 658,
                        y: 3248
                    },
                    {
                        x: 659,
                        y: 2284
                    },
                    {
                        x: 660,
                        y: 4650
                    },
                    {
                        x: 661,
                        y: 1516
                    },
                    {
                        x: 662,
                        y: 1862
                    },
                    {
                        x: 663,
                        y: 3589
                    },
                    {
                        x: 664,
                        y: 2101
                    },
                    {
                        x: 665,
                        y: 4648
                    },
                    {
                        x: 666,
                        y: 4979
                    },
                    {
                        x: 667,
                        y: 1997
                    },
                    {
                        x: 668,
                        y: 4944
                    },
                    {
                        x: 669,
                        y: 4720
                    },
                    {
                        x: 670,
                        y: 4406
                    },
                    {
                        x: 671,
                        y: 4663
                    },
                    {
                        x: 672,
                        y: 3462
                    },
                    {
                        x: 673,
                        y: 4907
                    },
                    {
                        x: 674,
                        y: 2380
                    },
                    {
                        x: 675,
                        y: 2802
                    },
                    {
                        x: 676,
                        y: 1310
                    },
                    {
                        x: 677,
                        y: 3822
                    },
                    {
                        x: 678,
                        y: 154
                    },
                    {
                        x: 679,
                        y: 1049
                    },
                    {
                        x: 680,
                        y: 3342
                    },
                    {
                        x: 681,
                        y: 576
                    },
                    {
                        x: 682,
                        y: 3272
                    },
                    {
                        x: 683,
                        y: 3252
                    },
                    {
                        x: 684,
                        y: 4209
                    },
                    {
                        x: 685,
                        y: 651
                    },
                    {
                        x: 686,
                        y: 231
                    },
                    {
                        x: 687,
                        y: 3942
                    },
                    {
                        x: 688,
                        y: 4673
                    },
                    {
                        x: 689,
                        y: 3146
                    },
                    {
                        x: 690,
                        y: 757
                    },
                    {
                        x: 691,
                        y: 1623
                    },
                    {
                        x: 692,
                        y: 2222
                    },
                    {
                        x: 693,
                        y: 1822
                    },
                    {
                        x: 694,
                        y: 3489
                    },
                    {
                        x: 695,
                        y: 612
                    },
                    {
                        x: 696,
                        y: 1256
                    },
                    {
                        x: 697,
                        y: 2405
                    },
                    {
                        x: 698,
                        y: 4743
                    },
                    {
                        x: 699,
                        y: 2554
                    },
                    {
                        x: 700,
                        y: 3719
                    },
                    {
                        x: 701,
                        y: 2324
                    },
                    {
                        x: 702,
                        y: 1962
                    },
                    {
                        x: 703,
                        y: 312
                    },
                    {
                        x: 704,
                        y: 1813
                    },
                    {
                        x: 705,
                        y: 4950
                    },
                    {
                        x: 706,
                        y: 511
                    },
                    {
                        x: 707,
                        y: 2276
                    },
                    {
                        x: 708,
                        y: 3035
                    },
                    {
                        x: 709,
                        y: 1799
                    },
                    {
                        x: 710,
                        y: 3529
                    },
                    {
                        x: 711,
                        y: 2551
                    },
                    {
                        x: 712,
                        y: 473
                    },
                    {
                        x: 713,
                        y: 3878
                    },
                    {
                        x: 714,
                        y: 669
                    },
                    {
                        x: 715,
                        y: 4735
                    },
                    {
                        x: 716,
                        y: 918
                    },
                    {
                        x: 717,
                        y: 395
                    },
                    {
                        x: 718,
                        y: 4886
                    },
                    {
                        x: 719,
                        y: 3979
                    },
                    {
                        x: 720,
                        y: 3315
                    },
                    {
                        x: 721,
                        y: 3841
                    },
                    {
                        x: 722,
                        y: 3771
                    },
                    {
                        x: 723,
                        y: 2113
                    },
                    {
                        x: 724,
                        y: 1685
                    },
                    {
                        x: 725,
                        y: 3255
                    },
                    {
                        x: 726,
                        y: 859
                    },
                    {
                        x: 727,
                        y: 1101
                    },
                    {
                        x: 728,
                        y: 107
                    },
                    {
                        x: 729,
                        y: 2831
                    },
                    {
                        x: 730,
                        y: 1105
                    },
                    {
                        x: 731,
                        y: 2337
                    },
                    {
                        x: 732,
                        y: 4305
                    },
                    {
                        x: 733,
                        y: 2475
                    },
                    {
                        x: 734,
                        y: 2031
                    },
                    {
                        x: 735,
                        y: 823
                    },
                    {
                        x: 736,
                        y: 3749
                    },
                    {
                        x: 737,
                        y: 4637
                    },
                    {
                        x: 738,
                        y: 3353
                    },
                    {
                        x: 739,
                        y: 3829
                    },
                    {
                        x: 740,
                        y: 2220
                    },
                    {
                        x: 741,
                        y: 2550
                    },
                    {
                        x: 742,
                        y: 1374
                    },
                    {
                        x: 743,
                        y: 583
                    },
                    {
                        x: 744,
                        y: 3032
                    },
                    {
                        x: 745,
                        y: 2714
                    },
                    {
                        x: 746,
                        y: 2849
                    },
                    {
                        x: 747,
                        y: 4725
                    },
                    {
                        x: 748,
                        y: 3728
                    },
                    {
                        x: 749,
                        y: 2046
                    },
                    {
                        x: 750,
                        y: 1379
                    },
                    {
                        x: 751,
                        y: 2059
                    },
                    {
                        x: 752,
                        y: 770
                    },
                    {
                        x: 753,
                        y: 2675
                    },
                    {
                        x: 754,
                        y: 1318
                    },
                    {
                        x: 755,
                        y: 3773
                    },
                    {
                        x: 756,
                        y: 2304
                    },
                    {
                        x: 757,
                        y: 2619
                    },
                    {
                        x: 758,
                        y: 1620
                    },
                    {
                        x: 759,
                        y: 4375
                    },
                    {
                        x: 760,
                        y: 3178
                    },
                    {
                        x: 761,
                        y: 3826
                    },
                    {
                        x: 762,
                        y: 2655
                    },
                    {
                        x: 763,
                        y: 3651
                    },
                    {
                        x: 764,
                        y: 2894
                    },
                    {
                        x: 765,
                        y: 5
                    },
                    {
                        x: 766,
                        y: 3266
                    },
                    {
                        x: 767,
                        y: 4702
                    },
                    {
                        x: 768,
                        y: 1030
                    },
                    {
                        x: 769,
                        y: 3572
                    },
                    {
                        x: 770,
                        y: 144
                    },
                    {
                        x: 771,
                        y: 1625
                    },
                    {
                        x: 772,
                        y: 2743
                    },
                    {
                        x: 773,
                        y: 1759
                    },
                    {
                        x: 774,
                        y: 3370
                    },
                    {
                        x: 775,
                        y: 4817
                    },
                    {
                        x: 776,
                        y: 4748
                    },
                    {
                        x: 777,
                        y: 1409
                    },
                    {
                        x: 778,
                        y: 2752
                    },
                    {
                        x: 779,
                        y: 4780
                    },
                    {
                        x: 780,
                        y: 4661
                    },
                    {
                        x: 781,
                        y: 1812
                    },
                    {
                        x: 782,
                        y: 261
                    },
                    {
                        x: 783,
                        y: 491
                    },
                    {
                        x: 784,
                        y: 1521
                    },
                    {
                        x: 785,
                        y: 3210
                    },
                    {
                        x: 786,
                        y: 1742
                    },
                    {
                        x: 787,
                        y: 3259
                    },
                    {
                        x: 788,
                        y: 4043
                    },
                    {
                        x: 789,
                        y: 1048
                    },
                    {
                        x: 790,
                        y: 120
                    },
                    {
                        x: 791,
                        y: 3092
                    },
                    {
                        x: 792,
                        y: 3296
                    },
                    {
                        x: 793,
                        y: 1730
                    },
                    {
                        x: 794,
                        y: 4289
                    },
                    {
                        x: 795,
                        y: 307
                    },
                    {
                        x: 796,
                        y: 676
                    },
                    {
                        x: 797,
                        y: 3588
                    },
                    {
                        x: 798,
                        y: 3010
                    },
                    {
                        x: 799,
                        y: 66
                    },
                    {
                        x: 800,
                        y: 1498
                    },
                    {
                        x: 801,
                        y: 2872
                    },
                    {
                        x: 802,
                        y: 2331
                    },
                    {
                        x: 803,
                        y: 3002
                    },
                    {
                        x: 804,
                        y: 152
                    },
                    {
                        x: 805,
                        y: 1175
                    },
                    {
                        x: 806,
                        y: 1911
                    },
                    {
                        x: 807,
                        y: 985
                    },
                    {
                        x: 808,
                        y: 3561
                    },
                    {
                        x: 809,
                        y: 2645
                    },
                    {
                        x: 810,
                        y: 4341
                    },
                    {
                        x: 811,
                        y: 2517
                    },
                    {
                        x: 812,
                        y: 3261
                    },
                    {
                        x: 813,
                        y: 4798
                    },
                    {
                        x: 814,
                        y: 2560
                    },
                    {
                        x: 815,
                        y: 2840
                    },
                    {
                        x: 816,
                        y: 300
                    },
                    {
                        x: 817,
                        y: 1831
                    },
                    {
                        x: 818,
                        y: 2378
                    },
                    {
                        x: 819,
                        y: 2032
                    },
                    {
                        x: 820,
                        y: 633
                    },
                    {
                        x: 821,
                        y: 1804
                    },
                    {
                        x: 822,
                        y: 508
                    },
                    {
                        x: 823,
                        y: 2417
                    },
                    {
                        x: 824,
                        y: 367
                    },
                    {
                        x: 825,
                        y: 1922
                    },
                    {
                        x: 826,
                        y: 656
                    },
                    {
                        x: 827,
                        y: 3560
                    },
                    {
                        x: 828,
                        y: 4821
                    },
                    {
                        x: 829,
                        y: 2936
                    },
                    {
                        x: 830,
                        y: 4524
                    },
                    {
                        x: 831,
                        y: 3842
                    },
                    {
                        x: 832,
                        y: 2834
                    },
                    {
                        x: 833,
                        y: 2730
                    },
                    {
                        x: 834,
                        y: 2814
                    },
                    {
                        x: 835,
                        y: 4100
                    },
                    {
                        x: 836,
                        y: 2815
                    },
                    {
                        x: 837,
                        y: 2456
                    },
                    {
                        x: 838,
                        y: 1861
                    },
                    {
                        x: 839,
                        y: 3139
                    },
                    {
                        x: 840,
                        y: 4598
                    },
                    {
                        x: 841,
                        y: 475
                    },
                    {
                        x: 842,
                        y: 4719
                    },
                    {
                        x: 843,
                        y: 3984
                    },
                    {
                        x: 844,
                        y: 837
                    },
                    {
                        x: 845,
                        y: 20
                    },
                    {
                        x: 846,
                        y: 3849
                    },
                    {
                        x: 847,
                        y: 3318
                    },
                    {
                        x: 848,
                        y: 4308
                    },
                    {
                        x: 849,
                        y: 1833
                    },
                    {
                        x: 850,
                        y: 179
                    },
                    {
                        x: 851,
                        y: 3726
                    },
                    {
                        x: 852,
                        y: 1267
                    },
                    {
                        x: 853,
                        y: 2899
                    },
                    {
                        x: 854,
                        y: 3812
                    },
                    {
                        x: 855,
                        y: 2787
                    },
                    {
                        x: 856,
                        y: 4930
                    },
                    {
                        x: 857,
                        y: 2959
                    },
                    {
                        x: 858,
                        y: 4419
                    },
                    {
                        x: 859,
                        y: 3218
                    },
                    {
                        x: 860,
                        y: 336
                    },
                    {
                        x: 861,
                        y: 807
                    },
                    {
                        x: 862,
                        y: 1974
                    },
                    {
                        x: 863,
                        y: 1260
                    },
                    {
                        x: 864,
                        y: 1141
                    },
                    {
                        x: 865,
                        y: 2967
                    },
                    {
                        x: 866,
                        y: 1252
                    },
                    {
                        x: 867,
                        y: 1649
                    },
                    {
                        x: 868,
                        y: 2511
                    },
                    {
                        x: 869,
                        y: 4291
                    },
                    {
                        x: 870,
                        y: 110
                    },
                    {
                        x: 871,
                        y: 2881
                    },
                    {
                        x: 872,
                        y: 380
                    },
                    {
                        x: 873,
                        y: 1693
                    },
                    {
                        x: 874,
                        y: 4399
                    },
                    {
                        x: 875,
                        y: 4762
                    },
                    {
                        x: 876,
                        y: 76
                    },
                    {
                        x: 877,
                        y: 3057
                    },
                    {
                        x: 878,
                        y: 4437
                    },
                    {
                        x: 879,
                        y: 2745
                    },
                    {
                        x: 880,
                        y: 806
                    },
                    {
                        x: 881,
                        y: 3911
                    },
                    {
                        x: 882,
                        y: 4768
                    },
                    {
                        x: 883,
                        y: 221
                    },
                    {
                        x: 884,
                        y: 2042
                    },
                    {
                        x: 885,
                        y: 4019
                    },
                    {
                        x: 886,
                        y: 3241
                    },
                    {
                        x: 887,
                        y: 3643
                    },
                    {
                        x: 888,
                        y: 4154
                    },
                    {
                        x: 889,
                        y: 1873
                    },
                    {
                        x: 890,
                        y: 3790
                    },
                    {
                        x: 891,
                        y: 3607
                    },
                    {
                        x: 892,
                        y: 3990
                    },
                    {
                        x: 893,
                        y: 3149
                    },
                    {
                        x: 894,
                        y: 4076
                    },
                    {
                        x: 895,
                        y: 1298
                    },
                    {
                        x: 896,
                        y: 4900
                    },
                    {
                        x: 897,
                        y: 1119
                    },
                    {
                        x: 898,
                        y: 1112
                    },
                    {
                        x: 899,
                        y: 1114
                    },
                    {
                        x: 900,
                        y: 1367
                    },
                    {
                        x: 901,
                        y: 2969
                    },
                    {
                        x: 902,
                        y: 96
                    },
                    {
                        x: 903,
                        y: 3564
                    },
                    {
                        x: 904,
                        y: 2026
                    },
                    {
                        x: 905,
                        y: 396
                    },
                    {
                        x: 906,
                        y: 1525
                    },
                    {
                        x: 907,
                        y: 4875
                    },
                    {
                        x: 908,
                        y: 2877
                    },
                    {
                        x: 909,
                        y: 4336
                    },
                    {
                        x: 910,
                        y: 1169
                    },
                    {
                        x: 911,
                        y: 3458
                    },
                    {
                        x: 912,
                        y: 4366
                    },
                    {
                        x: 913,
                        y: 1483
                    },
                    {
                        x: 914,
                        y: 276
                    },
                    {
                        x: 915,
                        y: 4967
                    },
                    {
                        x: 916,
                        y: 1946
                    },
                    {
                        x: 917,
                        y: 2130
                    },
                    {
                        x: 918,
                        y: 1705
                    },
                    {
                        x: 919,
                        y: 3033
                    },
                    {
                        x: 920,
                        y: 1236
                    },
                    {
                        x: 921,
                        y: 1560
                    },
                    {
                        x: 922,
                        y: 2843
                    },
                    {
                        x: 923,
                        y: 4369
                    },
                    {
                        x: 924,
                        y: 4370
                    },
                    {
                        x: 925,
                        y: 2354
                    },
                    {
                        x: 926,
                        y: 4707
                    },
                    {
                        x: 927,
                        y: 3293
                    },
                    {
                        x: 928,
                        y: 1601
                    },
                    {
                        x: 929,
                        y: 3620
                    },
                    {
                        x: 930,
                        y: 2327
                    },
                    {
                        x: 931,
                        y: 722
                    },
                    {
                        x: 932,
                        y: 948
                    },
                    {
                        x: 933,
                        y: 2883
                    },
                    {
                        x: 934,
                        y: 1241
                    },
                    {
                        x: 935,
                        y: 3694
                    },
                    {
                        x: 936,
                        y: 147
                    },
                    {
                        x: 937,
                        y: 4804
                    },
                    {
                        x: 938,
                        y: 665
                    },
                    {
                        x: 939,
                        y: 2264
                    },
                    {
                        x: 940,
                        y: 3366
                    },
                    {
                        x: 941,
                        y: 4443
                    },
                    {
                        x: 942,
                        y: 4400
                    },
                    {
                        x: 943,
                        y: 4936
                    },
                    {
                        x: 944,
                        y: 4247
                    },
                    {
                        x: 945,
                        y: 4042
                    },
                    {
                        x: 946,
                        y: 4634
                    },
                    {
                        x: 947,
                        y: 4819
                    },
                    {
                        x: 948,
                        y: 341
                    },
                    {
                        x: 949,
                        y: 2860
                    },
                    {
                        x: 950,
                        y: 2505
                    },
                    {
                        x: 951,
                        y: 4789
                    },
                    {
                        x: 952,
                        y: 605
                    },
                    {
                        x: 953,
                        y: 4774
                    },
                    {
                        x: 954,
                        y: 1531
                    },
                    {
                        x: 955,
                        y: 3299
                    },
                    {
                        x: 956,
                        y: 1003
                    },
                    {
                        x: 957,
                        y: 3967
                    },
                    {
                        x: 958,
                        y: 3215
                    },
                    {
                        x: 959,
                        y: 2854
                    },
                    {
                        x: 960,
                        y: 1930
                    },
                    {
                        x: 961,
                        y: 3996
                    },
                    {
                        x: 962,
                        y: 286
                    },
                    {
                        x: 963,
                        y: 1095
                    },
                    {
                        x: 964,
                        y: 4208
                    },
                    {
                        x: 965,
                        y: 4304
                    },
                    {
                        x: 966,
                        y: 2928
                    },
                    {
                        x: 967,
                        y: 4987
                    },
                    {
                        x: 968,
                        y: 468
                    },
                    {
                        x: 969,
                        y: 3439
                    },
                    {
                        x: 970,
                        y: 4271
                    },
                    {
                        x: 971,
                        y: 2601
                    },
                    {
                        x: 972,
                        y: 2122
                    },
                    {
                        x: 973,
                        y: 236
                    },
                    {
                        x: 974,
                        y: 4206
                    },
                    {
                        x: 975,
                        y: 2098
                    },
                    {
                        x: 976,
                        y: 4070
                    },
                    {
                        x: 977,
                        y: 425
                    },
                    {
                        x: 978,
                        y: 1404
                    },
                    {
                        x: 979,
                        y: 90
                    },
                    {
                        x: 980,
                        y: 2052
                    },
                    {
                        x: 981,
                        y: 3527
                    },
                    {
                        x: 982,
                        y: 4091
                    },
                    {
                        x: 983,
                        y: 1077
                    },
                    {
                        x: 984,
                        y: 139
                    },
                    {
                        x: 985,
                        y: 1537
                    },
                    {
                        x: 986,
                        y: 2003
                    },
                    {
                        x: 987,
                        y: 3644
                    },
                    {
                        x: 988,
                        y: 2143
                    },
                    {
                        x: 989,
                        y: 3240
                    },
                    {
                        x: 990,
                        y: 1887
                    },
                    {
                        x: 991,
                        y: 1829
                    },
                    {
                        x: 992,
                        y: 1068
                    },
                    {
                        x: 993,
                        y: 4603
                    },
                    {
                        x: 994,
                        y: 359
                    },
                    {
                        x: 995,
                        y: 39
                    },
                    {
                        x: 996,
                        y: 4036
                    },
                    {
                        x: 997,
                        y: 2587
                    },
                    {
                        x: 998,
                        y: 4358
                    },
                    {
                        x: 999,
                        y: 3791
                    },
                    {
                        x: 1000,
                        y: 235
                    },
                    {
                        x: 1001,
                        y: 2126
                    },
                    {
                        x: 1002,
                        y: 1513
                    },
                    {
                        x: 1003,
                        y: 1529
                    },
                    {
                        x: 1004,
                        y: 199
                    },
                    {
                        x: 1005,
                        y: 2784
                    },
                    {
                        x: 1006,
                        y: 1798
                    },
                    {
                        x: 1007,
                        y: 832
                    },
                    {
                        x: 1008,
                        y: 398
                    },
                    {
                        x: 1009,
                        y: 1467
                    },
                    {
                        x: 1010,
                        y: 2845
                    },
                    {
                        x: 1011,
                        y: 1686
                    },
                    {
                        x: 1012,
                        y: 2094
                    },
                    {
                        x: 1013,
                        y: 1321
                    },
                    {
                        x: 1014,
                        y: 3642
                    },
                    {
                        x: 1015,
                        y: 549
                    },
                    {
                        x: 1016,
                        y: 3225
                    },
                    {
                        x: 1017,
                        y: 1122
                    },
                    {
                        x: 1018,
                        y: 4
                    },
                    {
                        x: 1019,
                        y: 208
                    },
                    {
                        x: 1020,
                        y: 1453
                    },
                    {
                        x: 1021,
                        y: 2095
                    },
                    {
                        x: 1022,
                        y: 2043
                    },
                    {
                        x: 1023,
                        y: 2127
                    },
                    {
                        x: 1024,
                        y: 1400
                    },
                    {
                        x: 1025,
                        y: 552
                    },
                    {
                        x: 1026,
                        y: 1715
                    },
                    {
                        x: 1027,
                        y: 3160
                    },
                    {
                        x: 1028,
                        y: 3530
                    },
                    {
                        x: 1029,
                        y: 533
                    },
                    {
                        x: 1030,
                        y: 4422
                    },
                    {
                        x: 1031,
                        y: 3855
                    },
                    {
                        x: 1032,
                        y: 1616
                    },
                    {
                        x: 1033,
                        y: 301
                    },
                    {
                        x: 1034,
                        y: 4973
                    },
                    {
                        x: 1035,
                        y: 4805
                    },
                    {
                        x: 1036,
                        y: 265
                    },
                    {
                        x: 1037,
                        y: 2785
                    },
                    {
                        x: 1038,
                        y: 4520
                    },
                    {
                        x: 1039,
                        y: 53
                    },
                    {
                        x: 1040,
                        y: 1923
                    },
                    {
                        x: 1041,
                        y: 2786
                    },
                    {
                        x: 1042,
                        y: 3918
                    },
                    {
                        x: 1043,
                        y: 1713
                    },
                    {
                        x: 1044,
                        y: 891
                    },
                    {
                        x: 1045,
                        y: 319
                    },
                    {
                        x: 1046,
                        y: 1086
                    },
                    {
                        x: 1047,
                        y: 2774
                    },
                    {
                        x: 1048,
                        y: 423
                    },
                    {
                        x: 1049,
                        y: 1714
                    },
                    {
                        x: 1050,
                        y: 3524
                    },
                    {
                        x: 1051,
                        y: 3510
                    },
                    {
                        x: 1052,
                        y: 2858
                    },
                    {
                        x: 1053,
                        y: 3238
                    },
                    {
                        x: 1054,
                        y: 1370
                    },
                    {
                        x: 1055,
                        y: 2793
                    },
                    {
                        x: 1056,
                        y: 2355
                    },
                    {
                        x: 1057,
                        y: 1874
                    },
                    {
                        x: 1058,
                        y: 4557
                    },
                    {
                        x: 1059,
                        y: 2728
                    },
                    {
                        x: 1060,
                        y: 4802
                    },
                    {
                        x: 1061,
                        y: 2504
                    },
                    {
                        x: 1062,
                        y: 3163
                    },
                    {
                        x: 1063,
                        y: 4705
                    },
                    {
                        x: 1064,
                        y: 4057
                    },
                    {
                        x: 1065,
                        y: 1223
                    },
                    {
                        x: 1066,
                        y: 1172
                    },
                    {
                        x: 1067,
                        y: 148
                    },
                    {
                        x: 1068,
                        y: 4029
                    },
                    {
                        x: 1069,
                        y: 2455
                    },
                    {
                        x: 1070,
                        y: 2573
                    },
                    {
                        x: 1071,
                        y: 4925
                    },
                    {
                        x: 1072,
                        y: 3932
                    },
                    {
                        x: 1073,
                        y: 984
                    },
                    {
                        x: 1074,
                        y: 410
                    },
                    {
                        x: 1075,
                        y: 3473
                    },
                    {
                        x: 1076,
                        y: 3507
                    },
                    {
                        x: 1077,
                        y: 1091
                    },
                    {
                        x: 1078,
                        y: 2634
                    },
                    {
                        x: 1079,
                        y: 460
                    },
                    {
                        x: 1080,
                        y: 2624
                    },
                    {
                        x: 1081,
                        y: 2838
                    },
                    {
                        x: 1082,
                        y: 394
                    },
                    {
                        x: 1083,
                        y: 536
                    },
                    {
                        x: 1084,
                        y: 2925
                    },
                    {
                        x: 1085,
                        y: 4467
                    },
                    {
                        x: 1086,
                        y: 2950
                    },
                    {
                        x: 1087,
                        y: 4152
                    },
                    {
                        x: 1088,
                        y: 1401
                    },
                    {
                        x: 1089,
                        y: 2152
                    },
                    {
                        x: 1090,
                        y: 4848
                    },
                    {
                        x: 1091,
                        y: 2642
                    },
                    {
                        x: 1092,
                        y: 4510
                    },
                    {
                        x: 1093,
                        y: 2007
                    },
                    {
                        x: 1094,
                        y: 2727
                    },
                    {
                        x: 1095,
                        y: 4339
                    },
                    {
                        x: 1096,
                        y: 198
                    },
                    {
                        x: 1097,
                        y: 4273
                    },
                    {
                        x: 1098,
                        y: 1754
                    },
                    {
                        x: 1099,
                        y: 2597
                    },
                    {
                        x: 1100,
                        y: 3115
                    },
                    {
                        x: 1101,
                        y: 3986
                    },
                    {
                        x: 1102,
                        y: 741
                    },
                    {
                        x: 1103,
                        y: 3708
                    },
                    {
                        x: 1104,
                        y: 2536
                    },
                    {
                        x: 1105,
                        y: 1160
                    },
                    {
                        x: 1106,
                        y: 2612
                    },
                    {
                        x: 1107,
                        y: 2897
                    },
                    {
                        x: 1108,
                        y: 4495
                    },
                    {
                        x: 1109,
                        y: 4423
                    },
                    {
                        x: 1110,
                        y: 622
                    },
                    {
                        x: 1111,
                        y: 3378
                    },
                    {
                        x: 1112,
                        y: 3275
                    },
                    {
                        x: 1113,
                        y: 1286
                    },
                    {
                        x: 1114,
                        y: 4445
                    },
                    {
                        x: 1115,
                        y: 2491
                    },
                    {
                        x: 1116,
                        y: 2839
                    },
                    {
                        x: 1117,
                        y: 34
                    },
                    {
                        x: 1118,
                        y: 4738
                    },
                    {
                        x: 1119,
                        y: 2090
                    },
                    {
                        x: 1120,
                        y: 195
                    },
                    {
                        x: 1121,
                        y: 3165
                    },
                    {
                        x: 1122,
                        y: 4941
                    },
                    {
                        x: 1123,
                        y: 3167
                    },
                    {
                        x: 1124,
                        y: 277
                    },
                    {
                        x: 1125,
                        y: 3044
                    },
                    {
                        x: 1126,
                        y: 4268
                    },
                    {
                        x: 1127,
                        y: 4311
                    },
                    {
                        x: 1128,
                        y: 3696
                    },
                    {
                        x: 1129,
                        y: 2801
                    },
                    {
                        x: 1130,
                        y: 3183
                    },
                    {
                        x: 1131,
                        y: 1138
                    },
                    {
                        x: 1132,
                        y: 860
                    },
                    {
                        x: 1133,
                        y: 4997
                    },
                    {
                        x: 1134,
                        y: 4970
                    },
                    {
                        x: 1135,
                        y: 3298
                    },
                    {
                        x: 1136,
                        y: 1470
                    },
                    {
                        x: 1137,
                        y: 112
                    },
                    {
                        x: 1138,
                        y: 3027
                    },
                    {
                        x: 1139,
                        y: 3738
                    },
                    {
                        x: 1140,
                        y: 3016
                    },
                    {
                        x: 1141,
                        y: 2822
                    },
                    {
                        x: 1142,
                        y: 559
                    },
                    {
                        x: 1143,
                        y: 4306
                    },
                    {
                        x: 1144,
                        y: 2717
                    },
                    {
                        x: 1145,
                        y: 3437
                    },
                    {
                        x: 1146,
                        y: 397
                    },
                    {
                        x: 1147,
                        y: 4193
                    },
                    {
                        x: 1148,
                        y: 3801
                    },
                    {
                        x: 1149,
                        y: 2215
                    },
                    {
                        x: 1150,
                        y: 1438
                    },
                    {
                        x: 1151,
                        y: 592
                    },
                    {
                        x: 1152,
                        y: 865
                    },
                    {
                        x: 1153,
                        y: 4606
                    },
                    {
                        x: 1154,
                        y: 4616
                    },
                    {
                        x: 1155,
                        y: 4940
                    },
                    {
                        x: 1156,
                        y: 4580
                    },
                    {
                        x: 1157,
                        y: 1433
                    },
                    {
                        x: 1158,
                        y: 4159
                    },
                    {
                        x: 1159,
                        y: 2121
                    },
                    {
                        x: 1160,
                        y: 4791
                    },
                    {
                        x: 1161,
                        y: 2910
                    },
                    {
                        x: 1162,
                        y: 1880
                    },
                    {
                        x: 1163,
                        y: 3850
                    },
                    {
                        x: 1164,
                        y: 2968
                    },
                    {
                        x: 1165,
                        y: 2915
                    },
                    {
                        x: 1166,
                        y: 22
                    },
                    {
                        x: 1167,
                        y: 1749
                    },
                    {
                        x: 1168,
                        y: 1684
                    },
                    {
                        x: 1169,
                        y: 2060
                    },
                    {
                        x: 1170,
                        y: 3349
                    },
                    {
                        x: 1171,
                        y: 1124
                    },
                    {
                        x: 1172,
                        y: 3162
                    },
                    {
                        x: 1173,
                        y: 4590
                    },
                    {
                        x: 1174,
                        y: 1782
                    },
                    {
                        x: 1175,
                        y: 1044
                    },
                    {
                        x: 1176,
                        y: 927
                    },
                    {
                        x: 1177,
                        y: 2310
                    },
                    {
                        x: 1178,
                        y: 467
                    },
                    {
                        x: 1179,
                        y: 409
                    },
                    {
                        x: 1180,
                        y: 4442
                    },
                    {
                        x: 1181,
                        y: 4356
                    },
                    {
                        x: 1182,
                        y: 1259
                    },
                    {
                        x: 1183,
                        y: 2984
                    },
                    {
                        x: 1184,
                        y: 134
                    },
                    {
                        x: 1185,
                        y: 3772
                    },
                    {
                        x: 1186,
                        y: 3769
                    },
                    {
                        x: 1187,
                        y: 1958
                    },
                    {
                        x: 1188,
                        y: 2196
                    },
                    {
                        x: 1189,
                        y: 3702
                    },
                    {
                        x: 1190,
                        y: 3034
                    },
                    {
                        x: 1191,
                        y: 1702
                    },
                    {
                        x: 1192,
                        y: 999
                    },
                    {
                        x: 1193,
                        y: 4698
                    },
                    {
                        x: 1194,
                        y: 2437
                    },
                    {
                        x: 1195,
                        y: 1397
                    },
                    {
                        x: 1196,
                        y: 3401
                    },
                    {
                        x: 1197,
                        y: 2699
                    },
                    {
                        x: 1198,
                        y: 3819
                    },
                    {
                        x: 1199,
                        y: 3670
                    },
                    {
                        x: 1200,
                        y: 2863
                    },
                    {
                        x: 1201,
                        y: 4014
                    },
                    {
                        x: 1202,
                        y: 4418
                    },
                    {
                        x: 1203,
                        y: 2768
                    },
                    {
                        x: 1204,
                        y: 2172
                    },
                    {
                        x: 1205,
                        y: 4461
                    },
                    {
                        x: 1206,
                        y: 3760
                    },
                    {
                        x: 1207,
                        y: 2558
                    },
                    {
                        x: 1208,
                        y: 1469
                    },
                    {
                        x: 1209,
                        y: 881
                    },
                    {
                        x: 1210,
                        y: 1706
                    },
                    {
                        x: 1211,
                        y: 3049
                    },
                    {
                        x: 1212,
                        y: 884
                    },
                    {
                        x: 1213,
                        y: 3845
                    },
                    {
                        x: 1214,
                        y: 4388
                    },
                    {
                        x: 1215,
                        y: 4566
                    },
                    {
                        x: 1216,
                        y: 2748
                    },
                    {
                        x: 1217,
                        y: 2241
                    },
                    {
                        x: 1218,
                        y: 3577
                    },
                    {
                        x: 1219,
                        y: 955
                    },
                    {
                        x: 1220,
                        y: 1948
                    },
                    {
                        x: 1221,
                        y: 4938
                    },
                    {
                        x: 1222,
                        y: 3721
                    },
                    {
                        x: 1223,
                        y: 1677
                    },
                    {
                        x: 1224,
                        y: 2069
                    },
                    {
                        x: 1225,
                        y: 4469
                    },
                    {
                        x: 1226,
                        y: 3001
                    },
                    {
                        x: 1227,
                        y: 4058
                    },
                    {
                        x: 1228,
                        y: 4764
                    },
                    {
                        x: 1229,
                        y: 4413
                    },
                    {
                        x: 1230,
                        y: 3061
                    },
                    {
                        x: 1231,
                        y: 4816
                    },
                    {
                        x: 1232,
                        y: 3237
                    },
                    {
                        x: 1233,
                        y: 1805
                    },
                    {
                        x: 1234,
                        y: 2740
                    },
                    {
                        x: 1235,
                        y: 2227
                    },
                    {
                        x: 1236,
                        y: 3953
                    },
                    {
                        x: 1237,
                        y: 2369
                    },
                    {
                        x: 1238,
                        y: 1115
                    },
                    {
                        x: 1239,
                        y: 634
                    },
                    {
                        x: 1240,
                        y: 4034
                    },
                    {
                        x: 1241,
                        y: 3904
                    },
                    {
                        x: 1242,
                        y: 4078
                    },
                    {
                        x: 1243,
                        y: 1506
                    },
                    {
                        x: 1244,
                        y: 4483
                    },
                    {
                        x: 1245,
                        y: 383
                    },
                    {
                        x: 1246,
                        y: 9
                    },
                    {
                        x: 1247,
                        y: 3464
                    },
                    {
                        x: 1248,
                        y: 1202
                    },
                    {
                        x: 1249,
                        y: 67
                    },
                    {
                        x: 1250,
                        y: 416
                    },
                    {
                        x: 1251,
                        y: 1129
                    },
                    {
                        x: 1252,
                        y: 1519
                    },
                    {
                        x: 1253,
                        y: 968
                    },
                    {
                        x: 1254,
                        y: 1083
                    },
                    {
                        x: 1255,
                        y: 329
                    },
                    {
                        x: 1256,
                        y: 1583
                    },
                    {
                        x: 1257,
                        y: 909
                    },
                    {
                        x: 1258,
                        y: 1545
                    },
                    {
                        x: 1259,
                        y: 3208
                    },
                    {
                        x: 1260,
                        y: 3140
                    },
                    {
                        x: 1261,
                        y: 3715
                    },
                    {
                        x: 1262,
                        y: 2108
                    },
                    {
                        x: 1263,
                        y: 4497
                    },
                    {
                        x: 1264,
                        y: 4502
                    },
                    {
                        x: 1265,
                        y: 1089
                    },
                    {
                        x: 1266,
                        y: 4499
                    },
                    {
                        x: 1267,
                        y: 720
                    },
                    {
                        x: 1268,
                        y: 1057
                    },
                    {
                        x: 1269,
                        y: 2920
                    },
                    {
                        x: 1270,
                        y: 184
                    },
                    {
                        x: 1271,
                        y: 2595
                    },
                    {
                        x: 1272,
                        y: 1602
                    },
                    {
                        x: 1273,
                        y: 61
                    },
                    {
                        x: 1274,
                        y: 2961
                    },
                    {
                        x: 1275,
                        y: 192
                    },
                    {
                        x: 1276,
                        y: 2134
                    },
                    {
                        x: 1277,
                        y: 3669
                    },
                    {
                        x: 1278,
                        y: 1783
                    },
                    {
                        x: 1279,
                        y: 808
                    },
                    {
                        x: 1280,
                        y: 3747
                    },
                    {
                        x: 1281,
                        y: 1657
                    },
                    {
                        x: 1282,
                        y: 1046
                    },
                    {
                        x: 1283,
                        y: 290
                    },
                    {
                        x: 1284,
                        y: 3107
                    },
                    {
                        x: 1285,
                        y: 1457
                    },
                    {
                        x: 1286,
                        y: 1408
                    },
                    {
                        x: 1287,
                        y: 4144
                    },
                    {
                        x: 1288,
                        y: 275
                    },
                    {
                        x: 1289,
                        y: 2953
                    },
                    {
                        x: 1290,
                        y: 2952
                    },
                    {
                        x: 1291,
                        y: 443
                    },
                    {
                        x: 1292,
                        y: 3277
                    },
                    {
                        x: 1293,
                        y: 3424
                    },
                    {
                        x: 1294,
                        y: 2671
                    },
                    {
                        x: 1295,
                        y: 1676
                    },
                    {
                        x: 1296,
                        y: 2763
                    },
                    {
                        x: 1297,
                        y: 2526
                    },
                    {
                        x: 1298,
                        y: 1316
                    },
                    {
                        x: 1299,
                        y: 3857
                    },
                    {
                        x: 1300,
                        y: 4758
                    },
                    {
                        x: 1301,
                        y: 1056
                    },
                    {
                        x: 1302,
                        y: 586
                    },
                    {
                        x: 1303,
                        y: 2939
                    },
                    {
                        x: 1304,
                        y: 3832
                    },
                    {
                        x: 1305,
                        y: 3837
                    },
                    {
                        x: 1306,
                        y: 1226
                    },
                    {
                        x: 1307,
                        y: 843
                    },
                    {
                        x: 1308,
                        y: 1444
                    },
                    {
                        x: 1309,
                        y: 2661
                    },
                    {
                        x: 1310,
                        y: 2385
                    },
                    {
                        x: 1311,
                        y: 1771
                    },
                    {
                        x: 1312,
                        y: 2282
                    },
                    {
                        x: 1313,
                        y: 51
                    },
                    {
                        x: 1314,
                        y: 2575
                    },
                    {
                        x: 1315,
                        y: 765
                    },
                    {
                        x: 1316,
                        y: 2388
                    },
                    {
                        x: 1317,
                        y: 2358
                    },
                    {
                        x: 1318,
                        y: 4309
                    },
                    {
                        x: 1319,
                        y: 105
                    },
                    {
                        x: 1320,
                        y: 285
                    },
                    {
                        x: 1321,
                        y: 4297
                    },
                    {
                        x: 1322,
                        y: 3048
                    },
                    {
                        x: 1323,
                        y: 4255
                    },
                    {
                        x: 1324,
                        y: 1806
                    },
                    {
                        x: 1325,
                        y: 188
                    },
                    {
                        x: 1326,
                        y: 3741
                    },
                    {
                        x: 1327,
                        y: 4158
                    },
                    {
                        x: 1328,
                        y: 4897
                    },
                    {
                        x: 1329,
                        y: 901
                    },
                    {
                        x: 1330,
                        y: 1691
                    },
                    {
                        x: 1331,
                        y: 761
                    },
                    {
                        x: 1332,
                        y: 4409
                    },
                    {
                        x: 1333,
                        y: 3941
                    },
                    {
                        x: 1334,
                        y: 2940
                    },
                    {
                        x: 1335,
                        y: 4221
                    },
                    {
                        x: 1336,
                        y: 2693
                    },
                    {
                        x: 1337,
                        y: 3216
                    },
                    {
                        x: 1338,
                        y: 4506
                    },
                    {
                        x: 1339,
                        y: 529
                    },
                    {
                        x: 1340,
                        y: 4868
                    },
                    {
                        x: 1341,
                        y: 3546
                    },
                    {
                        x: 1342,
                        y: 223
                    },
                    {
                        x: 1343,
                        y: 2990
                    },
                    {
                        x: 1344,
                        y: 4252
                    },
                    {
                        x: 1345,
                        y: 3090
                    },
                    {
                        x: 1346,
                        y: 534
                    },
                    {
                        x: 1347,
                        y: 3945
                    },
                    {
                        x: 1348,
                        y: 4135
                    },
                    {
                        x: 1349,
                        y: 1665
                    },
                    {
                        x: 1350,
                        y: 3740
                    },
                    {
                        x: 1351,
                        y: 2625
                    },
                    {
                        x: 1352,
                        y: 2077
                    },
                    {
                        x: 1353,
                        y: 3337
                    },
                    {
                        x: 1354,
                        y: 3263
                    },
                    {
                        x: 1355,
                        y: 4597
                    },
                    {
                        x: 1356,
                        y: 3181
                    },
                    {
                        x: 1357,
                        y: 1187
                    },
                    {
                        x: 1358,
                        y: 1510
                    },
                    {
                        x: 1359,
                        y: 3419
                    },
                    {
                        x: 1360,
                        y: 2617
                    },
                    {
                        x: 1361,
                        y: 4929
                    },
                    {
                        x: 1362,
                        y: 3495
                    },
                    {
                        x: 1363,
                        y: 1733
                    },
                    {
                        x: 1364,
                        y: 4463
                    },
                    {
                        x: 1365,
                        y: 4425
                    },
                    {
                        x: 1366,
                        y: 2685
                    },
                    {
                        x: 1367,
                        y: 2203
                    },
                    {
                        x: 1368,
                        y: 438
                    },
                    {
                        x: 1369,
                        y: 1954
                    },
                    {
                        x: 1370,
                        y: 304
                    },
                    {
                        x: 1371,
                        y: 2001
                    },
                    {
                        x: 1372,
                        y: 4254
                    },
                    {
                        x: 1373,
                        y: 4999
                    },
                    {
                        x: 1374,
                        y: 617
                    },
                    {
                        x: 1375,
                        y: 428
                    },
                    {
                        x: 1376,
                        y: 4232
                    },
                    {
                        x: 1377,
                        y: 3492
                    },
                    {
                        x: 1378,
                        y: 4539
                    },
                    {
                        x: 1379,
                        y: 4548
                    },
                    {
                        x: 1380,
                        y: 1807
                    },
                    {
                        x: 1381,
                        y: 254
                    },
                    {
                        x: 1382,
                        y: 1052
                    },
                    {
                        x: 1383,
                        y: 190
                    },
                    {
                        x: 1384,
                        y: 1580
                    },
                    {
                        x: 1385,
                        y: 4772
                    },
                    {
                        x: 1386,
                        y: 577
                    },
                    {
                        x: 1387,
                        y: 1512
                    },
                    {
                        x: 1388,
                        y: 1773
                    },
                    {
                        x: 1389,
                        y: 2604
                    },
                    {
                        x: 1390,
                        y: 2813
                    },
                    {
                        x: 1391,
                        y: 3575
                    },
                    {
                        x: 1392,
                        y: 3659
                    },
                    {
                        x: 1393,
                        y: 2243
                    },
                    {
                        x: 1394,
                        y: 2014
                    },
                    {
                        x: 1395,
                        y: 1082
                    },
                    {
                        x: 1396,
                        y: 1990
                    },
                    {
                        x: 1397,
                        y: 3981
                    },
                    {
                        x: 1398,
                        y: 5000
                    },
                    {
                        x: 1399,
                        y: 2529
                    },
                    {
                        x: 1400,
                        y: 4533
                    },
                    {
                        x: 1401,
                        y: 4565
                    },
                    {
                        x: 1402,
                        y: 3711
                    },
                    {
                        x: 1403,
                        y: 2810
                    },
                    {
                        x: 1404,
                        y: 1504
                    },
                    {
                        x: 1405,
                        y: 2057
                    },
                    {
                        x: 1406,
                        y: 786
                    },
                    {
                        x: 1407,
                        y: 4242
                    },
                    {
                        x: 1408,
                        y: 3168
                    },
                    {
                        x: 1409,
                        y: 834
                    },
                    {
                        x: 1410,
                        y: 1908
                    },
                    {
                        x: 1411,
                        y: 4955
                    },
                    {
                        x: 1412,
                        y: 2804
                    },
                    {
                        x: 1413,
                        y: 3957
                    },
                    {
                        x: 1414,
                        y: 3526
                    },
                    {
                        x: 1415,
                        y: 2776
                    },
                    {
                        x: 1416,
                        y: 3069
                    },
                    {
                        x: 1417,
                        y: 3247
                    },
                    {
                        x: 1418,
                        y: 1889
                    },
                    {
                        x: 1419,
                        y: 4386
                    },
                    {
                        x: 1420,
                        y: 1540
                    },
                    {
                        x: 1421,
                        y: 2233
                    },
                    {
                        x: 1422,
                        y: 1339
                    },
                    {
                        x: 1423,
                        y: 3193
                    },
                    {
                        x: 1424,
                        y: 2911
                    },
                    {
                        x: 1425,
                        y: 420
                    },
                    {
                        x: 1426,
                        y: 4373
                    },
                    {
                        x: 1427,
                        y: 1042
                    },
                    {
                        x: 1428,
                        y: 2593
                    },
                    {
                        x: 1429,
                        y: 2726
                    },
                    {
                        x: 1430,
                        y: 503
                    },
                    {
                        x: 1431,
                        y: 3619
                    },
                    {
                        x: 1432,
                        y: 483
                    },
                    {
                        x: 1433,
                        y: 705
                    },
                    {
                        x: 1434,
                        y: 2683
                    },
                    {
                        x: 1435,
                        y: 2692
                    },
                    {
                        x: 1436,
                        y: 1336
                    },
                    {
                        x: 1437,
                        y: 1711
                    },
                    {
                        x: 1438,
                        y: 1964
                    },
                    {
                        x: 1439,
                        y: 3244
                    },
                    {
                        x: 1440,
                        y: 2923
                    },
                    {
                        x: 1441,
                        y: 3433
                    },
                    {
                        x: 1442,
                        y: 2896
                    },
                    {
                        x: 1443,
                        y: 106
                    },
                    {
                        x: 1444,
                        y: 2513
                    },
                    {
                        x: 1445,
                        y: 3731
                    },
                    {
                        x: 1446,
                        y: 297
                    },
                    {
                        x: 1447,
                        y: 4130
                    },
                    {
                        x: 1448,
                        y: 324
                    },
                    {
                        x: 1449,
                        y: 2993
                    },
                    {
                        x: 1450,
                        y: 1325
                    },
                    {
                        x: 1451,
                        y: 4116
                    },
                    {
                        x: 1452,
                        y: 3641
                    },
                    {
                        x: 1453,
                        y: 4137
                    },
                    {
                        x: 1454,
                        y: 1895
                    },
                    {
                        x: 1455,
                        y: 4641
                    },
                    {
                        x: 1456,
                        y: 648
                    },
                    {
                        x: 1457,
                        y: 1403
                    },
                    {
                        x: 1458,
                        y: 4353
                    },
                    {
                        x: 1459,
                        y: 2585
                    },
                    {
                        x: 1460,
                        y: 4321
                    },
                    {
                        x: 1461,
                        y: 4968
                    },
                    {
                        x: 1462,
                        y: 4814
                    },
                    {
                        x: 1463,
                        y: 3380
                    },
                    {
                        x: 1464,
                        y: 2204
                    },
                    {
                        x: 1465,
                        y: 976
                    },
                    {
                        x: 1466,
                        y: 545
                    },
                    {
                        x: 1467,
                        y: 4015
                    },
                    {
                        x: 1468,
                        y: 1135
                    },
                    {
                        x: 1469,
                        y: 3264
                    },
                    {
                        x: 1470,
                        y: 4108
                    },
                    {
                        x: 1471,
                        y: 1554
                    },
                    {
                        x: 1472,
                        y: 3480
                    },
                    {
                        x: 1473,
                        y: 4000
                    },
                    {
                        x: 1474,
                        y: 3436
                    },
                    {
                        x: 1475,
                        y: 3754
                    },
                    {
                        x: 1476,
                        y: 3372
                    },
                    {
                        x: 1477,
                        y: 452
                    },
                    {
                        x: 1478,
                        y: 3106
                    },
                    {
                        x: 1479,
                        y: 681
                    },
                    {
                        x: 1480,
                        y: 921
                    },
                    {
                        x: 1481,
                        y: 4776
                    },
                    {
                        x: 1482,
                        y: 3438
                    },
                    {
                        x: 1483,
                        y: 3627
                    },
                    {
                        x: 1484,
                        y: 3064
                    },
                    {
                        x: 1485,
                        y: 1830
                    },
                    {
                        x: 1486,
                        y: 1595
                    },
                    {
                        x: 1487,
                        y: 135
                    },
                    {
                        x: 1488,
                        y: 82
                    },
                    {
                        x: 1489,
                        y: 4503
                    },
                    {
                        x: 1490,
                        y: 2965
                    },
                    {
                        x: 1491,
                        y: 1841
                    },
                    {
                        x: 1492,
                        y: 4995
                    },
                    {
                        x: 1493,
                        y: 3638
                    },
                    {
                        x: 1494,
                        y: 1081
                    },
                    {
                        x: 1495,
                        y: 3933
                    },
                    {
                        x: 1496,
                        y: 4346
                    },
                    {
                        x: 1497,
                        y: 3934
                    },
                    {
                        x: 1498,
                        y: 2636
                    },
                    {
                        x: 1499,
                        y: 4750
                    },
                    {
                        x: 1500,
                        y: 55
                    },
                    {
                        x: 1501,
                        y: 2084
                    },
                    {
                        x: 1502,
                        y: 3844
                    },
                    {
                        x: 1503,
                        y: 1494
                    },
                    {
                        x: 1504,
                        y: 4745
                    },
                    {
                        x: 1505,
                        y: 512
                    },
                    {
                        x: 1506,
                        y: 2773
                    },
                    {
                        x: 1507,
                        y: 3423
                    },
                    {
                        x: 1508,
                        y: 3471
                    },
                    {
                        x: 1509,
                        y: 4215
                    },
                    {
                        x: 1510,
                        y: 3591
                    },
                    {
                        x: 1511,
                        y: 4451
                    },
                    {
                        x: 1512,
                        y: 435
                    },
                    {
                        x: 1513,
                        y: 3498
                    },
                    {
                        x: 1514,
                        y: 2330
                    },
                    {
                        x: 1515,
                        y: 1536
                    },
                    {
                        x: 1516,
                        y: 1658
                    },
                    {
                        x: 1517,
                        y: 442
                    },
                    {
                        x: 1518,
                        y: 284
                    },
                    {
                        x: 1519,
                        y: 408
                    },
                    {
                        x: 1520,
                        y: 2539
                    },
                    {
                        x: 1521,
                        y: 1096
                    },
                    {
                        x: 1522,
                        y: 1819
                    },
                    {
                        x: 1523,
                        y: 3672
                    },
                    {
                        x: 1524,
                        y: 2569
                    },
                    {
                        x: 1525,
                        y: 1245
                    },
                    {
                        x: 1526,
                        y: 980
                    },
                    {
                        x: 1527,
                        y: 1931
                    },
                    {
                        x: 1528,
                        y: 1501
                    },
                    {
                        x: 1529,
                        y: 784
                    },
                    {
                        x: 1530,
                        y: 1018
                    },
                    {
                        x: 1531,
                        y: 4678
                    },
                    {
                        x: 1532,
                        y: 603
                    },
                    {
                        x: 1533,
                        y: 2568
                    },
                    {
                        x: 1534,
                        y: 3443
                    },
                    {
                        x: 1535,
                        y: 3722
                    },
                    {
                        x: 1536,
                        y: 1276
                    },
                    {
                        x: 1537,
                        y: 1225
                    },
                    {
                        x: 1538,
                        y: 1475
                    },
                    {
                        x: 1539,
                        y: 175
                    },
                    {
                        x: 1540,
                        y: 450
                    },
                    {
                        x: 1541,
                        y: 1628
                    },
                    {
                        x: 1542,
                        y: 1462
                    },
                    {
                        x: 1543,
                        y: 1528
                    },
                    {
                        x: 1544,
                        y: 1975
                    },
                    {
                        x: 1545,
                        y: 3691
                    },
                    {
                        x: 1546,
                        y: 3778
                    },
                    {
                        x: 1547,
                        y: 1582
                    },
                    {
                        x: 1548,
                        y: 689
                    },
                    {
                        x: 1549,
                        y: 2012
                    },
                    {
                        x: 1550,
                        y: 4415
                    },
                    {
                        x: 1551,
                        y: 2110
                    },
                    {
                        x: 1552,
                        y: 2719
                    },
                    {
                        x: 1553,
                        y: 4712
                    },
                    {
                        x: 1554,
                        y: 3155
                    },
                    {
                        x: 1555,
                        y: 537
                    },
                    {
                        x: 1556,
                        y: 829
                    },
                    {
                        x: 1557,
                        y: 3993
                    },
                    {
                        x: 1558,
                        y: 1961
                    },
                    {
                        x: 1559,
                        y: 2668
                    },
                    {
                        x: 1560,
                        y: 1123
                    },
                    {
                        x: 1561,
                        y: 4717
                    },
                    {
                        x: 1562,
                        y: 4038
                    },
                    {
                        x: 1563,
                        y: 3810
                    },
                    {
                        x: 1564,
                        y: 83
                    },
                    {
                        x: 1565,
                        y: 4176
                    },
                    {
                        x: 1566,
                        y: 1638
                    },
                    {
                        x: 1567,
                        y: 815
                    },
                    {
                        x: 1568,
                        y: 2866
                    },
                    {
                        x: 1569,
                        y: 43
                    },
                    {
                        x: 1570,
                        y: 548
                    },
                    {
                        x: 1571,
                        y: 598
                    },
                    {
                        x: 1572,
                        y: 1059
                    },
                    {
                        x: 1573,
                        y: 1784
                    },
                    {
                        x: 1574,
                        y: 3102
                    },
                    {
                        x: 1575,
                        y: 4834
                    },
                    {
                        x: 1576,
                        y: 392
                    },
                    {
                        x: 1577,
                        y: 873
                    },
                    {
                        x: 1578,
                        y: 250
                    },
                    {
                        x: 1579,
                        y: 1838
                    },
                    {
                        x: 1580,
                        y: 2985
                    },
                    {
                        x: 1581,
                        y: 3811
                    },
                    {
                        x: 1582,
                        y: 488
                    },
                    {
                        x: 1583,
                        y: 3350
                    },
                    {
                        x: 1584,
                        y: 487
                    },
                    {
                        x: 1585,
                        y: 4790
                    },
                    {
                        x: 1586,
                        y: 70
                    },
                    {
                        x: 1587,
                        y: 4667
                    },
                    {
                        x: 1588,
                        y: 618
                    },
                    {
                        x: 1589,
                        y: 2972
                    },
                    {
                        x: 1590,
                        y: 1791
                    },
                    {
                        x: 1591,
                        y: 642
                    },
                    {
                        x: 1592,
                        y: 432
                    },
                    {
                        x: 1593,
                        y: 3245
                    },
                    {
                        x: 1594,
                        y: 357
                    },
                    {
                        x: 1595,
                        y: 1999
                    },
                    {
                        x: 1596,
                        y: 4449
                    },
                    {
                        x: 1597,
                        y: 518
                    },
                    {
                        x: 1598,
                        y: 2157
                    },
                    {
                        x: 1599,
                        y: 4351
                    },
                    {
                        x: 1600,
                        y: 4062
                    },
                    {
                        x: 1601,
                        y: 4895
                    },
                    {
                        x: 1602,
                        y: 3470
                    },
                    {
                        x: 1603,
                        y: 181
                    },
                    {
                        x: 1604,
                        y: 1743
                    },
                    {
                        x: 1605,
                        y: 2027
                    },
                    {
                        x: 1606,
                        y: 1272
                    },
                    {
                        x: 1607,
                        y: 2261
                    },
                    {
                        x: 1608,
                        y: 2070
                    },
                    {
                        x: 1609,
                        y: 2087
                    },
                    {
                        x: 1610,
                        y: 793
                    },
                    {
                        x: 1611,
                        y: 1358
                    },
                    {
                        x: 1612,
                        y: 2366
                    },
                    {
                        x: 1613,
                        y: 1710
                    },
                    {
                        x: 1614,
                        y: 4345
                    },
                    {
                        x: 1615,
                        y: 4125
                    },
                    {
                        x: 1616,
                        y: 2934
                    },
                    {
                        x: 1617,
                        y: 4903
                    },
                    {
                        x: 1618,
                        y: 4211
                    },
                    {
                        x: 1619,
                        y: 922
                    },
                    {
                        x: 1620,
                        y: 2221
                    },
                    {
                        x: 1621,
                        y: 3616
                    },
                    {
                        x: 1622,
                        y: 3073
                    },
                    {
                        x: 1623,
                        y: 3736
                    },
                    {
                        x: 1624,
                        y: 675
                    },
                    {
                        x: 1625,
                        y: 717
                    },
                    {
                        x: 1626,
                        y: 3657
                    },
                    {
                        x: 1627,
                        y: 4184
                    },
                    {
                        x: 1628,
                        y: 4337
                    },
                    {
                        x: 1629,
                        y: 4536
                    },
                    {
                        x: 1630,
                        y: 4112
                    },
                    {
                        x: 1631,
                        y: 641
                    },
                    {
                        x: 1632,
                        y: 3170
                    },
                    {
                        x: 1633,
                        y: 30
                    },
                    {
                        x: 1634,
                        y: 1593
                    },
                    {
                        x: 1635,
                        y: 2479
                    },
                    {
                        x: 1636,
                        y: 1629
                    },
                    {
                        x: 1637,
                        y: 94
                    },
                    {
                        x: 1638,
                        y: 3571
                    },
                    {
                        x: 1639,
                        y: 2842
                    },
                    {
                        x: 1640,
                        y: 4267
                    },
                    {
                        x: 1641,
                        y: 1604
                    },
                    {
                        x: 1642,
                        y: 278
                    },
                    {
                        x: 1643,
                        y: 2039
                    },
                    {
                        x: 1644,
                        y: 379
                    },
                    {
                        x: 1645,
                        y: 709
                    },
                    {
                        x: 1646,
                        y: 2603
                    },
                    {
                        x: 1647,
                        y: 505
                    },
                    {
                        x: 1648,
                        y: 4878
                    },
                    {
                        x: 1649,
                        y: 3019
                    },
                    {
                        x: 1650,
                        y: 3151
                    },
                    {
                        x: 1651,
                        y: 2426
                    },
                    {
                        x: 1652,
                        y: 3631
                    },
                    {
                        x: 1653,
                        y: 311
                    },
                    {
                        x: 1654,
                        y: 2427
                    },
                    {
                        x: 1655,
                        y: 4458
                    },
                    {
                        x: 1656,
                        y: 2880
                    },
                    {
                        x: 1657,
                        y: 2611
                    },
                    {
                        x: 1658,
                        y: 3205
                    },
                    {
                        x: 1659,
                        y: 1876
                    },
                    {
                        x: 1660,
                        y: 736
                    },
                    {
                        x: 1661,
                        y: 1827
                    },
                    {
                        x: 1662,
                        y: 1104
                    },
                    {
                        x: 1663,
                        y: 3273
                    },
                    {
                        x: 1664,
                        y: 2869
                    },
                    {
                        x: 1665,
                        y: 2805
                    },
                    {
                        x: 1666,
                        y: 245
                    },
                    {
                        x: 1667,
                        y: 4784
                    },
                    {
                        x: 1668,
                        y: 97
                    },
                    {
                        x: 1669,
                        y: 1346
                    },
                    {
                        x: 1670,
                        y: 3851
                    },
                    {
                        x: 1671,
                        y: 1751
                    },
                    {
                        x: 1672,
                        y: 376
                    },
                    {
                        x: 1673,
                        y: 2490
                    },
                    {
                        x: 1674,
                        y: 1246
                    },
                    {
                        x: 1675,
                        y: 1198
                    },
                    {
                        x: 1676,
                        y: 521
                    },
                    {
                        x: 1677,
                        y: 80
                    },
                    {
                        x: 1678,
                        y: 426
                    },
                    {
                        x: 1679,
                        y: 2577
                    },
                    {
                        x: 1680,
                        y: 1432
                    },
                    {
                        x: 1681,
                        y: 4682
                    },
                    {
                        x: 1682,
                        y: 3382
                    },
                    {
                        x: 1683,
                        y: 453
                    },
                    {
                        x: 1684,
                        y: 4028
                    },
                    {
                        x: 1685,
                        y: 1968
                    },
                    {
                        x: 1686,
                        y: 3172
                    },
                    {
                        x: 1687,
                        y: 418
                    },
                    {
                        x: 1688,
                        y: 2628
                    },
                    {
                        x: 1689,
                        y: 4675
                    },
                    {
                        x: 1690,
                        y: 2201
                    },
                    {
                        x: 1691,
                        y: 3270
                    },
                    {
                        x: 1692,
                        y: 3707
                    },
                    {
                        x: 1693,
                        y: 4075
                    },
                    {
                        x: 1694,
                        y: 218
                    },
                    {
                        x: 1695,
                        y: 2083
                    },
                    {
                        x: 1696,
                        y: 2484
                    },
                    {
                        x: 1697,
                        y: 758
                    },
                    {
                        x: 1698,
                        y: 1098
                    },
                    {
                        x: 1699,
                        y: 1311
                    },
                    {
                        x: 1700,
                        y: 3766
                    },
                    {
                        x: 1701,
                        y: 3219
                    },
                    {
                        x: 1702,
                        y: 4582
                    },
                    {
                        x: 1703,
                        y: 3011
                    },
                    {
                        x: 1704,
                        y: 3999
                    },
                    {
                        x: 1705,
                        y: 1517
                    },
                    {
                        x: 1706,
                        y: 2706
                    },
                    {
                        x: 1707,
                        y: 47
                    },
                    {
                        x: 1708,
                        y: 2755
                    },
                    {
                        x: 1709,
                        y: 2123
                    },
                    {
                        x: 1710,
                        y: 554
                    },
                    {
                        x: 1711,
                        y: 14
                    },
                    {
                        x: 1712,
                        y: 4051
                    },
                    {
                        x: 1713,
                        y: 2941
                    },
                    {
                        x: 1714,
                        y: 2382
                    },
                    {
                        x: 1715,
                        y: 3727
                    },
                    {
                        x: 1716,
                        y: 3174
                    },
                    {
                        x: 1717,
                        y: 3111
                    },
                    {
                        x: 1718,
                        y: 1577
                    },
                    {
                        x: 1719,
                        y: 1824
                    },
                    {
                        x: 1720,
                        y: 1897
                    },
                    {
                        x: 1721,
                        y: 1520
                    },
                    {
                        x: 1722,
                        y: 935
                    },
                    {
                        x: 1723,
                        y: 492
                    },
                    {
                        x: 1724,
                        y: 2431
                    },
                    {
                        x: 1725,
                        y: 850
                    },
                    {
                        x: 1726,
                        y: 4594
                    },
                    {
                        x: 1727,
                        y: 3485
                    },
                    {
                        x: 1728,
                        y: 2659
                    },
                    {
                        x: 1729,
                        y: 3514
                    },
                    {
                        x: 1730,
                        y: 3762
                    },
                    {
                        x: 1731,
                        y: 4635
                    },
                    {
                        x: 1732,
                        y: 4479
                    },
                    {
                        x: 1733,
                        y: 4233
                    },
                    {
                        x: 1734,
                        y: 3060
                    },
                    {
                        x: 1735,
                        y: 2890
                    },
                    {
                        x: 1736,
                        y: 4773
                    },
                    {
                        x: 1737,
                        y: 2483
                    },
                    {
                        x: 1738,
                        y: 1566
                    },
                    {
                        x: 1739,
                        y: 3508
                    },
                    {
                        x: 1740,
                        y: 17
                    },
                    {
                        x: 1741,
                        y: 4312
                    },
                    {
                        x: 1742,
                        y: 4404
                    },
                    {
                        x: 1743,
                        y: 4376
                    },
                    {
                        x: 1744,
                        y: 4630
                    },
                    {
                        x: 1745,
                        y: 4815
                    },
                    {
                        x: 1746,
                        y: 465
                    },
                    {
                        x: 1747,
                        y: 49
                    },
                    {
                        x: 1748,
                        y: 4143
                    },
                    {
                        x: 1749,
                        y: 2594
                    },
                    {
                        x: 1750,
                        y: 4990
                    },
                    {
                        x: 1751,
                        y: 3688
                    },
                    {
                        x: 1752,
                        y: 4001
                    },
                    {
                        x: 1753,
                        y: 2148
                    },
                    {
                        x: 1754,
                        y: 3133
                    },
                    {
                        x: 1755,
                        y: 639
                    },
                    {
                        x: 1756,
                        y: 2975
                    },
                    {
                        x: 1757,
                        y: 2275
                    },
                    {
                        x: 1758,
                        y: 433
                    },
                    {
                        x: 1759,
                        y: 3062
                    },
                    {
                        x: 1760,
                        y: 4439
                    },
                    {
                        x: 1761,
                        y: 2192
                    },
                    {
                        x: 1762,
                        y: 3398
                    },
                    {
                        x: 1763,
                        y: 346
                    },
                    {
                        x: 1764,
                        y: 1468
                    },
                    {
                        x: 1765,
                        y: 169
                    },
                    {
                        x: 1766,
                        y: 325
                    },
                    {
                        x: 1767,
                        y: 4292
                    },
                    {
                        x: 1768,
                        y: 3418
                    },
                    {
                        x: 1769,
                        y: 3717
                    },
                    {
                        x: 1770,
                        y: 3863
                    },
                    {
                        x: 1771,
                        y: 4785
                    },
                    {
                        x: 1772,
                        y: 295
                    },
                    {
                        x: 1773,
                        y: 3646
                    },
                    {
                        x: 1774,
                        y: 4956
                    },
                    {
                        x: 1775,
                        y: 1250
                    },
                    {
                        x: 1776,
                        y: 2363
                    },
                    {
                        x: 1777,
                        y: 2999
                    },
                    {
                        x: 1778,
                        y: 3744
                    },
                    {
                        x: 1779,
                        y: 2409
                    },
                    {
                        x: 1780,
                        y: 77
                    },
                    {
                        x: 1781,
                        y: 902
                    },
                    {
                        x: 1782,
                        y: 455
                    },
                    {
                        x: 1783,
                        y: 3371
                    },
                    {
                        x: 1784,
                        y: 431
                    },
                    {
                        x: 1785,
                        y: 2029
                    },
                    {
                        x: 1786,
                        y: 3029
                    },
                    {
                        x: 1787,
                        y: 2524
                    },
                    {
                        x: 1788,
                        y: 1739
                    },
                    {
                        x: 1789,
                        y: 3730
                    },
                    {
                        x: 1790,
                        y: 3129
                    },
                    {
                        x: 1791,
                        y: 3557
                    },
                    {
                        x: 1792,
                        y: 629
                    },
                    {
                        x: 1793,
                        y: 4424
                    },
                    {
                        x: 1794,
                        y: 1840
                    },
                    {
                        x: 1795,
                        y: 4942
                    },
                    {
                        x: 1796,
                        y: 3105
                    },
                    {
                        x: 1797,
                        y: 1025
                    },
                    {
                        x: 1798,
                        y: 4207
                    },
                    {
                        x: 1799,
                        y: 4431
                    },
                    {
                        x: 1800,
                        y: 4496
                    },
                    {
                        x: 1801,
                        y: 2112
                    },
                    {
                        x: 1802,
                        y: 725
                    },
                    {
                        x: 1803,
                        y: 2448
                    },
                    {
                        x: 1804,
                        y: 3432
                    },
                    {
                        x: 1805,
                        y: 979
                    },
                    {
                        x: 1806,
                        y: 4692
                    },
                    {
                        x: 1807,
                        y: 3135
                    },
                    {
                        x: 1808,
                        y: 3463
                    },
                    {
                        x: 1809,
                        y: 706
                    },
                    {
                        x: 1810,
                        y: 1768
                    },
                    {
                        x: 1811,
                        y: 3369
                    },
                    {
                        x: 1812,
                        y: 3640
                    },
                    {
                        x: 1813,
                        y: 3875
                    },
                    {
                        x: 1814,
                        y: 3487
                    },
                    {
                        x: 1815,
                        y: 2099
                    },
                    {
                        x: 1816,
                        y: 4012
                    },
                    {
                        x: 1817,
                        y: 2487
                    },
                    {
                        x: 1818,
                        y: 3472
                    },
                    {
                        x: 1819,
                        y: 3313
                    },
                    {
                        x: 1820,
                        y: 4241
                    },
                    {
                        x: 1821,
                        y: 293
                    },
                    {
                        x: 1822,
                        y: 2006
                    },
                    {
                        x: 1823,
                        y: 2766
                    },
                    {
                        x: 1824,
                        y: 2903
                    },
                    {
                        x: 1825,
                        y: 73
                    },
                    {
                        x: 1826,
                        y: 1843
                    },
                    {
                        x: 1827,
                        y: 1329
                    },
                    {
                        x: 1828,
                        y: 3521
                    },
                    {
                        x: 1829,
                        y: 1746
                    },
                    {
                        x: 1830,
                        y: 4554
                    },
                    {
                        x: 1831,
                        y: 1489
                    },
                    {
                        x: 1832,
                        y: 137
                    },
                    {
                        x: 1833,
                        y: 3158
                    },
                    {
                        x: 1834,
                        y: 495
                    },
                    {
                        x: 1835,
                        y: 2117
                    },
                    {
                        x: 1836,
                        y: 4694
                    },
                    {
                        x: 1837,
                        y: 2561
                    },
                    {
                        x: 1838,
                        y: 228
                    },
                    {
                        x: 1839,
                        y: 1949
                    },
                    {
                        x: 1840,
                        y: 2978
                    },
                    {
                        x: 1841,
                        y: 3590
                    },
                    {
                        x: 1842,
                        y: 821
                    },
                    {
                        x: 1843,
                        y: 2576
                    },
                    {
                        x: 1844,
                        y: 1293
                    },
                    {
                        x: 1845,
                        y: 4883
                    },
                    {
                        x: 1846,
                        y: 2270
                    },
                    {
                        x: 1847,
                        y: 4333
                    },
                    {
                        x: 1848,
                        y: 2398
                    },
                    {
                        x: 1849,
                        y: 4686
                    },
                    {
                        x: 1850,
                        y: 2498
                    },
                    {
                        x: 1851,
                        y: 718
                    },
                    {
                        x: 1852,
                        y: 3288
                    },
                    {
                        x: 1853,
                        y: 403
                    },
                    {
                        x: 1854,
                        y: 4293
                    },
                    {
                        x: 1855,
                        y: 4185
                    },
                    {
                        x: 1856,
                        y: 3435
                    },
                    {
                        x: 1857,
                        y: 894
                    },
                    {
                        x: 1858,
                        y: 4786
                    },
                    {
                        x: 1859,
                        y: 3038
                    },
                    {
                        x: 1860,
                        y: 3682
                    },
                    {
                        x: 1861,
                        y: 573
                    },
                    {
                        x: 1862,
                        y: 1591
                    },
                    {
                        x: 1863,
                        y: 671
                    },
                    {
                        x: 1864,
                        y: 1109
                    },
                    {
                        x: 1865,
                        y: 4023
                    },
                    {
                        x: 1866,
                        y: 1414
                    },
                    {
                        x: 1867,
                        y: 3417
                    },
                    {
                        x: 1868,
                        y: 4756
                    },
                    {
                        x: 1869,
                        y: 1550
                    },
                    {
                        x: 1870,
                        y: 249
                    },
                    {
                        x: 1871,
                        y: 1165
                    },
                    {
                        x: 1872,
                        y: 640
                    },
                    {
                        x: 1873,
                        y: 1463
                    },
                    {
                        x: 1874,
                        y: 2229
                    },
                    {
                        x: 1875,
                        y: 1230
                    },
                    {
                        x: 1876,
                        y: 1023
                    },
                    {
                        x: 1877,
                        y: 2859
                    },
                    {
                        x: 1878,
                        y: 405
                    },
                    {
                        x: 1879,
                        y: 3431
                    },
                    {
                        x: 1880,
                        y: 3123
                    },
                    {
                        x: 1881,
                        y: 406
                    },
                    {
                        x: 1882,
                        y: 2695
                    },
                    {
                        x: 1883,
                        y: 3055
                    },
                    {
                        x: 1884,
                        y: 4853
                    },
                    {
                        x: 1885,
                        y: 4711
                    },
                    {
                        x: 1886,
                        y: 2488
                    },
                    {
                        x: 1887,
                        y: 3808
                    },
                    {
                        x: 1888,
                        y: 3197
                    },
                    {
                        x: 1889,
                        y: 2283
                    },
                    {
                        x: 1890,
                        y: 2658
                    },
                    {
                        x: 1891,
                        y: 3615
                    },
                    {
                        x: 1892,
                        y: 3966
                    },
                    {
                        x: 1893,
                        y: 1907
                    },
                    {
                        x: 1894,
                        y: 4257
                    },
                    {
                        x: 1895,
                        y: 3846
                    },
                    {
                        x: 1896,
                        y: 3807
                    },
                    {
                        x: 1897,
                        y: 2375
                    },
                    {
                        x: 1898,
                        y: 4994
                    },
                    {
                        x: 1899,
                        y: 3573
                    },
                    {
                        x: 1900,
                        y: 2104
                    },
                    {
                        x: 1901,
                        y: 2696
                    },
                    {
                        x: 1902,
                        y: 2647
                    },
                    {
                        x: 1903,
                        y: 3723
                    },
                    {
                        x: 1904,
                        y: 4793
                    },
                    {
                        x: 1905,
                        y: 1418
                    },
                    {
                        x: 1906,
                        y: 2681
                    },
                    {
                        x: 1907,
                        y: 1357
                    },
                    {
                        x: 1908,
                        y: 430
                    },
                    {
                        x: 1909,
                        y: 4067
                    },
                    {
                        x: 1910,
                        y: 3234
                    },
                    {
                        x: 1911,
                        y: 2746
                    },
                    {
                        x: 1912,
                        y: 1581
                    },
                    {
                        x: 1913,
                        y: 2791
                    },
                    {
                        x: 1914,
                        y: 4523
                    },
                    {
                        x: 1915,
                        y: 3806
                    },
                    {
                        x: 1916,
                        y: 4771
                    },
                    {
                        x: 1917,
                        y: 734
                    },
                    {
                        x: 1918,
                        y: 3213
                    },
                    {
                        x: 1919,
                        y: 101
                    },
                    {
                        x: 1920,
                        y: 794
                    },
                    {
                        x: 1921,
                        y: 2004
                    },
                    {
                        x: 1922,
                        y: 2209
                    },
                    {
                        x: 1923,
                        y: 813
                    },
                    {
                        x: 1924,
                        y: 189
                    },
                    {
                        x: 1925,
                        y: 3018
                    },
                    {
                        x: 1926,
                        y: 4921
                    },
                    {
                        x: 1927,
                        y: 3254
                    },
                    {
                        x: 1928,
                        y: 4781
                    },
                    {
                        x: 1929,
                        y: 3697
                    },
                    {
                        x: 1930,
                        y: 2187
                    },
                    {
                        x: 1931,
                        y: 4622
                    },
                    {
                        x: 1932,
                        y: 3415
                    },
                    {
                        x: 1933,
                        y: 2646
                    },
                    {
                        x: 1934,
                        y: 694
                    },
                    {
                        x: 1935,
                        y: 2360
                    },
                    {
                        x: 1936,
                        y: 3576
                    },
                    {
                        x: 1937,
                        y: 3184
                    },
                    {
                        x: 1938,
                        y: 369
                    },
                    {
                        x: 1939,
                        y: 899
                    },
                    {
                        x: 1940,
                        y: 1148
                    },
                    {
                        x: 1941,
                        y: 4583
                    },
                    {
                        x: 1942,
                        y: 3535
                    },
                    {
                        x: 1943,
                        y: 683
                    },
                    {
                        x: 1944,
                        y: 23
                    },
                    {
                        x: 1945,
                        y: 4134
                    },
                    {
                        x: 1946,
                        y: 1137
                    },
                    {
                        x: 1947,
                        y: 253
                    },
                    {
                        x: 1948,
                        y: 4056
                    },
                    {
                        x: 1949,
                        y: 2137
                    },
                    {
                        x: 1950,
                        y: 354
                    },
                    {
                        x: 1951,
                        y: 2093
                    },
                    {
                        x: 1952,
                        y: 3177
                    },
                    {
                        x: 1953,
                        y: 3515
                    },
                    {
                        x: 1954,
                        y: 412
                    },
                    {
                        x: 1955,
                        y: 3931
                    },
                    {
                        x: 1956,
                        y: 1217
                    },
                    {
                        x: 1957,
                        y: 4849
                    },
                    {
                        x: 1958,
                        y: 4430
                    },
                    {
                        x: 1959,
                        y: 4690
                    },
                    {
                        x: 1960,
                        y: 1446
                    },
                    {
                        x: 1961,
                        y: 2485
                    },
                    {
                        x: 1962,
                        y: 2119
                    },
                    {
                        x: 1963,
                        y: 4872
                    },
                    {
                        x: 1964,
                        y: 489
                    },
                    {
                        x: 1965,
                        y: 4224
                    },
                    {
                        x: 1966,
                        y: 3843
                    },
                    {
                        x: 1967,
                        y: 4493
                    },
                    {
                        x: 1968,
                        y: 4861
                    },
                    {
                        x: 1969,
                        y: 1780
                    },
                    {
                        x: 1970,
                        y: 2893
                    },
                    {
                        x: 1971,
                        y: 3584
                    },
                    {
                        x: 1972,
                        y: 907
                    },
                    {
                        x: 1973,
                        y: 1781
                    },
                    {
                        x: 1974,
                        y: 1002
                    },
                    {
                        x: 1975,
                        y: 1642
                    },
                    {
                        x: 1976,
                        y: 632
                    },
                    {
                        x: 1977,
                        y: 4918
                    },
                    {
                        x: 1978,
                        y: 3427
                    },
                    {
                        x: 1979,
                        y: 2716
                    },
                    {
                        x: 1980,
                        y: 3361
                    },
                    {
                        x: 1981,
                        y: 1610
                    },
                    {
                        x: 1982,
                        y: 579
                    },
                    {
                        x: 1983,
                        y: 1543
                    },
                    {
                        x: 1984,
                        y: 751
                    },
                    {
                        x: 1985,
                        y: 2018
                    },
                    {
                        x: 1986,
                        y: 3608
                    },
                    {
                        x: 1987,
                        y: 4697
                    },
                    {
                        x: 1988,
                        y: 2596
                    },
                    {
                        x: 1989,
                        y: 1150
                    },
                    {
                        x: 1990,
                        y: 1933
                    },
                    {
                        x: 1991,
                        y: 2623
                    },
                    {
                        x: 1992,
                        y: 2767
                    },
                    {
                        x: 1993,
                        y: 2673
                    },
                    {
                        x: 1994,
                        y: 3578
                    },
                    {
                        x: 1995,
                        y: 750
                    },
                    {
                        x: 1996,
                        y: 693
                    },
                    {
                        x: 1997,
                        y: 727
                    },
                    {
                        x: 1998,
                        y: 3110
                    },
                    {
                        x: 1999,
                        y: 3648
                    },
                    {
                        x: 2000,
                        y: 2402
                    },
                    {
                        x: 2001,
                        y: 4700
                    },
                    {
                        x: 2002,
                        y: 3785
                    },
                    {
                        x: 2003,
                        y: 4172
                    },
                    {
                        x: 2004,
                        y: 2620
                    },
                    {
                        x: 2005,
                        y: 1996
                    },
                    {
                        x: 2006,
                        y: 2138
                    },
                    {
                        x: 2007,
                        y: 2302
                    },
                    {
                        x: 2008,
                        y: 3052
                    },
                    {
                        x: 2009,
                        y: 3921
                    },
                    {
                        x: 2010,
                        y: 2974
                    },
                    {
                        x: 2011,
                        y: 2644
                    },
                    {
                        x: 2012,
                        y: 1431
                    },
                    {
                        x: 2013,
                        y: 4360
                    },
                    {
                        x: 2014,
                        y: 2572
                    },
                    {
                        x: 2015,
                        y: 2489
                    },
                    {
                        x: 2016,
                        y: 1178
                    },
                    {
                        x: 2017,
                        y: 3788
                    },
                    {
                        x: 2018,
                        y: 161
                    },
                    {
                        x: 2019,
                        y: 1406
                    },
                    {
                        x: 2020,
                        y: 2960
                    },
                    {
                        x: 2021,
                        y: 4253
                    },
                    {
                        x: 2022,
                        y: 2867
                    },
                    {
                        x: 2023,
                        y: 4546
                    },
                    {
                        x: 2024,
                        y: 3093
                    },
                    {
                        x: 2025,
                        y: 4516
                    },
                    {
                        x: 2026,
                        y: 1937
                    },
                    {
                        x: 2027,
                        y: 2807
                    },
                    {
                        x: 2028,
                        y: 4320
                    },
                    {
                        x: 2029,
                        y: 111
                    },
                    {
                        x: 2030,
                        y: 289
                    },
                    {
                        x: 2031,
                        y: 1026
                    },
                    {
                        x: 2032,
                        y: 4088
                    },
                    {
                        x: 2033,
                        y: 2918
                    },
                    {
                        x: 2034,
                        y: 206
                    },
                    {
                        x: 2035,
                        y: 187
                    },
                    {
                        x: 2036,
                        y: 4570
                    },
                    {
                        x: 2037,
                        y: 4090
                    },
                    {
                        x: 2038,
                        y: 332
                    },
                    {
                        x: 2039,
                        y: 1800
                    },
                    {
                        x: 2040,
                        y: 2610
                    },
                    {
                        x: 2041,
                        y: 2823
                    },
                    {
                        x: 2042,
                        y: 589
                    },
                    {
                        x: 2043,
                        y: 4327
                    },
                    {
                        x: 2044,
                        y: 563
                    },
                    {
                        x: 2045,
                        y: 4910
                    },
                    {
                        x: 2046,
                        y: 46
                    },
                    {
                        x: 2047,
                        y: 624
                    },
                    {
                        x: 2048,
                        y: 271
                    },
                    {
                        x: 2049,
                        y: 4249
                    },
                    {
                        x: 2050,
                        y: 4837
                    },
                    {
                        x: 2051,
                        y: 3815
                    },
                    {
                        x: 2052,
                        y: 1981
                    },
                    {
                        x: 2053,
                        y: 4937
                    },
                    {
                        x: 2054,
                        y: 1850
                    },
                    {
                        x: 2055,
                        y: 1121
                    },
                    {
                        x: 2056,
                        y: 1903
                    },
                    {
                        x: 2057,
                        y: 2390
                    },
                    {
                        x: 2058,
                        y: 2268
                    },
                    {
                        x: 2059,
                        y: 996
                    },
                    {
                        x: 2060,
                        y: 1009
                    },
                    {
                        x: 2061,
                        y: 1727
                    },
                    {
                        x: 2062,
                        y: 3202
                    },
                    {
                        x: 2063,
                        y: 1087
                    },
                    {
                        x: 2064,
                        y: 1240
                    },
                    {
                        x: 2065,
                        y: 1237
                    },
                    {
                        x: 2066,
                        y: 1054
                    },
                    {
                        x: 2067,
                        y: 3952
                    },
                    {
                        x: 2068,
                        y: 1728
                    },
                    {
                        x: 2069,
                        y: 4194
                    },
                    {
                        x: 2070,
                        y: 2687
                    },
                    {
                        x: 2071,
                        y: 3596
                    },
                    {
                        x: 2072,
                        y: 2816
                    },
                    {
                        x: 2073,
                        y: 4662
                    },
                    {
                        x: 2074,
                        y: 2986
                    },
                    {
                        x: 2075,
                        y: 828
                    },
                    {
                        x: 2076,
                        y: 3861
                    },
                    {
                        x: 2077,
                        y: 1015
                    },
                    {
                        x: 2078,
                        y: 1994
                    },
                    {
                        x: 2079,
                        y: 2778
                    },
                    {
                        x: 2080,
                        y: 2381
                    },
                    {
                        x: 2081,
                        y: 1835
                    },
                    {
                        x: 2082,
                        y: 2466
                    },
                    {
                        x: 2083,
                        y: 619
                    },
                    {
                        x: 2084,
                        y: 2637
                    },
                    {
                        x: 2085,
                        y: 4870
                    },
                    {
                        x: 2086,
                        y: 4779
                    },
                    {
                        x: 2087,
                        y: 225
                    },
                    {
                        x: 2088,
                        y: 3550
                    },
                    {
                        x: 2089,
                        y: 2290
                    },
                    {
                        x: 2090,
                        y: 4385
                    },
                    {
                        x: 2091,
                        y: 1952
                    },
                    {
                        x: 2092,
                        y: 1127
                    },
                    {
                        x: 2093,
                        y: 2442
                    },
                    {
                        x: 2094,
                        y: 3969
                    },
                    {
                        x: 2095,
                        y: 3297
                    },
                    {
                        x: 2096,
                        y: 436
                    },
                    {
                        x: 2097,
                        y: 4505
                    },
                    {
                        x: 2098,
                        y: 146
                    },
                    {
                        x: 2099,
                        y: 1568
                    },
                    {
                        x: 2100,
                        y: 2035
                    },
                    {
                        x: 2101,
                        y: 2566
                    },
                    {
                        x: 2102,
                        y: 1216
                    },
                    {
                        x: 2103,
                        y: 3013
                    },
                    {
                        x: 2104,
                        y: 2694
                    },
                    {
                        x: 2105,
                        y: 830
                    },
                    {
                        x: 2106,
                        y: 345
                    },
                    {
                        x: 2107,
                        y: 1735
                    },
                    {
                        x: 2108,
                        y: 1221
                    },
                    {
                        x: 2109,
                        y: 3114
                    },
                    {
                        x: 2110,
                        y: 4301
                    },
                    {
                        x: 2111,
                        y: 1090
                    },
                    {
                        x: 2112,
                        y: 4168
                    },
                    {
                        x: 2113,
                        y: 2598
                    },
                    {
                        x: 2114,
                        y: 798
                    },
                    {
                        x: 2115,
                        y: 911
                    },
                    {
                        x: 2116,
                        y: 3363
                    },
                    {
                        x: 2117,
                        y: 3612
                    },
                    {
                        x: 2118,
                        y: 4177
                    },
                    {
                        x: 2119,
                        y: 3605
                    },
                    {
                        x: 2120,
                        y: 3761
                    },
                    {
                        x: 2121,
                        y: 3088
                    },
                    {
                        x: 2122,
                        y: 3664
                    },
                    {
                        x: 2123,
                        y: 2737
                    },
                    {
                        x: 2124,
                        y: 1612
                    },
                    {
                        x: 2125,
                        y: 1752
                    },
                    {
                        x: 2126,
                        y: 1795
                    },
                    {
                        x: 2127,
                        y: 4746
                    },
                    {
                        x: 2128,
                        y: 2724
                    },
                    {
                        x: 2129,
                        y: 159
                    },
                    {
                        x: 2130,
                        y: 3623
                    },
                    {
                        x: 2131,
                        y: 585
                    },
                    {
                        x: 2132,
                        y: 2322
                    },
                    {
                        x: 2133,
                        y: 2783
                    },
                    {
                        x: 2134,
                        y: 1361
                    },
                    {
                        x: 2135,
                        y: 3445
                    },
                    {
                        x: 2136,
                        y: 1750
                    },
                    {
                        x: 2137,
                        y: 691
                    },
                    {
                        x: 2138,
                        y: 4181
                    },
                    {
                        x: 2139,
                        y: 4787
                    },
                    {
                        x: 2140,
                        y: 3441
                    },
                    {
                        x: 2141,
                        y: 292
                    },
                    {
                        x: 2142,
                        y: 1989
                    },
                    {
                        x: 2143,
                        y: 4354
                    },
                    {
                        x: 2144,
                        y: 2147
                    },
                    {
                        x: 2145,
                        y: 1093
                    },
                    {
                        x: 2146,
                        y: 1704
                    },
                    {
                        x: 2147,
                        y: 2630
                    },
                    {
                        x: 2148,
                        y: 1515
                    },
                    {
                        x: 2149,
                        y: 4459
                    },
                    {
                        x: 2150,
                        y: 1627
                    },
                    {
                        x: 2151,
                        y: 2102
                    },
                    {
                        x: 2152,
                        y: 774
                    },
                    {
                        x: 2153,
                        y: 1235
                    },
                    {
                        x: 2154,
                        y: 2312
                    },
                    {
                        x: 2155,
                        y: 4988
                    },
                    {
                        x: 2156,
                        y: 2672
                    },
                    {
                        x: 2157,
                        y: 4053
                    },
                    {
                        x: 2158,
                        y: 3525
                    },
                    {
                        x: 2159,
                        y: 1801
                    },
                    {
                        x: 2160,
                        y: 4807
                    },
                    {
                        x: 2161,
                        y: 1355
                    },
                    {
                        x: 2162,
                        y: 4736
                    },
                    {
                        x: 2163,
                        y: 1028
                    },
                    {
                        x: 2164,
                        y: 4672
                    },
                    {
                        x: 2165,
                        y: 2373
                    },
                    {
                        x: 2166,
                        y: 667
                    },
                    {
                        x: 2167,
                        y: 904
                    },
                    {
                        x: 2168,
                        y: 1303
                    },
                    {
                        x: 2169,
                        y: 2720
                    },
                    {
                        x: 2170,
                        y: 4359
                    },
                    {
                        x: 2171,
                        y: 1692
                    },
                    {
                        x: 2172,
                        y: 4766
                    },
                    {
                        x: 2173,
                        y: 3763
                    },
                    {
                        x: 2174,
                        y: 4669
                    },
                    {
                        x: 2175,
                        y: 230
                    },
                    {
                        x: 2176,
                        y: 316
                    },
                    {
                        x: 2177,
                        y: 2480
                    },
                    {
                        x: 2178,
                        y: 2294
                    },
                    {
                        x: 2179,
                        y: 2216
                    },
                    {
                        x: 2180,
                        y: 1039
                    },
                    {
                        x: 2181,
                        y: 1477
                    },
                    {
                        x: 2182,
                        y: 3523
                    },
                    {
                        x: 2183,
                        y: 1708
                    },
                    {
                        x: 2184,
                        y: 1041
                    },
                    {
                        x: 2185,
                        y: 4945
                    },
                    {
                        x: 2186,
                        y: 2114
                    },
                    {
                        x: 2187,
                        y: 4769
                    },
                    {
                        x: 2188,
                        y: 1893
                    },
                    {
                        x: 2189,
                        y: 2652
                    },
                    {
                        x: 2190,
                        y: 1603
                    },
                    {
                        x: 2191,
                        y: 1376
                    },
                    {
                        x: 2192,
                        y: 4670
                    },
                    {
                        x: 2193,
                        y: 2762
                    },
                    {
                        x: 2194,
                        y: 3751
                    },
                    {
                        x: 2195,
                        y: 4045
                    },
                    {
                        x: 2196,
                        y: 2541
                    },
                    {
                        x: 2197,
                        y: 1890
                    },
                    {
                        x: 2198,
                        y: 1764
                    },
                    {
                        x: 2199,
                        y: 57
                    },
                    {
                        x: 2200,
                        y: 4657
                    },
                    {
                        x: 2201,
                        y: 2621
                    },
                    {
                        x: 2202,
                        y: 1985
                    },
                    {
                        x: 2203,
                        y: 3403
                    },
                    {
                        x: 2204,
                        y: 2040
                    },
                    {
                        x: 2205,
                        y: 3914
                    },
                    {
                        x: 2206,
                        y: 2847
                    },
                    {
                        x: 2207,
                        y: 1906
                    },
                    {
                        x: 2208,
                        y: 2383
                    },
                    {
                        x: 2209,
                        y: 1921
                    },
                    {
                        x: 2210,
                        y: 1182
                    },
                    {
                        x: 2211,
                        y: 4226
                    },
                    {
                        x: 2212,
                        y: 4626
                    },
                    {
                        x: 2213,
                        y: 3346
                    },
                    {
                        x: 2214,
                        y: 2418
                    },
                    {
                        x: 2215,
                        y: 2050
                    },
                    {
                        x: 2216,
                        y: 1712
                    },
                    {
                        x: 2217,
                        y: 959
                    },
                    {
                        x: 2218,
                        y: 478
                    },
                    {
                        x: 2219,
                        y: 2038
                    },
                    {
                        x: 2220,
                        y: 1263
                    },
                    {
                        x: 2221,
                        y: 2948
                    },
                    {
                        x: 2222,
                        y: 4620
                    },
                    {
                        x: 2223,
                        y: 1940
                    },
                    {
                        x: 2224,
                        y: 1770
                    },
                    {
                        x: 2225,
                        y: 1563
                    },
                    {
                        x: 2226,
                        y: 3080
                    },
                    {
                        x: 2227,
                        y: 930
                    },
                    {
                        x: 2228,
                        y: 2347
                    },
                    {
                        x: 2229,
                        y: 2338
                    },
                    {
                        x: 2230,
                        y: 3710
                    },
                    {
                        x: 2231,
                        y: 4856
                    },
                    {
                        x: 2232,
                        y: 3260
                    },
                    {
                        x: 2233,
                        y: 2830
                    },
                    {
                        x: 2234,
                        y: 872
                    },
                    {
                        x: 2235,
                        y: 3190
                    },
                    {
                        x: 2236,
                        y: 1682
                    },
                    {
                        x: 2237,
                        y: 1709
                    },
                    {
                        x: 2238,
                        y: 2486
                    },
                    {
                        x: 2239,
                        y: 1313
                    },
                    {
                        x: 2240,
                        y: 2285
                    },
                    {
                        x: 2241,
                        y: 2053
                    },
                    {
                        x: 2242,
                        y: 903
                    },
                    {
                        x: 2243,
                        y: 4087
                    },
                    {
                        x: 2244,
                        y: 259
                    },
                    {
                        x: 2245,
                        y: 2436
                    },
                    {
                        x: 2246,
                        y: 3828
                    },
                    {
                        x: 2247,
                        y: 1484
                    },
                    {
                        x: 2248,
                        y: 1721
                    },
                    {
                        x: 2249,
                        y: 1966
                    },
                    {
                        x: 2250,
                        y: 729
                    },
                    {
                        x: 2251,
                        y: 2193
                    },
                    {
                        x: 2252,
                        y: 3883
                    },
                    {
                        x: 2253,
                        y: 3954
                    },
                    {
                        x: 2254,
                        y: 699
                    },
                    {
                        x: 2255,
                        y: 2977
                    },
                    {
                        x: 2256,
                        y: 584
                    },
                    {
                        x: 2257,
                        y: 2105
                    },
                    {
                        x: 2258,
                        y: 323
                    },
                    {
                        x: 2259,
                        y: 4085
                    },
                    {
                        x: 2260,
                        y: 2650
                    },
                    {
                        x: 2261,
                        y: 368
                    },
                    {
                        x: 2262,
                        y: 1910
                    },
                    {
                        x: 2263,
                        y: 291
                    },
                    {
                        x: 2264,
                        y: 2750
                    },
                    {
                        x: 2265,
                        y: 3901
                    },
                    {
                        x: 2266,
                        y: 1007
                    },
                    {
                        x: 2267,
                        y: 3570
                    },
                    {
                        x: 2268,
                        y: 3652
                    },
                    {
                        x: 2269,
                        y: 4969
                    },
                    {
                        x: 2270,
                        y: 4335
                    },
                    {
                        x: 2271,
                        y: 2873
                    },
                    {
                        x: 2272,
                        y: 3716
                    },
                    {
                        x: 2273,
                        y: 3915
                    },
                    {
                        x: 2274,
                        y: 1284
                    },
                    {
                        x: 2275,
                        y: 4452
                    },
                    {
                        x: 2276,
                        y: 318
                    },
                    {
                        x: 2277,
                        y: 4322
                    },
                    {
                        x: 2278,
                        y: 4847
                    },
                    {
                        x: 2279,
                        y: 2544
                    },
                    {
                        x: 2280,
                        y: 1929
                    },
                    {
                        x: 2281,
                        y: 3357
                    },
                    {
                        x: 2282,
                        y: 4501
                    },
                    {
                        x: 2283,
                        y: 1871
                    },
                    {
                        x: 2284,
                        y: 2735
                    },
                    {
                        x: 2285,
                        y: 1300
                    },
                    {
                        x: 2286,
                        y: 3840
                    },
                    {
                        x: 2287,
                        y: 3862
                    },
                    {
                        x: 2288,
                        y: 4783
                    },
                    {
                        x: 2289,
                        y: 3758
                    },
                    {
                        x: 2290,
                        y: 2713
                    },
                    {
                        x: 2291,
                        y: 1043
                    },
                    {
                        x: 2292,
                        y: 2189
                    },
                    {
                        x: 2293,
                        y: 143
                    },
                    {
                        x: 2294,
                        y: 767
                    },
                    {
                        x: 2295,
                        y: 3860
                    },
                    {
                        x: 2296,
                        y: 3368
                    },
                    {
                        x: 2297,
                        y: 12
                    },
                    {
                        x: 2298,
                        y: 3476
                    },
                    {
                        x: 2299,
                        y: 1427
                    },
                    {
                        x: 2300,
                        y: 3804
                    },
                    {
                        x: 2301,
                        y: 950
                    },
                    {
                        x: 2302,
                        y: 2565
                    },
                    {
                        x: 2303,
                        y: 4073
                    },
                    {
                        x: 2304,
                        y: 340
                    },
                    {
                        x: 2305,
                        y: 804
                    },
                    {
                        x: 2306,
                        y: 4180
                    },
                    {
                        x: 2307,
                        y: 4515
                    },
                    {
                        x: 2308,
                        y: 3304
                    },
                    {
                        x: 2309,
                        y: 2106
                    },
                    {
                        x: 2310,
                        y: 3574
                    },
                    {
                        x: 2311,
                        y: 3834
                    },
                    {
                        x: 2312,
                        y: 4102
                    },
                    {
                        x: 2313,
                        y: 3405
                    },
                    {
                        x: 2314,
                        y: 2639
                    },
                    {
                        x: 2315,
                        y: 338
                    },
                    {
                        x: 2316,
                        y: 2643
                    },
                    {
                        x: 2317,
                        y: 501
                    },
                    {
                        x: 2318,
                        y: 1229
                    },
                    {
                        x: 2319,
                        y: 4248
                    },
                    {
                        x: 2320,
                        y: 4964
                    },
                    {
                        x: 2321,
                        y: 41
                    },
                    {
                        x: 2322,
                        y: 2930
                    },
                    {
                        x: 2323,
                        y: 314
                    },
                    {
                        x: 2324,
                        y: 1242
                    },
                    {
                        x: 2325,
                        y: 3400
                    },
                    {
                        x: 2326,
                        y: 1222
                    },
                    {
                        x: 2327,
                        y: 2422
                    },
                    {
                        x: 2328,
                        y: 476
                    },
                    {
                        x: 2329,
                        y: 1679
                    },
                    {
                        x: 2330,
                        y: 778
                    },
                    {
                        x: 2331,
                        y: 3838
                    },
                    {
                        x: 2332,
                        y: 1776
                    },
                    {
                        x: 2333,
                        y: 2473
                    },
                    {
                        x: 2334,
                        y: 1851
                    },
                    {
                        x: 2335,
                        y: 498
                    },
                    {
                        x: 2336,
                        y: 3649
                    },
                    {
                        x: 2337,
                        y: 4165
                    },
                    {
                        x: 2338,
                        y: 2033
                    },
                    {
                        x: 2339,
                        y: 3407
                    },
                    {
                        x: 2340,
                        y: 861
                    },
                    {
                        x: 2341,
                        y: 2430
                    },
                    {
                        x: 2342,
                        y: 2420
                    },
                    {
                        x: 2343,
                        y: 2313
                    },
                    {
                        x: 2344,
                        y: 3491
                    },
                    {
                        x: 2345,
                        y: 880
                    },
                    {
                        x: 2346,
                        y: 4481
                    },
                    {
                        x: 2347,
                        y: 247
                    },
                    {
                        x: 2348,
                        y: 2387
                    },
                    {
                        x: 2349,
                        y: 1854
                    },
                    {
                        x: 2350,
                        y: 4642
                    },
                    {
                        x: 2351,
                        y: 3291
                    },
                    {
                        x: 2352,
                        y: 4245
                    },
                    {
                        x: 2353,
                        y: 2616
                    },
                    {
                        x: 2354,
                        y: 3906
                    },
                    {
                        x: 2355,
                        y: 3444
                    },
                    {
                        x: 2356,
                        y: 647
                    },
                    {
                        x: 2357,
                        y: 2362
                    },
                    {
                        x: 2358,
                        y: 4532
                    },
                    {
                        x: 2359,
                        y: 4992
                    },
                    {
                        x: 2360,
                        y: 2904
                    },
                    {
                        x: 2361,
                        y: 3543
                    },
                    {
                        x: 2362,
                        y: 711
                    },
                    {
                        x: 2363,
                        y: 956
                    },
                    {
                        x: 2364,
                        y: 4811
                    },
                    {
                        x: 2365,
                        y: 782
                    },
                    {
                        x: 2366,
                        y: 2195
                    },
                    {
                        x: 2367,
                        y: 1792
                    },
                    {
                        x: 2368,
                        y: 4830
                    },
                    {
                        x: 2369,
                        y: 3065
                    },
                    {
                        x: 2370,
                        y: 302
                    },
                    {
                        x: 2371,
                        y: 4175
                    },
                    {
                        x: 2372,
                        y: 3537
                    },
                    {
                        x: 2373,
                        y: 1430
                    },
                    {
                        x: 2374,
                        y: 4498
                    },
                    {
                        x: 2375,
                        y: 4355
                    },
                    {
                        x: 2376,
                        y: 858
                    },
                    {
                        x: 2377,
                        y: 445
                    },
                    {
                        x: 2378,
                        y: 3548
                    },
                    {
                        x: 2379,
                        y: 680
                    },
                    {
                        x: 2380,
                        y: 752
                    },
                    {
                        x: 2381,
                        y: 2837
                    },
                    {
                        x: 2382,
                        y: 104
                    },
                    {
                        x: 2383,
                        y: 1853
                    },
                    {
                        x: 2384,
                        y: 684
                    },
                    {
                        x: 2385,
                        y: 3191
                    },
                    {
                        x: 2386,
                        y: 4284
                    },
                    {
                        x: 2387,
                        y: 4150
                    },
                    {
                        x: 2388,
                        y: 4314
                    },
                    {
                        x: 2389,
                        y: 3478
                    },
                    {
                        x: 2390,
                        y: 1586
                    },
                    {
                        x: 2391,
                        y: 4514
                    },
                    {
                        x: 2392,
                        y: 1938
                    },
                    {
                        x: 2393,
                        y: 454
                    },
                    {
                        x: 2394,
                        y: 3474
                    },
                    {
                        x: 2395,
                        y: 4064
                    },
                    {
                        x: 2396,
                        y: 348
                    },
                    {
                        x: 2397,
                        y: 4852
                    },
                    {
                        x: 2398,
                        y: 381
                    },
                    {
                        x: 2399,
                        y: 1027
                    },
                    {
                        x: 2400,
                        y: 3555
                    },
                    {
                        x: 2401,
                        y: 3770
                    },
                    {
                        x: 2402,
                        y: 3108
                    },
                    {
                        x: 2403,
                        y: 130
                    },
                    {
                        x: 2404,
                        y: 2799
                    },
                    {
                        x: 2405,
                        y: 3320
                    },
                    {
                        x: 2406,
                        y: 2205
                    },
                    {
                        x: 2407,
                        y: 3528
                    },
                    {
                        x: 2408,
                        y: 1304
                    },
                    {
                        x: 2409,
                        y: 270
                    },
                    {
                        x: 2410,
                        y: 3629
                    },
                    {
                        x: 2411,
                        y: 964
                    },
                    {
                        x: 2412,
                        y: 2231
                    },
                    {
                        x: 2413,
                        y: 3757
                    },
                    {
                        x: 2414,
                        y: 3134
                    },
                    {
                        x: 2415,
                        y: 3818
                    },
                    {
                        x: 2416,
                        y: 65
                    },
                    {
                        x: 2417,
                        y: 366
                    },
                    {
                        x: 2418,
                        y: 1892
                    },
                    {
                        x: 2419,
                        y: 3891
                    },
                    {
                        x: 2420,
                        y: 2435
                    },
                    {
                        x: 2421,
                        y: 1598
                    },
                    {
                        x: 2422,
                        y: 3408
                    },
                    {
                        x: 2423,
                        y: 1811
                    },
                    {
                        x: 2424,
                        y: 2538
                    },
                    {
                        x: 2425,
                        y: 1790
                    },
                    {
                        x: 2426,
                        y: 1597
                    },
                    {
                        x: 2427,
                        y: 1372
                    },
                    {
                        x: 2428,
                        y: 4127
                    },
                    {
                        x: 2429,
                        y: 615
                    },
                    {
                        x: 2430,
                        y: 987
                    },
                    {
                        x: 2431,
                        y: 4507
                    },
                    {
                        x: 2432,
                        y: 1875
                    },
                    {
                        x: 2433,
                        y: 1590
                    },
                    {
                        x: 2434,
                        y: 1144
                    },
                    {
                        x: 2435,
                        y: 4843
                    },
                    {
                        x: 2436,
                        y: 4007
                    },
                    {
                        x: 2437,
                        y: 186
                    },
                    {
                        x: 2438,
                        y: 1589
                    },
                    {
                        x: 2439,
                        y: 820
                    },
                    {
                        x: 2440,
                        y: 3920
                    },
                    {
                        x: 2441,
                        y: 1825
                    },
                    {
                        x: 2442,
                        y: 4822
                    },
                    {
                        x: 2443,
                        y: 3227
                    },
                    {
                        x: 2444,
                        y: 685
                    },
                    {
                        x: 2445,
                        y: 2023
                    },
                    {
                        x: 2446,
                        y: 1070
                    },
                    {
                        x: 2447,
                        y: 3402
                    },
                    {
                        x: 2448,
                        y: 4654
                    },
                    {
                        x: 2449,
                        y: 1454
                    },
                    {
                        x: 2450,
                        y: 1334
                    },
                    {
                        x: 2451,
                        y: 3531
                    },
                    {
                        x: 2452,
                        y: 123
                    },
                    {
                        x: 2453,
                        y: 1200
                    },
                    {
                        x: 2454,
                        y: 26
                    },
                    {
                        x: 2455,
                        y: 2916
                    },
                    {
                        x: 2456,
                        y: 3520
                    },
                    {
                        x: 2457,
                        y: 2288
                    },
                    {
                        x: 2458,
                        y: 162
                    },
                    {
                        x: 2459,
                        y: 3927
                    },
                    {
                        x: 2460,
                        y: 923
                    },
                    {
                        x: 2461,
                        y: 3558
                    },
                    {
                        x: 2462,
                        y: 2631
                    },
                    {
                        x: 2463,
                        y: 4718
                    },
                    {
                        x: 2464,
                        y: 1967
                    },
                    {
                        x: 2465,
                        y: 4954
                    },
                    {
                        x: 2466,
                        y: 2328
                    },
                    {
                        x: 2467,
                        y: 4020
                    },
                    {
                        x: 2468,
                        y: 2334
                    },
                    {
                        x: 2469,
                        y: 4147
                    },
                    {
                        x: 2470,
                        y: 1247
                    },
                    {
                        x: 2471,
                        y: 2808
                    },
                    {
                        x: 2472,
                        y: 126
                    },
                    {
                        x: 2473,
                        y: 2197
                    },
                    {
                        x: 2474,
                        y: 3109
                    },
                    {
                        x: 2475,
                        y: 3276
                    },
                    {
                        x: 2476,
                        y: 74
                    },
                    {
                        x: 2477,
                        y: 480
                    },
                    {
                        x: 2478,
                        y: 3505
                    },
                    {
                        x: 2479,
                        y: 4444
                    },
                    {
                        x: 2480,
                        y: 934
                    },
                    {
                        x: 2481,
                        y: 3229
                    },
                    {
                        x: 2482,
                        y: 50
                    },
                    {
                        x: 2483,
                        y: 4618
                    },
                    {
                        x: 2484,
                        y: 3833
                    },
                    {
                        x: 2485,
                        y: 1559
                    },
                    {
                        x: 2486,
                        y: 4044
                    },
                    {
                        x: 2487,
                        y: 444
                    },
                    {
                        x: 2488,
                        y: 1389
                    },
                    {
                        x: 2489,
                        y: 3164
                    },
                    {
                        x: 2490,
                        y: 337
                    },
                    {
                        x: 2491,
                        y: 2988
                    },
                    {
                        x: 2492,
                        y: 4906
                    },
                    {
                        x: 2493,
                        y: 1364
                    },
                    {
                        x: 2494,
                        y: 2318
                    },
                    {
                        x: 2495,
                        y: 708
                    },
                    {
                        x: 2496,
                        y: 3253
                    },
                    {
                        x: 2497,
                        y: 771
                    },
                    {
                        x: 2498,
                        y: 2073
                    },
                    {
                        x: 2499,
                        y: 1341
                    },
                    {
                        x: 2500,
                        y: 1667
                    },
                    {
                        x: 2501,
                        y: 3755
                    },
                    {
                        x: 2502,
                        y: 3233
                    },
                    {
                        x: 2503,
                        y: 1390
                    },
                    {
                        x: 2504,
                        y: 172
                    },
                    {
                        x: 2505,
                        y: 3101
                    },
                    {
                        x: 2506,
                        y: 2769
                    },
                    {
                        x: 2507,
                        y: 4188
                    },
                    {
                        x: 2508,
                        y: 538
                    },
                    {
                        x: 2509,
                        y: 1633
                    },
                    {
                        x: 2510,
                        y: 13
                    },
                    {
                        x: 2511,
                        y: 54
                    },
                    {
                        x: 2512,
                        y: 4948
                    },
                    {
                        x: 2513,
                        y: 2533
                    },
                    {
                        x: 2514,
                        y: 3384
                    },
                    {
                        x: 2515,
                        y: 1980
                    },
                    {
                        x: 2516,
                        y: 3581
                    },
                    {
                        x: 2517,
                        y: 3621
                    },
                    {
                        x: 2518,
                        y: 3256
                    },
                    {
                        x: 2519,
                        y: 3409
                    },
                    {
                        x: 2520,
                        y: 2237
                    },
                    {
                        x: 2521,
                        y: 2142
                    },
                    {
                        x: 2522,
                        y: 599
                    },
                    {
                        x: 2523,
                        y: 3099
                    },
                    {
                        x: 2524,
                        y: 938
                    },
                    {
                        x: 2525,
                        y: 4068
                    },
                    {
                        x: 2526,
                        y: 3367
                    },
                    {
                        x: 2527,
                        y: 4917
                    },
                    {
                        x: 2528,
                        y: 1972
                    },
                    {
                        x: 2529,
                        y: 3224
                    },
                    {
                        x: 2530,
                        y: 816
                    },
                    {
                        x: 2531,
                        y: 361
                    },
                    {
                        x: 2532,
                        y: 4122
                    },
                    {
                        x: 2533,
                        y: 1362
                    },
                    {
                        x: 2534,
                        y: 4361
                    },
                    {
                        x: 2535,
                        y: 4021
                    },
                    {
                        x: 2536,
                        y: 2413
                    },
                    {
                        x: 2537,
                        y: 3903
                    },
                    {
                        x: 2538,
                        y: 2223
                    },
                    {
                        x: 2539,
                        y: 812
                    },
                    {
                        x: 2540,
                        y: 2964
                    },
                    {
                        x: 2541,
                        y: 2066
                    },
                    {
                        x: 2542,
                        y: 542
                    },
                    {
                        x: 2543,
                        y: 2811
                    },
                    {
                        x: 2544,
                        y: 1608
                    },
                    {
                        x: 2545,
                        y: 2266
                    },
                    {
                        x: 2546,
                        y: 449
                    },
                    {
                        x: 2547,
                        y: 4596
                    },
                    {
                        x: 2548,
                        y: 1167
                    },
                    {
                        x: 2549,
                        y: 3037
                    },
                    {
                        x: 2550,
                        y: 2780
                    },
                    {
                        x: 2551,
                        y: 279
                    },
                    {
                        x: 2552,
                        y: 4190
                    },
                    {
                        x: 2553,
                        y: 52
                    },
                    {
                        x: 2554,
                        y: 2742
                    },
                    {
                        x: 2555,
                        y: 119
                    },
                    {
                        x: 2556,
                        y: 3389
                    },
                    {
                        x: 2557,
                        y: 4699
                    },
                    {
                        x: 2558,
                        y: 1680
                    },
                    {
                        x: 2559,
                        y: 564
                    },
                    {
                        x: 2560,
                        y: 696
                    },
                    {
                        x: 2561,
                        y: 2299
                    },
                    {
                        x: 2562,
                        y: 4077
                    },
                    {
                        x: 2563,
                        y: 3868
                    },
                    {
                        x: 2564,
                        y: 620
                    },
                    {
                        x: 2565,
                        y: 2395
                    },
                    {
                        x: 2566,
                        y: 2931
                    },
                    {
                        x: 2567,
                        y: 2429
                    },
                    {
                        x: 2568,
                        y: 113
                    },
                    {
                        x: 2569,
                        y: 2132
                    },
                    {
                        x: 2570,
                        y: 4835
                    },
                    {
                        x: 2571,
                        y: 402
                    },
                    {
                        x: 2572,
                        y: 847
                    },
                    {
                        x: 2573,
                        y: 677
                    },
                    {
                        x: 2574,
                        y: 756
                    },
                    {
                        x: 2575,
                        y: 1271
                    },
                    {
                        x: 2576,
                        y: 4905
                    },
                    {
                        x: 2577,
                        y: 3604
                    },
                    {
                        x: 2578,
                        y: 2821
                    },
                    {
                        x: 2579,
                        y: 3825
                    },
                    {
                        x: 2580,
                        y: 653
                    },
                    {
                        x: 2581,
                        y: 4604
                    },
                    {
                        x: 2582,
                        y: 4512
                    },
                    {
                        x: 2583,
                        y: 2450
                    },
                    {
                        x: 2584,
                        y: 3684
                    },
                    {
                        x: 2585,
                        y: 1377
                    },
                    {
                        x: 2586,
                        y: 4457
                    },
                    {
                        x: 2587,
                        y: 4825
                    },
                    {
                        x: 2588,
                        y: 4534
                    },
                    {
                        x: 2589,
                        y: 1485
                    },
                    {
                        x: 2590,
                        y: 375
                    },
                    {
                        x: 2591,
                        y: 2732
                    },
                    {
                        x: 2592,
                        y: 954
                    },
                    {
                        x: 2593,
                        y: 1896
                    },
                    {
                        x: 2594,
                        y: 4981
                    },
                    {
                        x: 2595,
                        y: 3186
                    },
                    {
                        x: 2596,
                        y: 3677
                    },
                    {
                        x: 2597,
                        y: 1488
                    },
                    {
                        x: 2598,
                        y: 4651
                    },
                    {
                        x: 2599,
                        y: 4998
                    },
                    {
                        x: 2600,
                        y: 1695
                    },
                    {
                        x: 2601,
                        y: 3940
                    },
                    {
                        x: 2602,
                        y: 466
                    },
                    {
                        x: 2603,
                        y: 3587
                    },
                    {
                        x: 2604,
                        y: 4820
                    },
                    {
                        x: 2605,
                        y: 1720
                    },
                    {
                        x: 2606,
                        y: 869
                    },
                    {
                        x: 2607,
                        y: 1640
                    },
                    {
                        x: 2608,
                        y: 2492
                    },
                    {
                        x: 2609,
                        y: 4447
                    },
                    {
                        x: 2610,
                        y: 226
                    },
                    {
                        x: 2611,
                        y: 2976
                    },
                    {
                        x: 2612,
                        y: 1210
                    },
                    {
                        x: 2613,
                        y: 2501
                    },
                    {
                        x: 2614,
                        y: 1231
                    },
                    {
                        x: 2615,
                        y: 3995
                    },
                    {
                        x: 2616,
                        y: 4326
                    },
                    {
                        x: 2617,
                        y: 4806
                    },
                    {
                        x: 2618,
                        y: 331
                    },
                    {
                        x: 2619,
                        y: 4408
                    },
                    {
                        x: 2620,
                        y: 4420
                    },
                    {
                        x: 2621,
                        y: 2937
                    },
                    {
                        x: 2622,
                        y: 1280
                    },
                    {
                        x: 2623,
                        y: 4676
                    },
                    {
                        x: 2624,
                        y: 621
                    },
                    {
                        x: 2625,
                        y: 3610
                    },
                    {
                        x: 2626,
                        y: 3426
                    },
                    {
                        x: 2627,
                        y: 610
                    },
                    {
                        x: 2628,
                        y: 1106
                    },
                    {
                        x: 2629,
                        y: 342
                    },
                    {
                        x: 2630,
                        y: 4519
                    },
                    {
                        x: 2631,
                        y: 3280
                    },
                    {
                        x: 2632,
                        y: 1872
                    },
                    {
                        x: 2633,
                        y: 2589
                    },
                    {
                        x: 2634,
                        y: 1737
                    },
                    {
                        x: 2635,
                        y: 2723
                    },
                    {
                        x: 2636,
                        y: 2171
                    },
                    {
                        x: 2637,
                        y: 419
                    },
                    {
                        x: 2638,
                        y: 4975
                    },
                    {
                        x: 2639,
                        y: 945
                    },
                    {
                        x: 2640,
                        y: 2100
                    },
                    {
                        x: 2641,
                        y: 3839
                    },
                    {
                        x: 2642,
                        y: 855
                    },
                    {
                        x: 2643,
                        y: 1419
                    },
                    {
                        x: 2644,
                        y: 2633
                    },
                    {
                        x: 2645,
                        y: 1538
                    },
                    {
                        x: 2646,
                        y: 1614
                    },
                    {
                        x: 2647,
                        y: 48
                    },
                    {
                        x: 2648,
                        y: 1842
                    },
                    {
                        x: 2649,
                        y: 1669
                    },
                    {
                        x: 2650,
                        y: 2530
                    },
                    {
                        x: 2651,
                        y: 3626
                    },
                    {
                        x: 2652,
                        y: 3745
                    },
                    {
                        x: 2653,
                        y: 4473
                    },
                    {
                        x: 2654,
                        y: 2782
                    },
                    {
                        x: 2655,
                        y: 4939
                    },
                    {
                        x: 2656,
                        y: 437
                    },
                    {
                        x: 2657,
                        y: 4550
                    },
                    {
                        x: 2658,
                        y: 4368
                    },
                    {
                        x: 2659,
                        y: 788
                    },
                    {
                        x: 2660,
                        y: 1196
                    },
                    {
                        x: 2661,
                        y: 1140
                    },
                    {
                        x: 2662,
                        y: 2186
                    },
                    {
                        x: 2663,
                        y: 44
                    },
                    {
                        x: 2664,
                        y: 2325
                    },
                    {
                        x: 2665,
                        y: 1885
                    },
                    {
                        x: 2666,
                        y: 2850
                    },
                    {
                        x: 2667,
                        y: 661
                    },
                    {
                        x: 2668,
                        y: 1188
                    },
                    {
                        x: 2669,
                        y: 2463
                    },
                    {
                        x: 2670,
                        y: 303
                    },
                    {
                        x: 2671,
                        y: 2921
                    },
                    {
                        x: 2672,
                        y: 3553
                    },
                    {
                        x: 2673,
                        y: 4153
                    },
                    {
                        x: 2674,
                        y: 2045
                    },
                    {
                        x: 2675,
                        y: 4290
                    },
                    {
                        x: 2676,
                        y: 819
                    },
                    {
                        x: 2677,
                        y: 1823
                    },
                    {
                        x: 2678,
                        y: 658
                    },
                    {
                        x: 2679,
                        y: 3074
                    },
                    {
                        x: 2680,
                        y: 4037
                    },
                    {
                        x: 2681,
                        y: 2
                    },
                    {
                        x: 2682,
                        y: 3922
                    },
                    {
                        x: 2683,
                        y: 31
                    },
                    {
                        x: 2684,
                        y: 4753
                    },
                    {
                        x: 2685,
                        y: 2185
                    },
                    {
                        x: 2686,
                        y: 2279
                    },
                    {
                        x: 2687,
                        y: 4173
                    },
                    {
                        x: 2688,
                        y: 3434
                    },
                    {
                        x: 2689,
                        y: 982
                    },
                    {
                        x: 2690,
                        y: 140
                    },
                    {
                        x: 2691,
                        y: 1947
                    },
                    {
                        x: 2692,
                        y: 1016
                    },
                    {
                        x: 2693,
                        y: 590
                    },
                    {
                        x: 2694,
                        y: 330
                    },
                    {
                        x: 2695,
                        y: 3854
                    },
                    {
                        x: 2696,
                        y: 4204
                    },
                    {
                        x: 2697,
                        y: 2892
                    },
                    {
                        x: 2698,
                        y: 3937
                    },
                    {
                        x: 2699,
                        y: 165
                    },
                    {
                        x: 2700,
                        y: 215
                    },
                    {
                        x: 2701,
                        y: 3793
                    },
                    {
                        x: 2702,
                        y: 151
                    },
                    {
                        x: 2703,
                        y: 4170
                    },
                    {
                        x: 2704,
                        y: 2298
                    },
                    {
                        x: 2705,
                        y: 263
                    },
                    {
                        x: 2706,
                        y: 1731
                    },
                    {
                        x: 2707,
                        y: 1215
                    },
                    {
                        x: 2708,
                        y: 763
                    },
                    {
                        x: 2709,
                        y: 3645
                    },
                    {
                        x: 2710,
                        y: 114
                    },
                    {
                        x: 2711,
                        y: 3859
                    },
                    {
                        x: 2712,
                        y: 2315
                    },
                    {
                        x: 2713,
                        y: 2262
                    },
                    {
                        x: 2714,
                        y: 4274
                    },
                    {
                        x: 2715,
                        y: 910
                    },
                    {
                        x: 2716,
                        y: 3831
                    },
                    {
                        x: 2717,
                        y: 1960
                    },
                    {
                        x: 2718,
                        y: 1877
                    },
                    {
                        x: 2719,
                        y: 1019
                    },
                    {
                        x: 2720,
                        y: 2592
                    },
                    {
                        x: 2721,
                        y: 2493
                    },
                    {
                        x: 2722,
                        y: 3518
                    },
                    {
                        x: 2723,
                        y: 4046
                    },
                    {
                        x: 2724,
                        y: 59
                    },
                    {
                        x: 2725,
                        y: 2702
                    },
                    {
                        x: 2726,
                        y: 1916
                    },
                    {
                        x: 2727,
                        y: 4869
                    },
                    {
                        x: 2728,
                        y: 194
                    },
                    {
                        x: 2729,
                        y: 663
                    },
                    {
                        x: 2730,
                        y: 4842
                    },
                    {
                        x: 2731,
                        y: 983
                    },
                    {
                        x: 2732,
                        y: 1914
                    },
                    {
                        x: 2733,
                        y: 56
                    },
                    {
                        x: 2734,
                        y: 4189
                    },
                    {
                        x: 2735,
                        y: 3780
                    },
                    {
                        x: 2736,
                        y: 4965
                    },
                    {
                        x: 2737,
                        y: 2184
                    },
                    {
                        x: 2738,
                        y: 2401
                    },
                    {
                        x: 2739,
                        y: 2846
                    },
                    {
                        x: 2740,
                        y: 2826
                    },
                    {
                        x: 2741,
                        y: 3278
                    },
                    {
                        x: 2742,
                        y: 1254
                    },
                    {
                        x: 2743,
                        y: 1197
                    },
                    {
                        x: 2744,
                        y: 2256
                    },
                    {
                        x: 2745,
                        y: 1748
                    },
                    {
                        x: 2746,
                        y: 4531
                    },
                    {
                        x: 2747,
                        y: 4066
                    },
                    {
                        x: 2748,
                        y: 4216
                    },
                    {
                        x: 2749,
                        y: 3314
                    },
                    {
                        x: 2750,
                        y: 1747
                    },
                    {
                        x: 2751,
                        y: 998
                    },
                    {
                        x: 2752,
                        y: 3348
                    },
                    {
                        x: 2753,
                        y: 3870
                    },
                    {
                        x: 2754,
                        y: 4751
                    },
                    {
                        x: 2755,
                        y: 2399
                    },
                    {
                        x: 2756,
                        y: 4540
                    },
                    {
                        x: 2757,
                        y: 3614
                    },
                    {
                        x: 2758,
                        y: 1553
                    },
                    {
                        x: 2759,
                        y: 851
                    },
                    {
                        x: 2760,
                        y: 2010
                    },
                    {
                        x: 2761,
                        y: 3030
                    },
                    {
                        x: 2762,
                        y: 1707
                    },
                    {
                        x: 2763,
                        y: 1097
                    },
                    {
                        x: 2764,
                        y: 2464
                    },
                    {
                        x: 2765,
                        y: 3594
                    },
                    {
                        x: 2766,
                        y: 3538
                    },
                    {
                        x: 2767,
                        y: 1678
                    },
                    {
                        x: 2768,
                        y: 4810
                    },
                    {
                        x: 2769,
                        y: 1535
                    },
                    {
                        x: 2770,
                        y: 310
                    },
                    {
                        x: 2771,
                        y: 3733
                    },
                    {
                        x: 2772,
                        y: 3992
                    },
                    {
                        x: 2773,
                        y: 4113
                    },
                    {
                        x: 2774,
                        y: 4617
                    },
                    {
                        x: 2775,
                        y: 3145
                    },
                    {
                        x: 2776,
                        y: 4156
                    },
                    {
                        x: 2777,
                        y: 3364
                    },
                    {
                        x: 2778,
                        y: 4455
                    },
                    {
                        x: 2779,
                        y: 630
                    },
                    {
                        x: 2780,
                        y: 1204
                    },
                    {
                        x: 2781,
                        y: 4139
                    },
                    {
                        x: 2782,
                        y: 561
                    },
                    {
                        x: 2783,
                        y: 283
                    },
                    {
                        x: 2784,
                        y: 1371
                    },
                    {
                        x: 2785,
                        y: 1763
                    },
                    {
                        x: 2786,
                        y: 1979
                    },
                    {
                        x: 2787,
                        y: 787
                    },
                    {
                        x: 2788,
                        y: 2828
                    },
                    {
                        x: 2789,
                        y: 3683
                    },
                    {
                        x: 2790,
                        y: 3784
                    },
                    {
                        x: 2791,
                        y: 1774
                    },
                    {
                        x: 2792,
                        y: 2649
                    },
                    {
                        x: 2793,
                        y: 2689
                    },
                    {
                        x: 2794,
                        y: 1365
                    },
                    {
                        x: 2795,
                        y: 519
                    },
                    {
                        x: 2796,
                        y: 3958
                    },
                    {
                        x: 2797,
                        y: 1058
                    },
                    {
                        x: 2798,
                        y: 3063
                    },
                    {
                        x: 2799,
                        y: 1690
                    },
                    {
                        x: 2800,
                        y: 232
                    },
                    {
                        x: 2801,
                        y: 2591
                    },
                    {
                        x: 2802,
                        y: 4778
                    },
                    {
                        x: 2803,
                        y: 2016
                    },
                    {
                        x: 2804,
                        y: 1592
                    },
                    {
                        x: 2805,
                        y: 4383
                    },
                    {
                        x: 2806,
                        y: 666
                    },
                    {
                        x: 2807,
                        y: 2481
                    },
                    {
                        x: 2808,
                        y: 1170
                    },
                    {
                        x: 2809,
                        y: 4174
                    },
                    {
                        x: 2810,
                        y: 3023
                    },
                    {
                        x: 2811,
                        y: 1338
                    },
                    {
                        x: 2812,
                        y: 4788
                    },
                    {
                        x: 2813,
                        y: 2521
                    },
                    {
                        x: 2814,
                        y: 2199
                    },
                    {
                        x: 2815,
                        y: 1134
                    },
                    {
                        x: 2816,
                        y: 3056
                    },
                    {
                        x: 2817,
                        y: 1424
                    },
                    {
                        x: 2818,
                        y: 4747
                    },
                    {
                        x: 2819,
                        y: 3143
                    },
                    {
                        x: 2820,
                        y: 4881
                    },
                    {
                        x: 2821,
                        y: 92
                    },
                    {
                        x: 2822,
                        y: 3989
                    },
                    {
                        x: 2823,
                        y: 1481
                    },
                    {
                        x: 2824,
                        y: 3704
                    },
                    {
                        x: 2825,
                        y: 4198
                    },
                    {
                        x: 2826,
                        y: 3345
                    },
                    {
                        x: 2827,
                        y: 2751
                    },
                    {
                        x: 2828,
                        y: 540
                    },
                    {
                        x: 2829,
                        y: 401
                    },
                    {
                        x: 2830,
                        y: 343
                    },
                    {
                        x: 2831,
                        y: 905
                    },
                    {
                        x: 2832,
                        y: 4518
                    },
                    {
                        x: 2833,
                        y: 2955
                    },
                    {
                        x: 2834,
                        y: 274
                    },
                    {
                        x: 2835,
                        y: 1870
                    },
                    {
                        x: 2836,
                        y: 2111
                    },
                    {
                        x: 2837,
                        y: 2770
                    },
                    {
                        x: 2838,
                        y: 1491
                    },
                    {
                        x: 2839,
                        y: 2736
                    },
                    {
                        x: 2840,
                        y: 1631
                    },
                    {
                        x: 2841,
                        y: 822
                    },
                    {
                        x: 2842,
                        y: 4740
                    },
                    {
                        x: 2843,
                        y: 3789
                    },
                    {
                        x: 2844,
                        y: 527
                    },
                    {
                        x: 2845,
                        y: 3613
                    },
                    {
                        x: 2846,
                        y: 3262
                    },
                    {
                        x: 2847,
                        y: 2943
                    },
                    {
                        x: 2848,
                        y: 1567
                    },
                    {
                        x: 2849,
                        y: 779
                    },
                    {
                        x: 2850,
                        y: 769
                    },
                    {
                        x: 2851,
                        y: 4826
                    },
                    {
                        x: 2852,
                        y: 4049
                    },
                    {
                        x: 2853,
                        y: 4277
                    },
                    {
                        x: 2854,
                        y: 3509
                    },
                    {
                        x: 2855,
                        y: 1656
                    },
                    {
                        x: 2856,
                        y: 2081
                    },
                    {
                        x: 2857,
                        y: 2445
                    },
                    {
                        x: 2858,
                        y: 3352
                    },
                    {
                        x: 2859,
                        y: 4529
                    },
                    {
                        x: 2860,
                        y: 637
                    },
                    {
                        x: 2861,
                        y: 2371
                    },
                    {
                        x: 2862,
                        y: 3852
                    },
                    {
                        x: 2863,
                        y: 2509
                    },
                    {
                        x: 2864,
                        y: 4276
                    },
                    {
                        x: 2865,
                        y: 287
                    },
                    {
                        x: 2866,
                        y: 75
                    },
                    {
                        x: 2867,
                        y: 3636
                    },
                    {
                        x: 2868,
                        y: 268
                    },
                    {
                        x: 2869,
                        y: 490
                    },
                    {
                        x: 2870,
                        y: 1111
                    },
                    {
                        x: 2871,
                        y: 3500
                    },
                    {
                        x: 2872,
                        y: 1934
                    },
                    {
                        x: 2873,
                        y: 1
                    },
                    {
                        x: 2874,
                        y: 4961
                    },
                    {
                        x: 2875,
                        y: 2452
                    },
                    {
                        x: 2876,
                        y: 84
                    },
                    {
                        x: 2877,
                        y: 1652
                    },
                    {
                        x: 2878,
                        y: 2333
                    },
                    {
                        x: 2879,
                        y: 2500
                    },
                    {
                        x: 2880,
                        y: 3879
                    },
                    {
                        x: 2881,
                        y: 2453
                    },
                    {
                        x: 2882,
                        y: 811
                    },
                    {
                        x: 2883,
                        y: 1959
                    },
                    {
                        x: 2884,
                        y: 3814
                    },
                    {
                        x: 2885,
                        y: 3905
                    },
                    {
                        x: 2886,
                        y: 4631
                    },
                    {
                        x: 2887,
                        y: 3125
                    },
                    {
                        x: 2888,
                        y: 3103
                    },
                    {
                        x: 2889,
                        y: 2342
                    },
                    {
                        x: 2890,
                        y: 1005
                    },
                    {
                        x: 2891,
                        y: 327
                    },
                    {
                        x: 2892,
                        y: 3327
                    },
                    {
                        x: 2893,
                        y: 1021
                    },
                    {
                        x: 2894,
                        y: 2377
                    },
                    {
                        x: 2895,
                        y: 3541
                    },
                    {
                        x: 2896,
                        y: 2296
                    },
                    {
                        x: 2897,
                        y: 1071
                    },
                    {
                        x: 2898,
                        y: 1171
                    },
                    {
                        x: 2899,
                        y: 3326
                    },
                    {
                        x: 2900,
                        y: 2447
                    },
                    {
                        x: 2901,
                        y: 4251
                    },
                    {
                        x: 2902,
                        y: 2684
                    },
                    {
                        x: 2903,
                        y: 1108
                    },
                    {
                        x: 2904,
                        y: 157
                    },
                    {
                        x: 2905,
                        y: 2180
                    },
                    {
                        x: 2906,
                        y: 3448
                    },
                    {
                        x: 2907,
                        y: 4298
                    },
                    {
                        x: 2908,
                        y: 4082
                    },
                    {
                        x: 2909,
                        y: 3633
                    },
                    {
                        x: 2910,
                        y: 4003
                    },
                    {
                        x: 2911,
                        y: 4579
                    },
                    {
                        x: 2912,
                        y: 1350
                    },
                    {
                        x: 2913,
                        y: 3830
                    },
                    {
                        x: 2914,
                        y: 2666
                    },
                    {
                        x: 2915,
                        y: 728
                    },
                    {
                        x: 2916,
                        y: 1013
                    },
                    {
                        x: 2917,
                        y: 1660
                    },
                    {
                        x: 2918,
                        y: 1047
                    },
                    {
                        x: 2919,
                        y: 3442
                    },
                    {
                        x: 2920,
                        y: 2924
                    },
                    {
                        x: 2921,
                        y: 3026
                    },
                    {
                        x: 2922,
                        y: 133
                    },
                    {
                        x: 2923,
                        y: 1556
                    },
                    {
                        x: 2924,
                        y: 2307
                    },
                    {
                        x: 2925,
                        y: 164
                    },
                    {
                        x: 2926,
                        y: 1345
                    },
                    {
                        x: 2927,
                        y: 1687
                    },
                    {
                        x: 2928,
                        y: 2365
                    },
                    {
                        x: 2929,
                        y: 1136
                    },
                    {
                        x: 2930,
                        y: 1772
                    },
                    {
                        x: 2931,
                        y: 3689
                    },
                    {
                        x: 2932,
                        y: 2790
                    },
                    {
                        x: 2933,
                        y: 1775
                    },
                    {
                        x: 2934,
                        y: 645
                    },
                    {
                        x: 2935,
                        y: 1118
                    },
                    {
                        x: 2936,
                        y: 3742
                    },
                    {
                        x: 2937,
                        y: 3944
                    },
                    {
                        x: 2938,
                        y: 2777
                    },
                    {
                        x: 2939,
                        y: 3207
                    },
                    {
                        x: 2940,
                        y: 2103
                    },
                    {
                        x: 2941,
                        y: 838
                    },
                    {
                        x: 2942,
                        y: 2707
                    },
                    {
                        x: 2943,
                        y: 4149
                    },
                    {
                        x: 2944,
                        y: 986
                    },
                    {
                        x: 2945,
                        y: 4763
                    },
                    {
                        x: 2946,
                        y: 3997
                    },
                    {
                        x: 2947,
                        y: 1034
                    },
                    {
                        x: 2948,
                        y: 1153
                    },
                    {
                        x: 2949,
                        y: 78
                    },
                    {
                        x: 2950,
                        y: 1534
                    },
                    {
                        x: 2951,
                        y: 1312
                    },
                    {
                        x: 2952,
                        y: 1306
                    },
                    {
                        x: 2953,
                        y: 2457
                    },
                    {
                        x: 2954,
                        y: 4161
                    },
                    {
                        x: 2955,
                        y: 2482
                    },
                    {
                        x: 2956,
                        y: 4494
                    },
                    {
                        x: 2957,
                        y: 908
                    },
                    {
                        x: 2958,
                        y: 3179
                    },
                    {
                        x: 2959,
                        y: 895
                    },
                    {
                        x: 2960,
                        y: 867
                    },
                    {
                        x: 2961,
                        y: 1571
                    },
                    {
                        x: 2962,
                        y: 638
                    },
                    {
                        x: 2963,
                        y: 4411
                    },
                    {
                        x: 2964,
                        y: 1867
                    },
                    {
                        x: 2965,
                        y: 3017
                    },
                    {
                        x: 2966,
                        y: 3892
                    },
                    {
                        x: 2967,
                        y: 1898
                    },
                    {
                        x: 2968,
                        y: 3483
                    },
                    {
                        x: 2969,
                        y: 2234
                    },
                    {
                        x: 2970,
                        y: 3334
                    },
                    {
                        x: 2971,
                        y: 3376
                    },
                    {
                        x: 2972,
                        y: 1133
                    },
                    {
                        x: 2973,
                        y: 3284
                    },
                    {
                        x: 2974,
                        y: 1476
                    },
                    {
                        x: 2975,
                        y: 4343
                    },
                    {
                        x: 2976,
                        y: 4145
                    },
                    {
                        x: 2977,
                        y: 3929
                    },
                    {
                        x: 2978,
                        y: 839
                    },
                    {
                        x: 2979,
                        y: 2271
                    },
                    {
                        x: 2980,
                        y: 160
                    },
                    {
                        x: 2981,
                        y: 447
                    },
                    {
                        x: 2982,
                        y: 652
                    },
                    {
                        x: 2983,
                        y: 672
                    },
                    {
                        x: 2984,
                        y: 384
                    },
                    {
                        x: 2985,
                        y: 4799
                    },
                    {
                        x: 2986,
                        y: 2107
                    },
                    {
                        x: 2987,
                        y: 3971
                    },
                    {
                        x: 2988,
                        y: 1943
                    },
                    {
                        x: 2989,
                        y: 2946
                    },
                    {
                        x: 2990,
                        y: 3242
                    },
                    {
                        x: 2991,
                        y: 507
                    },
                    {
                        x: 2992,
                        y: 3725
                    },
                    {
                        x: 2993,
                        y: 3451
                    },
                    {
                        x: 2994,
                        y: 1664
                    },
                    {
                        x: 2995,
                        y: 1343
                    },
                    {
                        x: 2996,
                        y: 1020
                    },
                    {
                        x: 2997,
                        y: 2895
                    },
                    {
                        x: 2998,
                        y: 3141
                    },
                    {
                        x: 2999,
                        y: 657
                    },
                    {
                        x: 3000,
                        y: 2641
                    },
                    {
                        x: 3001,
                        y: 1725
                    },
                    {
                        x: 3002,
                        y: 2047
                    },
                    {
                        x: 3003,
                        y: 2289
                    },
                    {
                        x: 3004,
                        y: 1128
                    },
                    {
                        x: 3005,
                        y: 730
                    },
                    {
                        x: 3006,
                        y: 102
                    },
                    {
                        x: 3007,
                        y: 600
                    },
                    {
                        x: 3008,
                        y: 407
                    },
                    {
                        x: 3009,
                        y: 1184
                    },
                    {
                        x: 3010,
                        y: 3456
                    },
                    {
                        x: 3011,
                        y: 1845
                    },
                    {
                        x: 3012,
                        y: 163
                    },
                    {
                        x: 3013,
                        y: 893
                    },
                    {
                        x: 3014,
                        y: 4665
                    },
                    {
                        x: 3015,
                        y: 3563
                    },
                    {
                        x: 3016,
                        y: 2469
                    },
                    {
                        x: 3017,
                        y: 4004
                    },
                    {
                        x: 3018,
                        y: 887
                    },
                    {
                        x: 3019,
                        y: 3422
                    },
                    {
                        x: 3020,
                        y: 95
                    },
                    {
                        x: 3021,
                        y: 1297
                    },
                    {
                        x: 3022,
                        y: 242
                    },
                    {
                        x: 3023,
                        y: 1630
                    },
                    {
                        x: 3024,
                        y: 1290
                    },
                    {
                        x: 3025,
                        y: 560
                    },
                    {
                        x: 3026,
                        y: 4371
                    },
                    {
                        x: 3027,
                        y: 4658
                    },
                    {
                        x: 3028,
                        y: 1213
                    },
                    {
                        x: 3029,
                        y: 3797
                    },
                    {
                        x: 3030,
                        y: 2269
                    },
                    {
                        x: 3031,
                        y: 2207
                    },
                    {
                        x: 3032,
                        y: 3654
                    },
                    {
                        x: 3033,
                        y: 3718
                    },
                    {
                        x: 3034,
                        y: 4896
                    },
                    {
                        x: 3035,
                        y: 4074
                    },
                    {
                        x: 3036,
                        y: 4283
                    },
                    {
                        x: 3037,
                        y: 456
                    },
                    {
                        x: 3038,
                        y: 3003
                    },
                    {
                        x: 3039,
                        y: 4600
                    },
                    {
                        x: 3040,
                        y: 4708
                    },
                    {
                        x: 3041,
                        y: 1514
                    },
                    {
                        x: 3042,
                        y: 3388
                    },
                    {
                        x: 3043,
                        y: 3014
                    },
                    {
                        x: 3044,
                        y: 3212
                    },
                    {
                        x: 3045,
                        y: 2865
                    },
                    {
                        x: 3046,
                        y: 1951
                    },
                    {
                        x: 3047,
                        y: 4110
                    },
                    {
                        x: 3048,
                        y: 3148
                    },
                    {
                        x: 3049,
                        y: 1053
                    },
                    {
                        x: 3050,
                        y: 3351
                    },
                    {
                        x: 3051,
                        y: 4504
                    },
                    {
                        x: 3052,
                        y: 1464
                    },
                    {
                        x: 3053,
                        y: 611
                    },
                    {
                        x: 3054,
                        y: 3547
                    },
                    {
                        x: 3055,
                        y: 3938
                    },
                    {
                        x: 3056,
                        y: 3864
                    },
                    {
                        x: 3057,
                        y: 4575
                    },
                    {
                        x: 3058,
                        y: 3964
                    },
                    {
                        x: 3059,
                        y: 4728
                    },
                    {
                        x: 3060,
                        y: 825
                    },
                    {
                        x: 3061,
                        y: 3316
                    },
                    {
                        x: 3062,
                        y: 2829
                    },
                    {
                        x: 3063,
                        y: 3285
                    },
                    {
                        x: 3064,
                        y: 1029
                    },
                    {
                        x: 3065,
                        y: 1261
                    },
                    {
                        x: 3066,
                        y: 3396
                    },
                    {
                        x: 3067,
                        y: 1354
                    },
                    {
                        x: 3068,
                        y: 2495
                    },
                    {
                        x: 3069,
                        y: 2178
                    },
                    {
                        x: 3070,
                        y: 4163
                    },
                    {
                        x: 3071,
                        y: 3269
                    },
                    {
                        x: 3072,
                        y: 569
                    },
                    {
                        x: 3073,
                        y: 3816
                    },
                    {
                        x: 3074,
                        y: 3606
                    },
                    {
                        x: 3075,
                        y: 3166
                    },
                    {
                        x: 3076,
                        y: 3220
                    },
                    {
                        x: 3077,
                        y: 3976
                    },
                    {
                        x: 3078,
                        y: 1998
                    },
                    {
                        x: 3079,
                        y: 510
                    },
                    {
                        x: 3080,
                        y: 3082
                    },
                    {
                        x: 3081,
                        y: 4500
                    },
                    {
                        x: 3082,
                        y: 2913
                    },
                    {
                        x: 3083,
                        y: 1270
                    },
                    {
                        x: 3084,
                        y: 204
                    },
                    {
                        x: 3085,
                        y: 2613
                    },
                    {
                        x: 3086,
                        y: 3897
                    },
                    {
                        x: 3087,
                        y: 4487
                    },
                    {
                        x: 3088,
                        y: 925
                    },
                    {
                        x: 3089,
                        y: 868
                    },
                    {
                        x: 3090,
                        y: 2155
                    },
                    {
                        x: 3091,
                        y: 4846
                    },
                    {
                        x: 3092,
                        y: 988
                    },
                    {
                        x: 3093,
                        y: 2798
                    },
                    {
                        x: 3094,
                        y: 2635
                    },
                    {
                        x: 3095,
                        y: 4115
                    },
                    {
                        x: 3096,
                        y: 4555
                    },
                    {
                        x: 3097,
                        y: 876
                    },
                    {
                        x: 3098,
                        y: 3020
                    },
                    {
                        x: 3099,
                        y: 1064
                    },
                    {
                        x: 3100,
                        y: 1832
                    },
                    {
                        x: 3101,
                        y: 4250
                    },
                    {
                        x: 3102,
                        y: 1273
                    },
                    {
                        x: 3103,
                        y: 697
                    },
                    {
                        x: 3104,
                        y: 2153
                    },
                    {
                        x: 3105,
                        y: 965
                    },
                    {
                        x: 3106,
                        y: 3885
                    },
                    {
                        x: 3107,
                        y: 568
                    },
                    {
                        x: 3108,
                        y: 2629
                    },
                    {
                        x: 3109,
                        y: 726
                    },
                    {
                        x: 3110,
                        y: 3676
                    },
                    {
                        x: 3111,
                        y: 360
                    },
                    {
                        x: 3112,
                        y: 3580
                    },
                    {
                        x: 3113,
                        y: 974
                    },
                    {
                        x: 3114,
                        y: 4949
                    },
                    {
                        x: 3115,
                        y: 37
                    },
                    {
                        x: 3116,
                        y: 2562
                    },
                    {
                        x: 3117,
                        y: 2571
                    },
                    {
                        x: 3118,
                        y: 795
                    },
                    {
                        x: 3119,
                        y: 3185
                    },
                    {
                        x: 3120,
                        y: 42
                    },
                    {
                        x: 3121,
                        y: 4372
                    },
                    {
                        x: 3122,
                        y: 3504
                    },
                    {
                        x: 3123,
                        y: 4526
                    },
                    {
                        x: 3124,
                        y: 3360
                    },
                    {
                        x: 3125,
                        y: 2000
                    },
                    {
                        x: 3126,
                        y: 1132
                    },
                    {
                        x: 3127,
                        y: 3268
                    },
                    {
                        x: 3128,
                        y: 739
                    },
                    {
                        x: 3129,
                        y: 4393
                    },
                    {
                        x: 3130,
                        y: 4303
                    },
                    {
                        x: 3131,
                        y: 1509
                    },
                    {
                        x: 3132,
                        y: 3678
                    },
                    {
                        x: 3133,
                        y: 1344
                    },
                    {
                        x: 3134,
                        y: 1423
                    },
                    {
                        x: 3135,
                        y: 2812
                    },
                    {
                        x: 3136,
                        y: 3015
                    },
                    {
                        x: 3137,
                        y: 4573
                    },
                    {
                        x: 3138,
                        y: 4392
                    },
                    {
                        x: 3139,
                        y: 4155
                    },
                    {
                        x: 3140,
                        y: 2906
                    },
                    {
                        x: 3141,
                        y: 4732
                    },
                    {
                        x: 3142,
                        y: 3089
                    },
                    {
                        x: 3143,
                        y: 939
                    },
                    {
                        x: 3144,
                        y: 572
                    },
                    {
                        x: 3145,
                        y: 1878
                    },
                    {
                        x: 3146,
                        y: 4486
                    },
                    {
                        x: 3147,
                        y: 1632
                    },
                    {
                        x: 3148,
                        y: 1578
                    },
                    {
                        x: 3149,
                        y: 1352
                    },
                    {
                        x: 3150,
                        y: 714
                    },
                    {
                        x: 3151,
                        y: 2340
                    },
                    {
                        x: 3152,
                        y: 2055
                    },
                    {
                        x: 3153,
                        y: 4030
                    },
                    {
                        x: 3154,
                        y: 662
                    },
                    {
                        x: 3155,
                        y: 4470
                    },
                    {
                        x: 3156,
                        y: 3779
                    },
                    {
                        x: 3157,
                        y: 2583
                    },
                    {
                        x: 3158,
                        y: 1802
                    },
                    {
                        x: 3159,
                        y: 973
                    },
                    {
                        x: 3160,
                        y: 11
                    },
                    {
                        x: 3161,
                        y: 3008
                    },
                    {
                        x: 3162,
                        y: 2919
                    },
                    {
                        x: 3163,
                        y: 4105
                    },
                    {
                        x: 3164,
                        y: 3383
                    },
                    {
                        x: 3165,
                        y: 203
                    },
                    {
                        x: 3166,
                        y: 1599
                    },
                    {
                        x: 3167,
                        y: 2835
                    },
                    {
                        x: 3168,
                        y: 636
                    },
                    {
                        x: 3169,
                        y: 3394
                    },
                    {
                        x: 3170,
                        y: 2605
                    },
                    {
                        x: 3171,
                        y: 32
                    },
                    {
                        x: 3172,
                        y: 4680
                    },
                    {
                        x: 3173,
                        y: 659
                    },
                    {
                        x: 3174,
                        y: 4407
                    },
                    {
                        x: 3175,
                        y: 2855
                    },
                    {
                        x: 3176,
                        y: 4666
                    },
                    {
                        x: 3177,
                        y: 2133
                    },
                    {
                        x: 3178,
                        y: 1849
                    },
                    {
                        x: 3179,
                        y: 2353
                    },
                    {
                        x: 3180,
                        y: 4867
                    },
                    {
                        x: 3181,
                        y: 890
                    },
                    {
                        x: 3182,
                        y: 1637
                    },
                    {
                        x: 3183,
                        y: 1163
                    },
                    {
                        x: 3184,
                        y: 2162
                    },
                    {
                        x: 3185,
                        y: 4511
                    },
                    {
                        x: 3186,
                        y: 3359
                    },
                    {
                        x: 3187,
                        y: 256
                    },
                    {
                        x: 3188,
                        y: 4922
                    },
                    {
                        x: 3189,
                        y: 4381
                    },
                    {
                        x: 3190,
                        y: 3000
                    },
                    {
                        x: 3191,
                        y: 2019
                    },
                    {
                        x: 3192,
                        y: 1723
                    },
                    {
                        x: 3193,
                        y: 158
                    },
                    {
                        x: 3194,
                        y: 3827
                    },
                    {
                        x: 3195,
                        y: 4655
                    },
                    {
                        x: 3196,
                        y: 309
                    },
                    {
                        x: 3197,
                        y: 2690
                    },
                    {
                        x: 3198,
                        y: 1327
                    },
                    {
                        x: 3199,
                        y: 993
                    },
                    {
                        x: 3200,
                        y: 4239
                    },
                    {
                        x: 3201,
                        y: 1912
                    },
                    {
                        x: 3202,
                        y: 1073
                    },
                    {
                        x: 3203,
                        y: 4572
                    },
                    {
                        x: 3204,
                        y: 953
                    },
                    {
                        x: 3205,
                        y: 132
                    },
                    {
                        x: 3206,
                        y: 978
                    },
                    {
                        x: 3207,
                        y: 3735
                    },
                    {
                        x: 3208,
                        y: 1393
                    },
                    {
                        x: 3209,
                        y: 217
                    },
                    {
                        x: 3210,
                        y: 4976
                    },
                    {
                        x: 3211,
                        y: 170
                    },
                    {
                        x: 3212,
                        y: 1076
                    },
                    {
                        x: 3213,
                        y: 3286
                    },
                    {
                        x: 3214,
                        y: 3698
                    },
                    {
                        x: 3215,
                        y: 1004
                    },
                    {
                        x: 3216,
                        y: 2219
                    },
                    {
                        x: 3217,
                        y: 2384
                    },
                    {
                        x: 3218,
                        y: 2682
                    },
                    {
                        x: 3219,
                        y: 3690
                    },
                    {
                        x: 3220,
                        y: 2011
                    },
                    {
                        x: 3221,
                        y: 835
                    },
                    {
                        x: 3222,
                        y: 3161
                    },
                    {
                        x: 3223,
                        y: 3959
                    },
                    {
                        x: 3224,
                        y: 493
                    },
                    {
                        x: 3225,
                        y: 1402
                    },
                    {
                        x: 3226,
                        y: 1360
                    },
                    {
                        x: 3227,
                        y: 237
                    },
                    {
                        x: 3228,
                        y: 738
                    },
                    {
                        x: 3229,
                        y: 4558
                    },
                    {
                        x: 3230,
                        y: 1500
                    },
                    {
                        x: 3231,
                        y: 2009
                    },
                    {
                        x: 3232,
                        y: 4521
                    },
                    {
                        x: 3233,
                        y: 809
                    },
                    {
                        x: 3234,
                        y: 3036
                    },
                    {
                        x: 3235,
                        y: 2078
                    },
                    {
                        x: 3236,
                        y: 1078
                    },
                    {
                        x: 3237,
                        y: 122
                    },
                    {
                        x: 3238,
                        y: 2080
                    },
                    {
                        x: 3239,
                        y: 414
                    },
                    {
                        x: 3240,
                        y: 2540
                    },
                    {
                        x: 3241,
                        y: 2729
                    },
                    {
                        x: 3242,
                        y: 1479
                    },
                    {
                        x: 3243,
                        y: 4614
                    },
                    {
                        x: 3244,
                        y: 4615
                    },
                    {
                        x: 3245,
                        y: 4862
                    },
                    {
                        x: 3246,
                        y: 2567
                    },
                    {
                        x: 3247,
                        y: 2314
                    },
                    {
                        x: 3248,
                        y: 1359
                    },
                    {
                        x: 3249,
                        y: 1183
                    },
                    {
                        x: 3250,
                        y: 1991
                    },
                    {
                        x: 3251,
                        y: 4387
                    },
                    {
                        x: 3252,
                        y: 2424
                    },
                    {
                        x: 3253,
                        y: 1526
                    },
                    {
                        x: 3254,
                        y: 3214
                    },
                    {
                        x: 3255,
                        y: 2599
                    },
                    {
                        x: 3256,
                        y: 3835
                    },
                    {
                        x: 3257,
                        y: 2182
                    },
                    {
                        x: 3258,
                        y: 4272
                    },
                    {
                        x: 3259,
                        y: 2433
                    },
                    {
                        x: 3260,
                        y: 1065
                    },
                    {
                        x: 3261,
                        y: 3201
                    },
                    {
                        x: 3262,
                        y: 1736
                    },
                    {
                        x: 3263,
                        y: 2868
                    },
                    {
                        x: 3264,
                        y: 2465
                    },
                    {
                        x: 3265,
                        y: 4513
                    },
                    {
                        x: 3266,
                        y: 2833
                    },
                    {
                        x: 3267,
                        y: 2851
                    },
                    {
                        x: 3268,
                        y: 2651
                    },
                    {
                        x: 3269,
                        y: 4414
                    },
                    {
                        x: 3270,
                        y: 127
                    },
                    {
                        x: 3271,
                        y: 2301
                    },
                    {
                        x: 3272,
                        y: 1973
                    },
                    {
                        x: 3273,
                        y: 4982
                    },
                    {
                        x: 3274,
                        y: 1294
                    },
                    {
                        x: 3275,
                        y: 4659
                    },
                    {
                        x: 3276,
                        y: 4525
                    },
                    {
                        x: 3277,
                        y: 886
                    },
                    {
                        x: 3278,
                        y: 4178
                    },
                    {
                        x: 3279,
                        y: 1307
                    },
                    {
                        x: 3280,
                        y: 871
                    },
                    {
                        x: 3281,
                        y: 3869
                    },
                    {
                        x: 3282,
                        y: 716
                    },
                    {
                        x: 3283,
                        y: 4971
                    },
                    {
                        x: 3284,
                        y: 668
                    },
                    {
                        x: 3285,
                        y: 1214
                    },
                    {
                        x: 3286,
                        y: 4446
                    },
                    {
                        x: 3287,
                        y: 3876
                    },
                    {
                        x: 3288,
                        y: 3246
                    },
                    {
                        x: 3289,
                        y: 1846
                    },
                    {
                        x: 3290,
                        y: 4438
                    },
                    {
                        x: 3291,
                        y: 2254
                    },
                    {
                        x: 3292,
                        y: 3113
                    },
                    {
                        x: 3293,
                        y: 526
                    },
                    {
                        x: 3294,
                        y: 1208
                    },
                    {
                        x: 3295,
                        y: 1978
                    },
                    {
                        x: 3296,
                        y: 4983
                    },
                    {
                        x: 3297,
                        y: 3695
                    },
                    {
                        x: 3298,
                        y: 3324
                    },
                    {
                        x: 3299,
                        y: 1530
                    },
                    {
                        x: 3300,
                        y: 1976
                    },
                    {
                        x: 3301,
                        y: 3513
                    },
                    {
                        x: 3302,
                        y: 4340
                    },
                    {
                        x: 3303,
                        y: 546
                    },
                    {
                        x: 3304,
                        y: 3040
                    },
                    {
                        x: 3305,
                        y: 2440
                    },
                    {
                        x: 3306,
                        y: 358
                    },
                    {
                        x: 3307,
                        y: 2460
                    },
                    {
                        x: 3308,
                        y: 4324
                    },
                    {
                        x: 3309,
                        y: 3706
                    },
                    {
                        x: 3310,
                        y: 4111
                    },
                    {
                        x: 3311,
                        y: 3746
                    },
                    {
                        x: 3312,
                        y: 3494
                    },
                    {
                        x: 3313,
                        y: 3206
                    },
                    {
                        x: 3314,
                        y: 4629
                    },
                    {
                        x: 3315,
                        y: 2519
                    },
                    {
                        x: 3316,
                        y: 3974
                    },
                    {
                        x: 3317,
                        y: 4543
                    },
                    {
                        x: 3318,
                        y: 1626
                    },
                    {
                        x: 3319,
                        y: 3593
                    },
                    {
                        x: 3320,
                        y: 1881
                    },
                    {
                        x: 3321,
                        y: 2135
                    },
                    {
                        x: 3322,
                        y: 3794
                    },
                    {
                        x: 3323,
                        y: 1796
                    },
                    {
                        x: 3324,
                        y: 597
                    },
                    {
                        x: 3325,
                        y: 4166
                    },
                    {
                        x: 3326,
                        y: 4119
                    },
                    {
                        x: 3327,
                        y: 783
                    },
                    {
                        x: 3328,
                        y: 4991
                    },
                    {
                        x: 3329,
                        y: 2056
                    },
                    {
                        x: 3330,
                        y: 3189
                    },
                    {
                        x: 3331,
                        y: 288
                    },
                    {
                        x: 3332,
                        y: 2459
                    },
                    {
                        x: 3333,
                        y: 3198
                    },
                    {
                        x: 3334,
                        y: 315
                    },
                    {
                        x: 3335,
                        y: 2760
                    },
                    {
                        x: 3336,
                        y: 2063
                    },
                    {
                        x: 3337,
                        y: 4374
                    },
                    {
                        x: 3338,
                        y: 3054
                    },
                    {
                        x: 3339,
                        y: 1407
                    },
                    {
                        x: 3340,
                        y: 777
                    },
                    {
                        x: 3341,
                        y: 3506
                    },
                    {
                        x: 3342,
                        y: 391
                    },
                    {
                        x: 3343,
                        y: 1703
                    },
                    {
                        x: 3344,
                        y: 1942
                    },
                    {
                        x: 3345,
                        y: 3127
                    },
                    {
                        x: 3346,
                        y: 2898
                    },
                    {
                        x: 3347,
                        y: 1249
                    },
                    {
                        x: 3348,
                        y: 4628
                    },
                    {
                        x: 3349,
                        y: 2888
                    },
                    {
                        x: 3350,
                        y: 2734
                    },
                    {
                        x: 3351,
                        y: 772
                    },
                    {
                        x: 3352,
                        y: 2607
                    },
                    {
                        x: 3353,
                        y: 2818
                    },
                    {
                        x: 3354,
                        y: 1694
                    },
                    {
                        x: 3355,
                        y: 2092
                    },
                    {
                        x: 3356,
                        y: 4128
                    },
                    {
                        x: 3357,
                        y: 1110
                    },
                    {
                        x: 3358,
                        y: 1741
                    },
                    {
                        x: 3359,
                        y: 2796
                    },
                    {
                        x: 3360,
                        y: 3182
                    },
                    {
                        x: 3361,
                        y: 471
                    },
                    {
                        x: 3362,
                        y: 4084
                    },
                    {
                        x: 3363,
                        y: 1837
                    },
                    {
                        x: 3364,
                        y: 1181
                    },
                    {
                        x: 3365,
                        y: 4607
                    },
                    {
                        x: 3366,
                        y: 4729
                    },
                    {
                        x: 3367,
                        y: 2454
                    },
                    {
                        x: 3368,
                        y: 2124
                    },
                    {
                        x: 3369,
                        y: 4609
                    },
                    {
                        x: 3370,
                        y: 4103
                    },
                    {
                        x: 3371,
                        y: 1547
                    },
                    {
                        x: 3372,
                        y: 1428
                    },
                    {
                        x: 3373,
                        y: 3077
                    },
                    {
                        x: 3374,
                        y: 3493
                    },
                    {
                        x: 3375,
                        y: 3994
                    },
                    {
                        x: 3376,
                        y: 3786
                    },
                    {
                        x: 3377,
                        y: 3824
                    },
                    {
                        x: 3378,
                        y: 2343
                    },
                    {
                        x: 3379,
                        y: 2258
                    },
                    {
                        x: 3380,
                        y: 1487
                    },
                    {
                        x: 3381,
                        y: 1928
                    },
                    {
                        x: 3382,
                        y: 915
                    },
                    {
                        x: 3383,
                        y: 1635
                    },
                    {
                        x: 3384,
                        y: 760
                    },
                    {
                        x: 3385,
                        y: 506
                    },
                    {
                        x: 3386,
                        y: 4972
                    },
                    {
                        x: 3387,
                        y: 1022
                    },
                    {
                        x: 3388,
                        y: 4908
                    },
                    {
                        x: 3389,
                        y: 1820
                    },
                    {
                        x: 3390,
                        y: 153
                    },
                    {
                        x: 3391,
                        y: 1977
                    },
                    {
                        x: 3392,
                        y: 3871
                    },
                    {
                        x: 3393,
                        y: 1017
                    },
                    {
                        x: 3394,
                        y: 1094
                    },
                    {
                        x: 3395,
                        y: 2512
                    },
                    {
                        x: 3396,
                        y: 4924
                    },
                    {
                        x: 3397,
                        y: 3265
                    },
                    {
                        x: 3398,
                        y: 4839
                    },
                    {
                        x: 3399,
                        y: 4703
                    },
                    {
                        x: 3400,
                        y: 660
                    },
                    {
                        x: 3401,
                        y: 4280
                    },
                    {
                        x: 3402,
                        y: 28
                    },
                    {
                        x: 3403,
                        y: 1429
                    },
                    {
                        x: 3404,
                        y: 1103
                    },
                    {
                        x: 3405,
                        y: 2853
                    },
                    {
                        x: 3406,
                        y: 3130
                    },
                    {
                        x: 3407,
                        y: 2878
                    },
                    {
                        x: 3408,
                        y: 4864
                    },
                    {
                        x: 3409,
                        y: 3459
                    },
                    {
                        x: 3410,
                        y: 4390
                    },
                    {
                        x: 3411,
                        y: 1490
                    },
                    {
                        x: 3412,
                        y: 967
                    },
                    {
                        x: 3413,
                        y: 1648
                    },
                    {
                        x: 3414,
                        y: 737
                    },
                    {
                        x: 3415,
                        y: 4684
                    },
                    {
                        x: 3416,
                        y: 4261
                    },
                    {
                        x: 3417,
                        y: 1662
                    },
                    {
                        x: 3418,
                        y: 4913
                    },
                    {
                        x: 3419,
                        y: 2525
                    },
                    {
                        x: 3420,
                        y: 1072
                    },
                    {
                        x: 3421,
                        y: 3655
                    },
                    {
                        x: 3422,
                        y: 814
                    },
                    {
                        x: 3423,
                        y: 2163
                    },
                    {
                        x: 3424,
                        y: 1279
                    },
                    {
                        x: 3425,
                        y: 2499
                    },
                    {
                        x: 3426,
                        y: 1285
                    },
                    {
                        x: 3427,
                        y: 3446
                    },
                    {
                        x: 3428,
                        y: 2179
                    },
                    {
                        x: 3429,
                        y: 4775
                    },
                    {
                        x: 3430,
                        y: 4731
                    },
                    {
                        x: 3431,
                        y: 570
                    },
                    {
                        x: 3432,
                        y: 4294
                    },
                    {
                        x: 3433,
                        y: 4240
                    },
                    {
                        x: 3434,
                        y: 4109
                    },
                    {
                        x: 3435,
                        y: 635
                    },
                    {
                        x: 3436,
                        y: 3926
                    },
                    {
                        x: 3437,
                        y: 723
                    },
                    {
                        x: 3438,
                        y: 4140
                    },
                    {
                        x: 3439,
                        y: 2547
                    },
                    {
                        x: 3440,
                        y: 3809
                    },
                    {
                        x: 3441,
                        y: 3079
                    },
                    {
                        x: 3442,
                        y: 4454
                    },
                    {
                        x: 3443,
                        y: 2397
                    },
                    {
                        x: 3444,
                        y: 4522
                    },
                    {
                        x: 3445,
                        y: 2280
                    },
                    {
                        x: 3446,
                        y: 1287
                    },
                    {
                        x: 3447,
                        y: 2389
                    },
                    {
                        x: 3448,
                        y: 3301
                    },
                    {
                        x: 3449,
                        y: 4608
                    },
                    {
                        x: 3450,
                        y: 2421
                    },
                    {
                        x: 3451,
                        y: 3817
                    },
                    {
                        x: 3452,
                        y: 4440
                    },
                    {
                        x: 3453,
                        y: 3232
                    },
                    {
                        x: 3454,
                        y: 4989
                    },
                    {
                        x: 3455,
                        y: 3392
                    },
                    {
                        x: 3456,
                        y: 2249
                    },
                    {
                        x: 3457,
                        y: 3866
                    },
                    {
                        x: 3458,
                        y: 3399
                    },
                    {
                        x: 3459,
                        y: 4840
                    },
                    {
                        x: 3460,
                        y: 2037
                    },
                    {
                        x: 3461,
                        y: 4288
                    },
                    {
                        x: 3462,
                        y: 1452
                    },
                    {
                        x: 3463,
                        y: 1040
                    },
                    {
                        x: 3464,
                        y: 2528
                    },
                    {
                        x: 3465,
                        y: 4287
                    },
                    {
                        x: 3466,
                        y: 4234
                    },
                    {
                        x: 3467,
                        y: 1152
                    },
                    {
                        x: 3468,
                        y: 4889
                    },
                    {
                        x: 3469,
                        y: 3950
                    },
                    {
                        x: 3470,
                        y: 731
                    },
                    {
                        x: 3471,
                        y: 2319
                    },
                    {
                        x: 3472,
                        y: 4347
                    },
                    {
                        x: 3473,
                        y: 3331
                    },
                    {
                        x: 3474,
                        y: 4710
                    },
                    {
                        x: 3475,
                        y: 2809
                    },
                    {
                        x: 3476,
                        y: 280
                    },
                    {
                        x: 3477,
                        y: 4704
                    },
                    {
                        x: 3478,
                        y: 906
                    },
                    {
                        x: 3479,
                        y: 1524
                    },
                    {
                        x: 3480,
                        y: 678
                    },
                    {
                        x: 3481,
                        y: 2406
                    },
                    {
                        x: 3482,
                        y: 3592
                    },
                    {
                        x: 3483,
                        y: 4652
                    },
                    {
                        x: 3484,
                        y: 2386
                    },
                    {
                        x: 3485,
                        y: 1116
                    },
                    {
                        x: 3486,
                        y: 3549
                    },
                    {
                        x: 3487,
                        y: 799
                    },
                    {
                        x: 3488,
                        y: 4863
                    },
                    {
                        x: 3489,
                        y: 262
                    },
                    {
                        x: 3490,
                        y: 1441
                    },
                    {
                        x: 3491,
                        y: 2508
                    },
                    {
                        x: 3492,
                        y: 1330
                    },
                    {
                        x: 3493,
                        y: 3896
                    },
                    {
                        x: 3494,
                        y: 4230
                    },
                    {
                        x: 3495,
                        y: 2954
                    },
                    {
                        x: 3496,
                        y: 4828
                    },
                    {
                        x: 3497,
                        y: 4011
                    },
                    {
                        x: 3498,
                        y: 4800
                    },
                    {
                        x: 3499,
                        y: 916
                    },
                    {
                        x: 3500,
                        y: 196
                    },
                    {
                        x: 3501,
                        y: 4348
                    },
                    {
                        x: 3502,
                        y: 4664
                    },
                    {
                        x: 3503,
                        y: 550
                    },
                    {
                        x: 3504,
                        y: 3753
                    },
                    {
                        x: 3505,
                        y: 2979
                    },
                    {
                        x: 3506,
                        y: 1988
                    },
                    {
                        x: 3507,
                        y: 3251
                    },
                    {
                        x: 3508,
                        y: 1234
                    },
                    {
                        x: 3509,
                        y: 857
                    },
                    {
                        x: 3510,
                        y: 4225
                    },
                    {
                        x: 3511,
                        y: 2891
                    },
                    {
                        x: 3512,
                        y: 3881
                    },
                    {
                        x: 3513,
                        y: 4197
                    },
                    {
                        x: 3514,
                        y: 4777
                    },
                    {
                        x: 3515,
                        y: 1689
                    },
                    {
                        x: 3516,
                        y: 1672
                    },
                    {
                        x: 3517,
                        y: 1986
                    },
                    {
                        x: 3518,
                        y: 2761
                    },
                    {
                        x: 3519,
                        y: 912
                    },
                    {
                        x: 3520,
                        y: 1164
                    },
                    {
                        x: 3521,
                        y: 4744
                    },
                    {
                        x: 3522,
                        y: 4887
                    },
                    {
                        x: 3523,
                        y: 3104
                    },
                    {
                        x: 3524,
                        y: 1984
                    },
                    {
                        x: 3525,
                        y: 2403
                    },
                    {
                        x: 3526,
                        y: 3983
                    },
                    {
                        x: 3527,
                        y: 260
                    },
                    {
                        x: 3528,
                        y: 2506
                    },
                    {
                        x: 3529,
                        y: 2341
                    },
                    {
                        x: 3530,
                        y: 1394
                    },
                    {
                        x: 3531,
                        y: 3503
                    },
                    {
                        x: 3532,
                        y: 3222
                    },
                    {
                        x: 3533,
                        y: 3211
                    },
                    {
                        x: 3534,
                        y: 4394
                    },
                    {
                        x: 3535,
                        y: 1722
                    },
                    {
                        x: 3536,
                        y: 1826
                    },
                    {
                        x: 3537,
                        y: 703
                    },
                    {
                        x: 3538,
                        y: 4541
                    },
                    {
                        x: 3539,
                        y: 2173
                    },
                    {
                        x: 3540,
                        y: 1289
                    },
                    {
                        x: 3541,
                        y: 4723
                    },
                    {
                        x: 3542,
                        y: 1788
                    },
                    {
                        x: 3543,
                        y: 746
                    },
                    {
                        x: 3544,
                        y: 3390
                    },
                    {
                        x: 3545,
                        y: 4898
                    },
                    {
                        x: 3546,
                        y: 991
                    },
                    {
                        x: 3547,
                        y: 2300
                    },
                    {
                        x: 3548,
                        y: 1766
                    },
                    {
                        x: 3549,
                        y: 4726
                    },
                    {
                        x: 3550,
                        y: 997
                    },
                    {
                        x: 3551,
                        y: 213
                    },
                    {
                        x: 3552,
                        y: 2278
                    },
                    {
                        x: 3553,
                        y: 485
                    },
                    {
                        x: 3554,
                        y: 3625
                    },
                    {
                        x: 3555,
                        y: 4876
                    },
                    {
                        x: 3556,
                        y: 209
                    },
                    {
                        x: 3557,
                        y: 2225
                    },
                    {
                        x: 3558,
                        y: 1037
                    },
                    {
                        x: 3559,
                        y: 1220
                    },
                    {
                        x: 3560,
                        y: 1050
                    },
                    {
                        x: 3561,
                        y: 334
                    },
                    {
                        x: 3562,
                        y: 38
                    },
                    {
                        x: 3563,
                        y: 1995
                    },
                    {
                        x: 3564,
                        y: 3379
                    },
                    {
                        x: 3565,
                        y: 2957
                    },
                    {
                        x: 3566,
                        y: 305
                    },
                    {
                        x: 3567,
                        y: 4041
                    },
                    {
                        x: 3568,
                        y: 1275
                    },
                    {
                        x: 3569,
                        y: 3582
                    },
                    {
                        x: 3570,
                        y: 1818
                    },
                    {
                        x: 3571,
                        y: 785
                    },
                    {
                        x: 3572,
                        y: 1159
                    },
                    {
                        x: 3573,
                        y: 4330
                    },
                    {
                        x: 3574,
                        y: 1416
                    },
                    {
                        x: 3575,
                        y: 2753
                    },
                    {
                        x: 3576,
                        y: 3356
                    },
                    {
                        x: 3577,
                        y: 1332
                    },
                    {
                        x: 3578,
                        y: 1905
                    },
                    {
                        x: 3579,
                        y: 4275
                    },
                    {
                        x: 3580,
                        y: 4039
                    },
                    {
                        x: 3581,
                        y: 2581
                    },
                    {
                        x: 3582,
                        y: 1174
                    },
                    {
                        x: 3583,
                        y: 4492
                    },
                    {
                        x: 3584,
                        y: 2578
                    },
                    {
                        x: 3585,
                        y: 1194
                    },
                    {
                        x: 3586,
                        y: 2889
                    },
                    {
                        x: 3587,
                        y: 4382
                    },
                    {
                        x: 3588,
                        y: 1619
                    },
                    {
                        x: 3589,
                        y: 2274
                    },
                    {
                        x: 3590,
                        y: 1868
                    },
                    {
                        x: 3591,
                        y: 941
                    },
                    {
                        x: 3592,
                        y: 4040
                    },
                    {
                        x: 3593,
                        y: 4683
                    },
                    {
                        x: 3594,
                        y: 3007
                    },
                    {
                        x: 3595,
                        y: 882
                    },
                    {
                        x: 3596,
                        y: 1458
                    },
                    {
                        x: 3597,
                        y: 3159
                    },
                    {
                        x: 3598,
                        y: 3258
                    },
                    {
                        x: 3599,
                        y: 2002
                    },
                    {
                        x: 3600,
                        y: 2956
                    },
                    {
                        x: 3601,
                        y: 1278
                    },
                    {
                        x: 3602,
                        y: 1915
                    },
                    {
                        x: 3603,
                        y: 1399
                    },
                    {
                        x: 3604,
                        y: 4623
                    },
                    {
                        x: 3605,
                        y: 4653
                    },
                    {
                        x: 3606,
                        y: 3028
                    },
                    {
                        x: 3607,
                        y: 2884
                    },
                    {
                        x: 3608,
                        y: 3358
                    },
                    {
                        x: 3609,
                        y: 3081
                    },
                    {
                        x: 3610,
                        y: 1282
                    },
                    {
                        x: 3611,
                        y: 4877
                    },
                    {
                        x: 3612,
                        y: 3686
                    },
                    {
                        x: 3613,
                        y: 4093
                    },
                    {
                        x: 3614,
                        y: 3083
                    },
                    {
                        x: 3615,
                        y: 3853
                    },
                    {
                        x: 3616,
                        y: 1392
                    },
                    {
                        x: 3617,
                        y: 4850
                    },
                    {
                        x: 3618,
                        y: 4027
                    },
                    {
                        x: 3619,
                        y: 1919
                    },
                    {
                        x: 3620,
                        y: 856
                    },
                    {
                        x: 3621,
                        y: 177
                    },
                    {
                        x: 3622,
                        y: 3501
                    },
                    {
                        x: 3623,
                        y: 3481
                    },
                    {
                        x: 3624,
                        y: 504
                    },
                    {
                        x: 3625,
                        y: 803
                    },
                    {
                        x: 3626,
                        y: 1502
                    },
                    {
                        x: 3627,
                        y: 4770
                    },
                    {
                        x: 3628,
                        y: 580
                    },
                    {
                        x: 3629,
                        y: 482
                    },
                    {
                        x: 3630,
                        y: 4674
                    },
                    {
                        x: 3631,
                        y: 2523
                    },
                    {
                        x: 3632,
                        y: 4474
                    },
                    {
                        x: 3633,
                        y: 2068
                    },
                    {
                        x: 3634,
                        y: 1900
                    },
                    {
                        x: 3635,
                        y: 3041
                    },
                    {
                        x: 3636,
                        y: 2622
                    },
                    {
                        x: 3637,
                        y: 3447
                    },
                    {
                        x: 3638,
                        y: 4107
                    },
                    {
                        x: 3639,
                        y: 58
                    },
                    {
                        x: 3640,
                        y: 1965
                    },
                    {
                        x: 3641,
                        y: 1654
                    },
                    {
                        x: 3642,
                        y: 2396
                    },
                    {
                        x: 3643,
                        y: 4599
                    },
                    {
                        x: 3644,
                        y: 4395
                    },
                    {
                        x: 3645,
                        y: 1099
                    },
                    {
                        x: 3646,
                        y: 1507
                    },
                    {
                        x: 3647,
                        y: 1863
                    },
                    {
                        x: 3648,
                        y: 4647
                    },
                    {
                        x: 3649,
                        y: 2909
                    },
                    {
                        x: 3650,
                        y: 103
                    },
                    {
                        x: 3651,
                        y: 3204
                    },
                    {
                        x: 3652,
                        y: 3300
                    },
                    {
                        x: 3653,
                        y: 4426
                    },
                    {
                        x: 3654,
                        y: 4755
                    },
                    {
                        x: 3655,
                        y: 833
                    },
                    {
                        x: 3656,
                        y: 2471
                    },
                    {
                        x: 3657,
                        y: 3665
                    },
                    {
                        x: 3658,
                        y: 975
                    },
                    {
                        x: 3659,
                        y: 3777
                    },
                    {
                        x: 3660,
                        y: 3496
                    },
                    {
                        x: 3661,
                        y: 4633
                    },
                    {
                        x: 3662,
                        y: 4701
                    },
                    {
                        x: 3663,
                        y: 3919
                    },
                    {
                        x: 3664,
                        y: 1173
                    },
                    {
                        x: 3665,
                        y: 2165
                    },
                    {
                        x: 3666,
                        y: 4749
                    },
                    {
                        x: 3667,
                        y: 4475
                    },
                    {
                        x: 3668,
                        y: 3303
                    },
                    {
                        x: 3669,
                        y: 3387
                    },
                    {
                        x: 3670,
                        y: 2151
                    },
                    {
                        x: 3671,
                        y: 2733
                    },
                    {
                        x: 3672,
                        y: 1699
                    },
                    {
                        x: 3673,
                        y: 1238
                    },
                    {
                        x: 3674,
                        y: 4433
                    },
                    {
                        x: 3675,
                        y: 990
                    },
                    {
                        x: 3676,
                        y: 3169
                    },
                    {
                        x: 3677,
                        y: 4722
                    },
                    {
                        x: 3678,
                        y: 121
                    },
                    {
                        x: 3679,
                        y: 1192
                    },
                    {
                        x: 3680,
                        y: 3980
                    },
                    {
                        x: 3681,
                        y: 936
                    },
                    {
                        x: 3682,
                        y: 1740
                    },
                    {
                        x: 3683,
                        y: 233
                    },
                    {
                        x: 3684,
                        y: 1251
                    },
                    {
                        x: 3685,
                        y: 2214
                    },
                    {
                        x: 3686,
                        y: 2962
                    },
                    {
                        x: 3687,
                        y: 2933
                    },
                    {
                        x: 3688,
                        y: 1726
                    },
                    {
                        x: 3689,
                        y: 4338
                    },
                    {
                        x: 3690,
                        y: 333
                    },
                    {
                        x: 3691,
                        y: 844
                    },
                    {
                        x: 3692,
                        y: 1600
                    },
                    {
                        x: 3693,
                        y: 1927
                    },
                    {
                        x: 3694,
                        y: 796
                    },
                    {
                        x: 3695,
                        y: 1866
                    },
                    {
                        x: 3696,
                        y: 1956
                    },
                    {
                        x: 3697,
                        y: 4827
                    },
                    {
                        x: 3698,
                        y: 3004
                    },
                    {
                        x: 3699,
                        y: 16
                    },
                    {
                        x: 3700,
                        y: 3147
                    },
                    {
                        x: 3701,
                        y: 4331
                    },
                    {
                        x: 3702,
                        y: 1386
                    },
                    {
                        x: 3703,
                        y: 3700
                    },
                    {
                        x: 3704,
                        y: 2555
                    },
                    {
                        x: 3705,
                        y: 1155
                    },
                    {
                        x: 3706,
                        y: 1970
                    },
                    {
                        x: 3707,
                        y: 1151
                    },
                    {
                        x: 3708,
                        y: 888
                    },
                    {
                        x: 3709,
                        y: 2678
                    },
                    {
                        x: 3710,
                        y: 2861
                    },
                    {
                        x: 3711,
                        y: 3685
                    },
                    {
                        x: 3712,
                        y: 2242
                    },
                    {
                        x: 3713,
                        y: 3187
                    },
                    {
                        x: 3714,
                        y: 687
                    },
                    {
                        x: 3715,
                        y: 1207
                    },
                    {
                        x: 3716,
                        y: 118
                    },
                    {
                        x: 3717,
                        y: 378
                    },
                    {
                        x: 3718,
                        y: 4727
                    },
                    {
                        x: 3719,
                        y: 100
                    },
                    {
                        x: 3720,
                        y: 4561
                    },
                    {
                        x: 3721,
                        y: 1698
                    },
                    {
                        x: 3722,
                        y: 4052
                    },
                    {
                        x: 3723,
                        y: 1366
                    },
                    {
                        x: 3724,
                        y: 898
                    },
                    {
                        x: 3725,
                        y: 3209
                    },
                    {
                        x: 3726,
                        y: 2438
                    },
                    {
                        x: 3727,
                        y: 3821
                    },
                    {
                        x: 3728,
                        y: 1067
                    },
                    {
                        x: 3729,
                        y: 4593
                    },
                    {
                        x: 3730,
                        y: 1816
                    },
                    {
                        x: 3731,
                        y: 2394
                    },
                    {
                        x: 3732,
                        y: 2181
                    },
                    {
                        x: 3733,
                        y: 1564
                    },
                    {
                        x: 3734,
                        y: 469
                    },
                    {
                        x: 3735,
                        y: 801
                    },
                    {
                        x: 3736,
                        y: 1884
                    },
                    {
                        x: 3737,
                        y: 4538
                    },
                    {
                        x: 3738,
                        y: 3066
                    },
                    {
                        x: 3739,
                        y: 4695
                    },
                    {
                        x: 3740,
                        y: 1413
                    },
                    {
                        x: 3741,
                        y: 4059
                    },
                    {
                        x: 3742,
                        y: 2609
                    },
                    {
                        x: 3743,
                        y: 138
                    },
                    {
                        x: 3744,
                        y: 3544
                    },
                    {
                        x: 3745,
                        y: 3200
                    },
                    {
                        x: 3746,
                        y: 4362
                    },
                    {
                        x: 3747,
                        y: 962
                    },
                    {
                        x: 3748,
                        y: 1793
                    },
                    {
                        x: 3749,
                        y: 2997
                    },
                    {
                        x: 3750,
                        y: 4384
                    },
                    {
                        x: 3751,
                        y: 1821
                    },
                    {
                        x: 3752,
                        y: 1248
                    },
                    {
                        x: 3753,
                        y: 1190
                    },
                    {
                        x: 3754,
                        y: 3469
                    },
                    {
                        x: 3755,
                        y: 4318
                    },
                    {
                        x: 3756,
                        y: 836
                    },
                    {
                        x: 3757,
                        y: 3756
                    },
                    {
                        x: 3758,
                        y: 2025
                    },
                    {
                        x: 3759,
                        y: 4217
                    },
                    {
                        x: 3760,
                        y: 201
                    },
                    {
                        x: 3761,
                        y: 3317
                    },
                    {
                        x: 3762,
                        y: 1075
                    },
                    {
                        x: 3763,
                        y: 704
                    },
                    {
                        x: 3764,
                        y: 3308
                    },
                    {
                        x: 3765,
                        y: 707
                    },
                    {
                        x: 3766,
                        y: 4823
                    },
                    {
                        x: 3767,
                        y: 1092
                    },
                    {
                        x: 3768,
                        y: 946
                    },
                    {
                        x: 3769,
                        y: 1143
                    },
                    {
                        x: 3770,
                        y: 4489
                    },
                    {
                        x: 3771,
                        y: 339
                    },
                    {
                        x: 3772,
                        y: 3467
                    },
                    {
                        x: 3773,
                        y: 2797
                    },
                    {
                        x: 3774,
                        y: 2013
                    },
                    {
                        x: 3775,
                        y: 4302
                    },
                    {
                        x: 3776,
                        y: 2432
                    },
                    {
                        x: 3777,
                        y: 655
                    },
                    {
                        x: 3778,
                        y: 4813
                    },
                    {
                        x: 3779,
                        y: 1186
                    },
                    {
                        x: 3780,
                        y: 3031
                    },
                    {
                        x: 3781,
                        y: 1142
                    },
                    {
                        x: 3782,
                        y: 596
                    },
                    {
                        x: 3783,
                        y: 4377
                    },
                    {
                        x: 3784,
                        y: 3666
                    },
                    {
                        x: 3785,
                        y: 4243
                    },
                    {
                        x: 3786,
                        y: 3050
                    },
                    {
                        x: 3787,
                        y: 4263
                    },
                    {
                        x: 3788,
                        y: 531
                    },
                    {
                        x: 3789,
                        y: 210
                    },
                    {
                        x: 3790,
                        y: 914
                    },
                    {
                        x: 3791,
                        y: 4884
                    },
                    {
                        x: 3792,
                        y: 2586
                    },
                    {
                        x: 3793,
                        y: 1203
                    },
                    {
                        x: 3794,
                        y: 4589
                    },
                    {
                        x: 3795,
                        y: 1650
                    },
                    {
                        x: 3796,
                        y: 3070
                    },
                    {
                        x: 3797,
                        y: 3978
                    },
                    {
                        x: 3798,
                        y: 355
                    },
                    {
                        x: 3799,
                        y: 4919
                    },
                    {
                        x: 3800,
                        y: 3823
                    },
                    {
                        x: 3801,
                        y: 2125
                    },
                    {
                        x: 3802,
                        y: 951
                    },
                    {
                        x: 3803,
                        y: 2200
                    },
                    {
                        x: 3804,
                        y: 1324
                    },
                    {
                        x: 3805,
                        y: 1455
                    },
                    {
                        x: 3806,
                        y: 1180
                    },
                    {
                        x: 3807,
                        y: 1945
                    },
                    {
                        x: 3808,
                        y: 607
                    },
                    {
                        x: 3809,
                        y: 3890
                    },
                    {
                        x: 3810,
                        y: 4005
                    },
                    {
                        x: 3811,
                        y: 532
                    },
                    {
                        x: 3812,
                        y: 4545
                    },
                    {
                        x: 3813,
                        y: 4220
                    },
                    {
                        x: 3814,
                        y: 2663
                    },
                    {
                        x: 3815,
                        y: 25
                    },
                    {
                        x: 3816,
                        y: 317
                    },
                    {
                        x: 3817,
                        y: 2531
                    },
                    {
                        x: 3818,
                        y: 4595
                    },
                    {
                        x: 3819,
                        y: 631
                    },
                    {
                        x: 3820,
                        y: 1010
                    },
                    {
                        x: 3821,
                        y: 4552
                    },
                    {
                        x: 3822,
                        y: 4984
                    },
                    {
                        x: 3823,
                        y: 1191
                    },
                    {
                        x: 3824,
                        y: 382
                    },
                    {
                        x: 3825,
                        y: 1051
                    },
                    {
                        x: 3826,
                        y: 557
                    },
                    {
                        x: 3827,
                        y: 547
                    },
                    {
                        x: 3828,
                        y: 4985
                    },
                    {
                        x: 3829,
                        y: 4688
                    },
                    {
                        x: 3830,
                        y: 1266
                    },
                    {
                        x: 3831,
                        y: 3687
                    },
                    {
                        x: 3832,
                        y: 1666
                    },
                    {
                        x: 3833,
                        y: 3097
                    },
                    {
                        x: 3834,
                        y: 2580
                    },
                    {
                        x: 3835,
                        y: 451
                    },
                    {
                        x: 3836,
                        y: 4398
                    },
                    {
                        x: 3837,
                        y: 400
                    },
                    {
                        x: 3838,
                        y: 3068
                    },
                    {
                        x: 3839,
                        y: 3662
                    },
                    {
                        x: 3840,
                        y: 810
                    },
                    {
                        x: 3841,
                        y: 1212
                    },
                    {
                        x: 3842,
                        y: 870
                    },
                    {
                        x: 3843,
                        y: 4460
                    },
                    {
                        x: 3844,
                        y: 940
                    },
                    {
                        x: 3845,
                        y: 4953
                    },
                    {
                        x: 3846,
                        y: 2049
                    },
                    {
                        x: 3847,
                        y: 614
                    },
                    {
                        x: 3848,
                        y: 1607
                    },
                    {
                        x: 3849,
                        y: 3739
                    },
                    {
                        x: 3850,
                        y: 1761
                    },
                    {
                        x: 3851,
                        y: 3281
                    },
                    {
                        x: 3852,
                        y: 4645
                    },
                    {
                        x: 3853,
                        y: 3732
                    },
                    {
                        x: 3854,
                        y: 4508
                    },
                    {
                        x: 3855,
                        y: 4627
                    },
                    {
                        x: 3856,
                        y: 1576
                    },
                    {
                        x: 3857,
                        y: 2926
                    },
                    {
                        x: 3858,
                        y: 4713
                    },
                    {
                        x: 3859,
                        y: 4212
                    },
                    {
                        x: 3860,
                        y: 3332
                    },
                    {
                        x: 3861,
                        y: 4219
                    },
                    {
                        x: 3862,
                        y: 2041
                    },
                    {
                        x: 3863,
                        y: 1471
                    },
                    {
                        x: 3864,
                        y: 3888
                    },
                    {
                        x: 3865,
                        y: 4146
                    },
                    {
                        x: 3866,
                        y: 3412
                    },
                    {
                        x: 3867,
                        y: 3465
                    },
                    {
                        x: 3868,
                        y: 494
                    },
                    {
                        x: 3869,
                        y: 1655
                    },
                    {
                        x: 3870,
                        y: 2705
                    },
                    {
                        x: 3871,
                        y: 541
                    },
                    {
                        x: 3872,
                        y: 219
                    },
                    {
                        x: 3873,
                        y: 3452
                    },
                    {
                        x: 3874,
                        y: 2067
                    },
                    {
                        x: 3875,
                        y: 4136
                    },
                    {
                        x: 3876,
                        y: 1719
                    },
                    {
                        x: 3877,
                        y: 853
                    },
                    {
                        x: 3878,
                        y: 4794
                    },
                    {
                        x: 3879,
                        y: 3420
                    },
                    {
                        x: 3880,
                        y: 1808
                    },
                    {
                        x: 3881,
                        y: 2502
                    },
                    {
                        x: 3882,
                        y: 1422
                    },
                    {
                        x: 3883,
                        y: 296
                    },
                    {
                        x: 3884,
                        y: 3800
                    },
                    {
                        x: 3885,
                        y: 4462
                    },
                    {
                        x: 3886,
                        y: 520
                    },
                    {
                        x: 3887,
                        y: 4517
                    },
                    {
                        x: 3888,
                        y: 4715
                    },
                    {
                        x: 3889,
                        y: 4904
                    },
                    {
                        x: 3890,
                        y: 1375
                    },
                    {
                        x: 3891,
                        y: 2088
                    },
                    {
                        x: 3892,
                        y: 1450
                    },
                    {
                        x: 3893,
                        y: 3917
                    },
                    {
                        x: 3894,
                        y: 2412
                    },
                    {
                        x: 3895,
                        y: 516
                    },
                    {
                        x: 3896,
                        y: 4428
                    },
                    {
                        x: 3897,
                        y: 441
                    },
                    {
                        x: 3898,
                        y: 4844
                    },
                    {
                        x: 3899,
                        y: 1486
                    },
                    {
                        x: 3900,
                        y: 1646
                    },
                    {
                        x: 3901,
                        y: 2709
                    },
                    {
                        x: 3902,
                        y: 2303
                    },
                    {
                        x: 3903,
                        y: 2368
                    },
                    {
                        x: 3904,
                        y: 1292
                    },
                    {
                        x: 3905,
                        y: 4222
                    },
                    {
                        x: 3906,
                        y: 643
                    },
                    {
                        x: 3907,
                        y: 1461
                    },
                    {
                        x: 3908,
                        y: 2367
                    },
                    {
                        x: 3909,
                        y: 2477
                    },
                    {
                        x: 3910,
                        y: 214
                    },
                    {
                        x: 3911,
                        y: 992
                    },
                    {
                        x: 3912,
                        y: 4547
                    },
                    {
                        x: 3913,
                        y: 3877
                    },
                    {
                        x: 3914,
                        y: 1953
                    },
                    {
                        x: 3915,
                        y: 528
                    },
                    {
                        x: 3916,
                        y: 129
                    },
                    {
                        x: 3917,
                        y: 1459
                    },
                    {
                        x: 3918,
                        y: 2128
                    },
                    {
                        x: 3919,
                        y: 2987
                    },
                    {
                        x: 3920,
                        y: 2410
                    },
                    {
                        x: 3921,
                        y: 2552
                    },
                    {
                        x: 3922,
                        y: 2982
                    },
                    {
                        x: 3923,
                        y: 1120
                    },
                    {
                        x: 3924,
                        y: 4279
                    },
                    {
                        x: 3925,
                        y: 2188
                    },
                    {
                        x: 3926,
                        y: 3998
                    },
                    {
                        x: 3927,
                        y: 178
                    },
                    {
                        x: 3928,
                        y: 3982
                    },
                    {
                        x: 3929,
                        y: 4934
                    },
                    {
                        x: 3930,
                        y: 3597
                    },
                    {
                        x: 3931,
                        y: 155
                    },
                    {
                        x: 3932,
                        y: 543
                    },
                    {
                        x: 3933,
                        y: 4183
                    },
                    {
                        x: 3934,
                        y: 2202
                    },
                    {
                        x: 3935,
                        y: 4412
                    },
                    {
                        x: 3936,
                        y: 4943
                    },
                    {
                        x: 3937,
                        y: 2715
                    },
                    {
                        x: 3938,
                        y: 115
                    },
                    {
                        x: 3939,
                        y: 2159
                    },
                    {
                        x: 3940,
                        y: 2217
                    },
                    {
                        x: 3941,
                        y: 3910
                    },
                    {
                        x: 3942,
                        y: 1383
                    },
                    {
                        x: 3943,
                        y: 1317
                    },
                    {
                        x: 3944,
                        y: 1636
                    },
                    {
                        x: 3945,
                        y: 1320
                    },
                    {
                        x: 3946,
                        y: 3078
                    },
                    {
                        x: 3947,
                        y: 4169
                    },
                    {
                        x: 3948,
                        y: 4464
                    },
                    {
                        x: 3949,
                        y: 2942
                    },
                    {
                        x: 3950,
                        y: 1532
                    },
                    {
                        x: 3951,
                        y: 932
                    },
                    {
                        x: 3952,
                        y: 1378
                    },
                    {
                        x: 3953,
                        y: 244
                    },
                    {
                        x: 3954,
                        y: 4559
                    },
                    {
                        x: 3955,
                        y: 3499
                    },
                    {
                        x: 3956,
                        y: 3156
                    },
                    {
                        x: 3957,
                        y: 3987
                    },
                    {
                        x: 3958,
                        y: 1139
                    },
                    {
                        x: 3959,
                        y: 1125
                    },
                    {
                        x: 3960,
                        y: 390
                    },
                    {
                        x: 3961,
                        y: 712
                    },
                    {
                        x: 3962,
                        y: 2945
                    },
                    {
                        x: 3963,
                        y: 3339
                    },
                    {
                        x: 3964,
                        y: 2882
                    },
                    {
                        x: 3965,
                        y: 1565
                    },
                    {
                        x: 3966,
                        y: 2446
                    },
                    {
                        x: 3967,
                        y: 3768
                    },
                    {
                        x: 3968,
                        y: 4192
                    },
                    {
                        x: 3969,
                        y: 1308
                    },
                    {
                        x: 3970,
                        y: 743
                    },
                    {
                        x: 3971,
                        y: 575
                    },
                    {
                        x: 3972,
                        y: 4196
                    },
                    {
                        x: 3973,
                        y: 4092
                    },
                    {
                        x: 3974,
                        y: 824
                    },
                    {
                        x: 3975,
                        y: 1333
                    },
                    {
                        x: 3976,
                        y: 1848
                    },
                    {
                        x: 3977,
                        y: 2800
                    },
                    {
                        x: 3978,
                        y: 3005
                    },
                    {
                        x: 3979,
                        y: 2667
                    },
                    {
                        x: 3980,
                        y: 2665
                    },
                    {
                        x: 3981,
                        y: 4741
                    },
                    {
                        x: 3982,
                        y: 1932
                    },
                    {
                        x: 3983,
                        y: 1177
                    },
                    {
                        x: 3984,
                        y: 3671
                    },
                    {
                        x: 3985,
                        y: 831
                    },
                    {
                        x: 3986,
                        y: 2973
                    },
                    {
                        x: 3987,
                        y: 3091
                    },
                    {
                        x: 3988,
                        y: 4578
                    },
                    {
                        x: 3989,
                        y: 322
                    },
                    {
                        x: 3990,
                        y: 4933
                    },
                    {
                        x: 3991,
                        y: 4959
                    },
                    {
                        x: 3992,
                        y: 2507
                    },
                    {
                        x: 3993,
                        y: 2574
                    },
                    {
                        x: 3994,
                        y: 947
                    },
                    {
                        x: 3995,
                        y: 2722
                    },
                    {
                        x: 3996,
                        y: 2273
                    },
                    {
                        x: 3997,
                        y: 1659
                    },
                    {
                        x: 3998,
                        y: 4295
                    },
                    {
                        x: 3999,
                        y: 1879
                    },
                    {
                        x: 4000,
                        y: 1033
                    },
                    {
                        x: 4001,
                        y: 1786
                    },
                    {
                        x: 4002,
                        y: 2167
                    },
                    {
                        x: 4003,
                        y: 2632
                    },
                    {
                        x: 4004,
                        y: 2286
                    },
                    {
                        x: 4005,
                        y: 4871
                    },
                    {
                        x: 4006,
                        y: 2174
                    },
                    {
                        x: 4007,
                        y: 3150
                    },
                    {
                        x: 4008,
                        y: 1296
                    },
                    {
                        x: 4009,
                        y: 4660
                    },
                    {
                        x: 4010,
                        y: 972
                    },
                    {
                        x: 4011,
                        y: 509
                    },
                    {
                        x: 4012,
                        y: 2494
                    },
                    {
                        x: 4013,
                        y: 1544
                    },
                    {
                        x: 4014,
                        y: 1161
                    },
                    {
                        x: 4015,
                        y: 2701
                    },
                    {
                        x: 4016,
                        y: 3006
                    },
                    {
                        x: 4017,
                        y: 3516
                    },
                    {
                        x: 4018,
                        y: 4759
                    },
                    {
                        x: 4019,
                        y: 1380
                    },
                    {
                        x: 4020,
                        y: 3096
                    },
                    {
                        x: 4021,
                        y: 4947
                    },
                    {
                        x: 4022,
                        y: 3046
                    },
                    {
                        x: 4023,
                        y: 4281
                    },
                    {
                        x: 4024,
                        y: 4621
                    },
                    {
                        x: 4025,
                        y: 961
                    },
                    {
                        x: 4026,
                        y: 4123
                    },
                    {
                        x: 4027,
                        y: 3226
                    },
                    {
                        x: 4028,
                        y: 1955
                    },
                    {
                        x: 4029,
                        y: 525
                    },
                    {
                        x: 4030,
                        y: 1639
                    },
                    {
                        x: 4031,
                        y: 3973
                    },
                    {
                        x: 4032,
                        y: 3072
                    },
                    {
                        x: 4033,
                        y: 479
                    },
                    {
                        x: 4034,
                        y: 3306
                    },
                    {
                        x: 4035,
                        y: 3312
                    },
                    {
                        x: 4036,
                        y: 4141
                    },
                    {
                        x: 4037,
                        y: 3
                    },
                    {
                        x: 4038,
                        y: 1888
                    },
                    {
                        x: 4039,
                        y: 321
                    },
                    {
                        x: 4040,
                        y: 3414
                    },
                    {
                        x: 4041,
                        y: 1901
                    },
                    {
                        x: 4042,
                        y: 797
                    },
                    {
                        x: 4043,
                        y: 4737
                    },
                    {
                        x: 4044,
                        y: 2030
                    },
                    {
                        x: 4045,
                        y: 4909
                    },
                    {
                        x: 4046,
                        y: 2085
                    },
                    {
                        x: 4047,
                        y: 2149
                    },
                    {
                        x: 4048,
                        y: 1668
                    },
                    {
                        x: 4049,
                        y: 4114
                    },
                    {
                        x: 4050,
                        y: 3729
                    },
                    {
                        x: 4051,
                        y: 2079
                    },
                    {
                        x: 4052,
                        y: 2423
                    },
                    {
                        x: 4053,
                        y: 4228
                    },
                    {
                        x: 4054,
                        y: 2848
                    },
                    {
                        x: 4055,
                        y: 3955
                    },
                    {
                        x: 4056,
                        y: 4126
                    },
                    {
                        x: 4057,
                        y: 3947
                    },
                    {
                        x: 4058,
                        y: 4471
                    },
                    {
                        x: 4059,
                        y: 463
                    },
                    {
                        x: 4060,
                        y: 4266
                    },
                    {
                        x: 4061,
                        y: 19
                    },
                    {
                        x: 4062,
                        y: 3724
                    },
                    {
                        x: 4063,
                        y: 3567
                    },
                    {
                        x: 4064,
                        y: 2772
                    },
                    {
                        x: 4065,
                        y: 3325
                    },
                    {
                        x: 4066,
                        y: 1909
                    },
                    {
                        x: 4067,
                        y: 4256
                    },
                    {
                        x: 4068,
                        y: 2458
                    },
                    {
                        x: 4069,
                        y: 1546
                    },
                    {
                        x: 4070,
                        y: 171
                    },
                    {
                        x: 4071,
                        y: 3930
                    },
                    {
                        x: 4072,
                        y: 535
                    },
                    {
                        x: 4073,
                        y: 4808
                    },
                    {
                        x: 4074,
                        y: 3336
                    },
                    {
                        x: 4075,
                        y: 1744
                    },
                    {
                        x: 4076,
                        y: 1199
                    },
                    {
                        x: 4077,
                        y: 21
                    },
                    {
                        x: 4078,
                        y: 2825
                    },
                    {
                        x: 4079,
                        y: 2379
                    },
                    {
                        x: 4080,
                        y: 2614
                    },
                    {
                        x: 4081,
                        y: 754
                    },
                    {
                        x: 4082,
                        y: 4916
                    },
                    {
                        x: 4083,
                        y: 4996
                    },
                    {
                        x: 4084,
                        y: 4685
                    },
                    {
                        x: 4085,
                        y: 3381
                    },
                    {
                        x: 4086,
                        y: 3512
                    },
                    {
                        x: 4087,
                        y: 3782
                    },
                    {
                        x: 4088,
                        y: 4006
                    },
                    {
                        x: 4089,
                        y: 2022
                    },
                    {
                        x: 4090,
                        y: 2058
                    },
                    {
                        x: 4091,
                        y: 328
                    },
                    {
                        x: 4092,
                        y: 759
                    },
                    {
                        x: 4093,
                        y: 1006
                    },
                    {
                        x: 4094,
                        y: 3898
                    },
                    {
                        x: 4095,
                        y: 2160
                    },
                    {
                        x: 4096,
                        y: 2075
                    },
                    {
                        x: 4097,
                        y: 2356
                    },
                    {
                        x: 4098,
                        y: 3087
                    },
                    {
                        x: 4099,
                        y: 3951
                    },
                    {
                        x: 4100,
                        y: 3283
                    },
                    {
                        x: 4101,
                        y: 4079
                    },
                    {
                        x: 4102,
                        y: 4285
                    },
                    {
                        x: 4103,
                        y: 3100
                    },
                    {
                        x: 4104,
                        y: 35
                    },
                    {
                        x: 4105,
                        y: 3425
                    },
                    {
                        x: 4106,
                        y: 4296
                    },
                    {
                        x: 4107,
                        y: 176
                    },
                    {
                        x: 4108,
                        y: 1147
                    },
                    {
                        x: 4109,
                        y: 404
                    },
                    {
                        x: 4110,
                        y: 238
                    },
                    {
                        x: 4111,
                        y: 3502
                    },
                    {
                        x: 4112,
                        y: 3705
                    },
                    {
                        x: 4113,
                        y: 2656
                    },
                    {
                        x: 4114,
                        y: 2606
                    },
                    {
                        x: 4115,
                        y: 4951
                    },
                    {
                        x: 4116,
                        y: 1420
                    },
                    {
                        x: 4117,
                        y: 193
                    },
                    {
                        x: 4118,
                        y: 3882
                    },
                    {
                        x: 4119,
                        y: 4402
                    },
                    {
                        x: 4120,
                        y: 3611
                    },
                    {
                        x: 4121,
                        y: 4218
                    },
                    {
                        x: 4122,
                        y: 1569
                    },
                    {
                        x: 4123,
                        y: 2321
                    },
                    {
                        x: 4124,
                        y: 3798
                    },
                    {
                        x: 4125,
                        y: 4191
                    },
                    {
                        x: 4126,
                        y: 2449
                    },
                    {
                        x: 4127,
                        y: 4033
                    },
                    {
                        x: 4128,
                        y: 989
                    },
                    {
                        x: 4129,
                        y: 664
                    },
                    {
                        x: 4130,
                        y: 3333
                    },
                    {
                        x: 4131,
                        y: 4765
                    },
                    {
                        x: 4132,
                        y: 4477
                    },
                    {
                        x: 4133,
                        y: 308
                    },
                    {
                        x: 4134,
                        y: 389
                    },
                    {
                        x: 4135,
                        y: 4342
                    },
                    {
                        x: 4136,
                        y: 3554
                    },
                    {
                        x: 4137,
                        y: 4379
                    },
                    {
                        x: 4138,
                        y: 4050
                    },
                    {
                        x: 4139,
                        y: 2691
                    },
                    {
                        x: 4140,
                        y: 4866
                    },
                    {
                        x: 4141,
                        y: 2497
                    },
                    {
                        x: 4142,
                        y: 3559
                    },
                    {
                        x: 4143,
                        y: 4199
                    },
                    {
                        x: 4144,
                        y: 2190
                    },
                    {
                        x: 4145,
                        y: 4349
                    },
                    {
                        x: 4146,
                        y: 862
                    },
                    {
                        x: 4147,
                        y: 581
                    },
                    {
                        x: 4148,
                        y: 1239
                    },
                    {
                        x: 4149,
                        y: 2071
                    },
                    {
                        x: 4150,
                        y: 3295
                    },
                    {
                        x: 4151,
                        y: 3095
                    },
                    {
                        x: 4152,
                        y: 4432
                    },
                    {
                        x: 4153,
                        y: 2983
                    },
                    {
                        x: 4154,
                        y: 960
                    },
                    {
                        x: 4155,
                        y: 3566
                    },
                    {
                        x: 4156,
                        y: 4636
                    },
                    {
                        x: 4157,
                        y: 3250
                    },
                    {
                        x: 4158,
                        y: 4010
                    },
                    {
                        x: 4159,
                        y: 3482
                    },
                    {
                        x: 4160,
                        y: 4584
                    },
                    {
                        x: 4161,
                        y: 1257
                    },
                    {
                        x: 4162,
                        y: 2472
                    },
                    {
                        x: 4163,
                        y: 1228
                    },
                    {
                        x: 4164,
                        y: 2372
                    },
                    {
                        x: 4165,
                        y: 3311
                    },
                    {
                        x: 4166,
                        y: 3153
                    },
                    {
                        x: 4167,
                        y: 800
                    },
                    {
                        x: 4168,
                        y: 4129
                    },
                    {
                        x: 4169,
                        y: 3118
                    },
                    {
                        x: 4170,
                        y: 4214
                    },
                    {
                        x: 4171,
                        y: 3230
                    },
                    {
                        x: 4172,
                        y: 919
                    },
                    {
                        x: 4173,
                        y: 2708
                    },
                    {
                        x: 4174,
                        y: 735
                    },
                    {
                        x: 4175,
                        y: 2820
                    },
                    {
                        x: 4176,
                        y: 2686
                    },
                    {
                        x: 4177,
                        y: 4319
                    },
                    {
                        x: 4178,
                        y: 1717
                    },
                    {
                        x: 4179,
                        y: 715
                    },
                    {
                        x: 4180,
                        y: 4767
                    },
                    {
                        x: 4181,
                        y: 3699
                    },
                    {
                        x: 4182,
                        y: 1505
                    },
                    {
                        x: 4183,
                        y: 2439
                    },
                    {
                        x: 4184,
                        y: 3595
                    },
                    {
                        x: 4185,
                        y: 1855
                    },
                    {
                        x: 4186,
                        y: 3341
                    },
                    {
                        x: 4187,
                        y: 3477
                    },
                    {
                        x: 4188,
                        y: 4542
                    },
                    {
                        x: 4189,
                        y: 4957
                    },
                    {
                        x: 4190,
                        y: 4060
                    },
                    {
                        x: 4191,
                        y: 87
                    },
                    {
                        x: 4192,
                        y: 2259
                    },
                    {
                        x: 4193,
                        y: 4024
                    },
                    {
                        x: 4194,
                        y: 62
                    },
                    {
                        x: 4195,
                        y: 33
                    },
                    {
                        x: 4196,
                        y: 4138
                    },
                    {
                        x: 4197,
                        y: 2305
                    },
                    {
                        x: 4198,
                        y: 281
                    },
                    {
                        x: 4199,
                        y: 544
                    },
                    {
                        x: 4200,
                        y: 1149
                    },
                    {
                        x: 4201,
                        y: 2177
                    },
                    {
                        x: 4202,
                        y: 692
                    },
                    {
                        x: 4203,
                        y: 1810
                    },
                    {
                        x: 4204,
                        y: 1522
                    },
                    {
                        x: 4205,
                        y: 4859
                    },
                    {
                        x: 4206,
                        y: 522
                    },
                    {
                        x: 4207,
                        y: 924
                    },
                    {
                        x: 4208,
                        y: 4323
                    },
                    {
                        x: 4209,
                        y: 524
                    },
                    {
                        x: 4210,
                        y: 3542
                    },
                    {
                        x: 4211,
                        y: 4350
                    },
                    {
                        x: 4212,
                        y: 1145
                    },
                    {
                        x: 4213,
                        y: 2712
                    },
                    {
                        x: 4214,
                        y: 4563
                    },
                    {
                        x: 4215,
                        y: 1448
                    },
                    {
                        x: 4216,
                        y: 1557
                    },
                    {
                        x: 4217,
                        y: 3084
                    },
                    {
                        x: 4218,
                        y: 131
                    },
                    {
                        x: 4219,
                        y: 1700
                    },
                    {
                        x: 4220,
                        y: 4429
                    },
                    {
                        x: 4221,
                        y: 427
                    },
                    {
                        x: 4222,
                        y: 2703
                    },
                    {
                        x: 4223,
                        y: 969
                    },
                    {
                        x: 4224,
                        y: 1904
                    },
                    {
                        x: 4225,
                        y: 109
                    },
                    {
                        x: 4226,
                        y: 2532
                    },
                    {
                        x: 4227,
                        y: 3039
                    },
                    {
                        x: 4228,
                        y: 1785
                    },
                    {
                        x: 4229,
                        y: 3180
                    },
                    {
                        x: 4230,
                        y: 4734
                    },
                    {
                        x: 4231,
                        y: 4880
                    },
                    {
                        x: 4232,
                        y: 326
                    },
                    {
                        x: 4233,
                        y: 773
                    },
                    {
                        x: 4234,
                        y: 313
                    },
                    {
                        x: 4235,
                        y: 928
                    },
                    {
                        x: 4236,
                        y: 1385
                    },
                    {
                        x: 4237,
                        y: 4237
                    },
                    {
                        x: 4238,
                        y: 1302
                    },
                    {
                        x: 4239,
                        y: 1288
                    },
                    {
                        x: 4240,
                        y: 4278
                    },
                    {
                        x: 4241,
                        y: 623
                    },
                    {
                        x: 4242,
                        y: 792
                    },
                    {
                        x: 4243,
                        y: 2935
                    },
                    {
                        x: 4244,
                        y: 4063
                    },
                    {
                        x: 4245,
                        y: 4564
                    },
                    {
                        x: 4246,
                        y: 1758
                    },
                    {
                        x: 4247,
                        y: 4691
                    },
                    {
                        x: 4248,
                        y: 4328
                    },
                    {
                        x: 4249,
                        y: 2874
                    },
                    {
                        x: 4250,
                        y: 2150
                    },
                    {
                        x: 4251,
                        y: 1437
                    },
                    {
                        x: 4252,
                        y: 2136
                    },
                    {
                        x: 4253,
                        y: 2522
                    },
                    {
                        x: 4254,
                        y: 1663
                    },
                    {
                        x: 4255,
                        y: 994
                    },
                    {
                        x: 4256,
                        y: 877
                    },
                    {
                        x: 4257,
                        y: 2907
                    },
                    {
                        x: 4258,
                        y: 4132
                    },
                    {
                        x: 4259,
                        y: 1391
                    },
                    {
                        x: 4260,
                        y: 461
                    },
                    {
                        x: 4261,
                        y: 4441
                    },
                    {
                        x: 4262,
                        y: 4671
                    },
                    {
                        x: 4263,
                        y: 185
                    },
                    {
                        x: 4264,
                        y: 1264
                    },
                    {
                        x: 4265,
                        y: 3776
                    },
                    {
                        x: 4266,
                        y: 3692
                    },
                    {
                        x: 4267,
                        y: 72
                    },
                    {
                        x: 4268,
                        y: 2542
                    },
                    {
                        x: 4269,
                        y: 3764
                    },
                    {
                        x: 4270,
                        y: 145
                    },
                    {
                        x: 4271,
                        y: 1527
                    },
                    {
                        x: 4272,
                        y: 2054
                    },
                    {
                        x: 4273,
                        y: 3551
                    },
                    {
                        x: 4274,
                        y: 2998
                    },
                    {
                        x: 4275,
                        y: 523
                    },
                    {
                        x: 4276,
                        y: 173
                    },
                    {
                        x: 4277,
                        y: 4480
                    },
                    {
                        x: 4278,
                        y: 1224
                    },
                    {
                        x: 4279,
                        y: 8
                    },
                    {
                        x: 4280,
                        y: 1387
                    },
                    {
                        x: 4281,
                        y: 733
                    },
                    {
                        x: 4282,
                        y: 373
                    },
                    {
                        x: 4283,
                        y: 1201
                    },
                    {
                        x: 4284,
                        y: 1670
                    },
                    {
                        x: 4285,
                        y: 1281
                    },
                    {
                        x: 4286,
                        y: 613
                    },
                    {
                        x: 4287,
                        y: 4157
                    },
                    {
                        x: 4288,
                        y: 2297
                    },
                    {
                        x: 4289,
                        y: 1219
                    },
                    {
                        x: 4290,
                        y: 2669
                    },
                    {
                        x: 4291,
                        y: 1369
                    },
                    {
                        x: 4292,
                        y: 4752
                    },
                    {
                        x: 4293,
                        y: 4017
                    },
                    {
                        x: 4294,
                        y: 474
                    },
                    {
                        x: 4295,
                        y: 977
                    },
                    {
                        x: 4296,
                        y: 4696
                    },
                    {
                        x: 4297,
                        y: 4568
                    },
                    {
                        x: 4298,
                        y: 1918
                    },
                    {
                        x: 4299,
                        y: 1814
                    },
                    {
                        x: 4300,
                        y: 995
                    },
                    {
                        x: 4301,
                        y: 1411
                    },
                    {
                        x: 4302,
                        y: 18
                    },
                    {
                        x: 4303,
                        y: 854
                    },
                    {
                        x: 4304,
                        y: 842
                    },
                    {
                        x: 4305,
                        y: 892
                    },
                    {
                        x: 4306,
                        y: 4397
                    },
                    {
                        x: 4307,
                        y: 3552
                    },
                    {
                        x: 4308,
                        y: 2819
                    },
                    {
                        x: 4309,
                        y: 845
                    },
                    {
                        x: 4310,
                        y: 4403
                    },
                    {
                        x: 4311,
                        y: 2194
                    },
                    {
                        x: 4312,
                        y: 89
                    },
                    {
                        x: 4313,
                        y: 1899
                    },
                    {
                        x: 4314,
                        y: 3021
                    },
                    {
                        x: 4315,
                        y: 2474
                    },
                    {
                        x: 4316,
                        y: 1381
                    },
                    {
                        x: 4317,
                        y: 1274
                    },
                    {
                        x: 4318,
                        y: 2757
                    },
                    {
                        x: 4319,
                        y: 2588
                    },
                    {
                        x: 4320,
                        y: 1573
                    },
                    {
                        x: 4321,
                        y: 1753
                    },
                    {
                        x: 4322,
                        y: 446
                    },
                    {
                        x: 4323,
                        y: 539
                    },
                    {
                        x: 4324,
                        y: 168
                    },
                    {
                        x: 4325,
                        y: 1503
                    },
                    {
                        x: 4326,
                        y: 1460
                    },
                    {
                        x: 4327,
                        y: 3660
                    },
                    {
                        x: 4328,
                        y: 69
                    },
                    {
                        x: 4329,
                        y: 2559
                    },
                    {
                        x: 4330,
                        y: 4946
                    },
                    {
                        x: 4331,
                        y: 1613
                    },
                    {
                        x: 4332,
                        y: 4888
                    },
                    {
                        x: 4333,
                        y: 29
                    },
                    {
                        x: 4334,
                        y: 4803
                    },
                    {
                        x: 4335,
                        y: 2711
                    },
                    {
                        x: 4336,
                        y: 4833
                    },
                    {
                        x: 4337,
                        y: 2886
                    },
                    {
                        x: 4338,
                        y: 4405
                    },
                    {
                        x: 4339,
                        y: 2841
                    },
                    {
                        x: 4340,
                        y: 3674
                    },
                    {
                        x: 4341,
                        y: 4081
                    },
                    {
                        x: 4342,
                        y: 2971
                    },
                    {
                        x: 4343,
                        y: 3343
                    },
                    {
                        x: 4344,
                        y: 1168
                    },
                    {
                        x: 4345,
                        y: 1417
                    },
                    {
                        x: 4346,
                        y: 3335
                    },
                    {
                        x: 4347,
                        y: 2932
                    },
                    {
                        x: 4348,
                        y: 4836
                    },
                    {
                        x: 4349,
                        y: 4845
                    },
                    {
                        x: 4350,
                        y: 571
                    },
                    {
                        x: 4351,
                        y: 4986
                    },
                    {
                        x: 4352,
                        y: 3235
                    },
                    {
                        x: 4353,
                        y: 240
                    },
                    {
                        x: 4354,
                        y: 388
                    },
                    {
                        x: 4355,
                        y: 1474
                    },
                    {
                        x: 4356,
                        y: 2170
                    },
                    {
                        x: 4357,
                        y: 2441
                    },
                    {
                        x: 4358,
                        y: 673
                    },
                    {
                        x: 4359,
                        y: 2771
                    },
                    {
                        x: 4360,
                        y: 1157
                    },
                    {
                        x: 4361,
                        y: 2156
                    },
                    {
                        x: 4362,
                        y: 2912
                    },
                    {
                        x: 4363,
                        y: 3598
                    },
                    {
                        x: 4364,
                        y: 1860
                    },
                    {
                        x: 4365,
                        y: 2688
                    },
                    {
                        x: 4366,
                        y: 740
                    },
                    {
                        x: 4367,
                        y: 4099
                    },
                    {
                        x: 4368,
                        y: 3391
                    },
                    {
                        x: 4369,
                        y: 40
                    },
                    {
                        x: 4370,
                        y: 4857
                    },
                    {
                        x: 4371,
                        y: 1935
                    },
                    {
                        x: 4372,
                        y: 2072
                    },
                    {
                        x: 4373,
                        y: 3279
                    },
                    {
                        x: 4374,
                        y: 3294
                    },
                    {
                        x: 4375,
                        y: 3517
                    },
                    {
                        x: 4376,
                        y: 349
                    },
                    {
                        x: 4377,
                        y: 2781
                    },
                    {
                        x: 4378,
                        y: 3511
                    },
                    {
                        x: 4379,
                        y: 4966
                    },
                    {
                        x: 4380,
                        y: 477
                    },
                    {
                        x: 4381,
                        y: 2065
                    },
                    {
                        x: 4382,
                        y: 3497
                    },
                    {
                        x: 4383,
                        y: 848
                    },
                    {
                        x: 4384,
                        y: 2739
                    },
                    {
                        x: 4385,
                        y: 1716
                    },
                    {
                        x: 4386,
                        y: 3599
                    },
                    {
                        x: 4387,
                        y: 2570
                    },
                    {
                        x: 4388,
                        y: 1634
                    },
                    {
                        x: 4389,
                        y: 4124
                    },
                    {
                        x: 4390,
                        y: 486
                    },
                    {
                        x: 4391,
                        y: 971
                    },
                    {
                        x: 4392,
                        y: 224
                    },
                    {
                        x: 4393,
                        y: 2191
                    },
                    {
                        x: 4394,
                        y: 3880
                    },
                    {
                        x: 4395,
                        y: 2109
                    },
                    {
                        x: 4396,
                        y: 2852
                    },
                    {
                        x: 4397,
                        y: 3067
                    },
                    {
                        x: 4398,
                        y: 748
                    },
                    {
                        x: 4399,
                        y: 2662
                    },
                    {
                        x: 4400,
                        y: 555
                    },
                    {
                        x: 4401,
                        y: 3867
                    },
                    {
                        x: 4402,
                        y: 1950
                    },
                    {
                        x: 4403,
                        y: 3454
                    },
                    {
                        x: 4404,
                        y: 2374
                    },
                    {
                        x: 4405,
                        y: 371
                    },
                    {
                        x: 4406,
                        y: 818
                    },
                    {
                        x: 4407,
                        y: 1738
                    },
                    {
                        x: 4408,
                        y: 413
                    },
                    {
                        x: 4409,
                        y: 2789
                    },
                    {
                        x: 4410,
                        y: 1388
                    },
                    {
                        x: 4411,
                        y: 211
                    },
                    {
                        x: 4412,
                        y: 2958
                    },
                    {
                        x: 4413,
                        y: 3267
                    },
                    {
                        x: 4414,
                        y: 2218
                    },
                    {
                        x: 4415,
                        y: 3461
                    },
                    {
                        x: 4416,
                        y: 4182
                    },
                    {
                        x: 4417,
                        y: 4121
                    },
                    {
                        x: 4418,
                        y: 1755
                    },
                    {
                        x: 4419,
                        y: 3962
                    },
                    {
                        x: 4420,
                        y: 2253
                    },
                    {
                        x: 4421,
                        y: 4016
                    },
                    {
                        x: 4422,
                        y: 4796
                    },
                    {
                        x: 4423,
                        y: 2352
                    },
                    {
                        x: 4424,
                        y: 4200
                    },
                    {
                        x: 4425,
                        y: 2660
                    },
                    {
                        x: 4426,
                        y: 3609
                    },
                    {
                        x: 4427,
                        y: 2875
                    },
                    {
                        x: 4428,
                        y: 4380
                    },
                    {
                        x: 4429,
                        y: 4488
                    },
                    {
                        x: 4430,
                        y: 2210
                    },
                    {
                        x: 4431,
                        y: 3928
                    },
                    {
                        x: 4432,
                        y: 352
                    },
                    {
                        x: 4433,
                        y: 2618
                    },
                    {
                        x: 4434,
                        y: 4117
                    },
                    {
                        x: 4435,
                        y: 1080
                    },
                    {
                        x: 4436,
                        y: 4958
                    },
                    {
                        x: 4437,
                        y: 1233
                    },
                    {
                        x: 4438,
                        y: 3171
                    },
                    {
                        x: 4439,
                        y: 3909
                    },
                    {
                        x: 4440,
                        y: 1982
                    },
                    {
                        x: 4441,
                        y: 2232
                    },
                    {
                        x: 4442,
                        y: 4757
                    },
                    {
                        x: 4443,
                        y: 879
                    },
                    {
                        x: 4444,
                        y: 2856
                    },
                    {
                        x: 4445,
                        y: 781
                    },
                    {
                        x: 4446,
                        y: 4733
                    },
                    {
                        x: 4447,
                        y: 710
                    },
                    {
                        x: 4448,
                        y: 150
                    },
                    {
                        x: 4449,
                        y: 4801
                    },
                    {
                        x: 4450,
                        y: 2885
                    },
                    {
                        x: 4451,
                        y: 3916
                    },
                    {
                        x: 4452,
                        y: 124
                    },
                    {
                        x: 4453,
                        y: 3908
                    },
                    {
                        x: 4454,
                        y: 1126
                    },
                    {
                        x: 4455,
                        y: 3675
                    },
                    {
                        x: 4456,
                        y: 2901
                    },
                    {
                        x: 4457,
                        y: 4638
                    },
                    {
                        x: 4458,
                        y: 4436
                    },
                    {
                        x: 4459,
                        y: 933
                    },
                    {
                        x: 4460,
                        y: 2902
                    },
                    {
                        x: 4461,
                        y: 2582
                    },
                    {
                        x: 4462,
                        y: 415
                    },
                    {
                        x: 4463,
                        y: 363
                    },
                    {
                        x: 4464,
                        y: 2183
                    },
                    {
                        x: 4465,
                        y: 1328
                    },
                    {
                        x: 4466,
                        y: 4960
                    },
                    {
                        x: 4467,
                        y: 4829
                    },
                    {
                        x: 4468,
                        y: 3701
                    },
                    {
                        x: 4469,
                        y: 1674
                    },
                    {
                        x: 4470,
                        y: 3411
                    },
                    {
                        x: 4471,
                        y: 174
                    },
                    {
                        x: 4472,
                        y: 3319
                    },
                    {
                        x: 4473,
                        y: 3540
                    },
                    {
                        x: 4474,
                        y: 1859
                    },
                    {
                        x: 4475,
                        y: 2393
                    },
                    {
                        x: 4476,
                        y: 1615
                    },
                    {
                        x: 4477,
                        y: 2224
                    },
                    {
                        x: 4478,
                        y: 3460
                    },
                    {
                        x: 4479,
                        y: 4466
                    },
                    {
                        x: 4480,
                        y: 4544
                    },
                    {
                        x: 4481,
                        y: 1541
                    },
                    {
                        x: 4482,
                        y: 1869
                    },
                    {
                        x: 4483,
                        y: 2794
                    },
                    {
                        x: 4484,
                        y: 1195
                    },
                    {
                        x: 4485,
                        y: 1574
                    },
                    {
                        x: 4486,
                        y: 2995
                    },
                    {
                        x: 4487,
                        y: 3243
                    },
                    {
                        x: 4488,
                        y: 472
                    },
                    {
                        x: 4489,
                        y: 3309
                    },
                    {
                        x: 4490,
                        y: 695
                    },
                    {
                        x: 4491,
                        y: 875
                    },
                    {
                        x: 4492,
                        y: 3440
                    },
                    {
                        x: 4493,
                        y: 3022
                    },
                    {
                        x: 4494,
                        y: 1552
                    },
                    {
                        x: 4495,
                        y: 3094
                    },
                    {
                        x: 4496,
                        y: 3119
                    },
                    {
                        x: 4497,
                        y: 3618
                    },
                    {
                        x: 4498,
                        y: 2824
                    },
                    {
                        x: 4499,
                        y: 1926
                    },
                    {
                        x: 4500,
                        y: 15
                    },
                    {
                        x: 4501,
                        y: 4026
                    },
                    {
                        x: 4502,
                        y: 1605
                    },
                    {
                        x: 4503,
                        y: 4334
                    },
                    {
                        x: 4504,
                        y: 515
                    },
                    {
                        x: 4505,
                        y: 27
                    },
                    {
                        x: 4506,
                        y: 2357
                    },
                    {
                        x: 4507,
                        y: 601
                    },
                    {
                        x: 4508,
                        y: 4855
                    },
                    {
                        x: 4509,
                        y: 4730
                    },
                    {
                        x: 4510,
                        y: 183
                    },
                    {
                        x: 4511,
                        y: 1496
                    },
                    {
                        x: 4512,
                        y: 1356
                    },
                    {
                        x: 4513,
                        y: 2076
                    },
                    {
                        x: 4514,
                        y: 3907
                    },
                    {
                        x: 4515,
                        y: 2938
                    },
                    {
                        x: 4516,
                        y: 2951
                    },
                    {
                        x: 4517,
                        y: 3765
                    },
                    {
                        x: 4518,
                        y: 926
                    },
                    {
                        x: 4519,
                        y: 2922
                    },
                    {
                        x: 4520,
                        y: 2344
                    },
                    {
                        x: 4521,
                        y: 1803
                    },
                    {
                        x: 4522,
                        y: 3386
                    },
                    {
                        x: 4523,
                        y: 1987
                    },
                    {
                        x: 4524,
                        y: 702
                    },
                    {
                        x: 4525,
                        y: 4619
                    },
                    {
                        x: 4526,
                        y: 3792
                    },
                    {
                        x: 4527,
                        y: 4551
                    },
                    {
                        x: 4528,
                        y: 4931
                    },
                    {
                        x: 4529,
                        y: 3217
                    },
                    {
                        x: 4530,
                        y: 4601
                    },
                    {
                        x: 4531,
                        y: 789
                    },
                    {
                        x: 4532,
                        y: 3203
                    },
                    {
                        x: 4533,
                        y: 3802
                    },
                    {
                        x: 4534,
                        y: 1032
                    },
                    {
                        x: 4535,
                        y: 2721
                    },
                    {
                        x: 4536,
                        y: 1688
                    },
                    {
                        x: 4537,
                        y: 2679
                    },
                    {
                        x: 4538,
                        y: 4915
                    },
                    {
                        x: 4539,
                        y: 4389
                    },
                    {
                        x: 4540,
                        y: 1445
                    },
                    {
                        x: 4541,
                        y: 385
                    },
                    {
                        x: 4542,
                        y: 4643
                    },
                    {
                        x: 4543,
                        y: 4031
                    },
                    {
                        x: 4544,
                        y: 2206
                    },
                    {
                        x: 4545,
                        y: 3673
                    },
                    {
                        x: 4546,
                        y: 897
                    },
                    {
                        x: 4547,
                        y: 4061
                    },
                    {
                        x: 4548,
                        y: 2756
                    },
                    {
                        x: 4549,
                        y: 4329
                    },
                    {
                        x: 4550,
                        y: 2557
                    },
                    {
                        x: 4551,
                        y: 4421
                    },
                    {
                        x: 4552,
                        y: 2051
                    },
                    {
                        x: 4553,
                        y: 3630
                    },
                    {
                        x: 4554,
                        y: 1158
                    },
                    {
                        x: 4555,
                        y: 4681
                    },
                    {
                        x: 4556,
                        y: 755
                    },
                    {
                        x: 4557,
                        y: 3943
                    },
                    {
                        x: 4558,
                        y: 1661
                    },
                    {
                        x: 4559,
                        y: 374
                    },
                    {
                        x: 4560,
                        y: 3124
                    },
                    {
                        x: 4561,
                        y: 4891
                    },
                    {
                        x: 4562,
                        y: 3679
                    },
                    {
                        x: 4563,
                        y: 1817
                    },
                    {
                        x: 4564,
                        y: 1570
                    },
                    {
                        x: 4565,
                        y: 920
                    },
                    {
                        x: 4566,
                        y: 1815
                    },
                    {
                        x: 4567,
                        y: 2758
                    },
                    {
                        x: 4568,
                        y: 1993
                    },
                    {
                        x: 4569,
                        y: 1508
                    },
                    {
                        x: 4570,
                        y: 4448
                    },
                    {
                        x: 4571,
                        y: 1451
                    },
                    {
                        x: 4572,
                        y: 608
                    },
                    {
                        x: 4573,
                        y: 1146
                    },
                    {
                        x: 4574,
                        y: 567
                    },
                    {
                        x: 4575,
                        y: 885
                    },
                    {
                        x: 4576,
                        y: 3712
                    },
                    {
                        x: 4577,
                        y: 4002
                    },
                    {
                        x: 4578,
                        y: 2749
                    },
                    {
                        x: 4579,
                        y: 2024
                    },
                    {
                        x: 4580,
                        y: 1606
                    },
                    {
                        x: 4581,
                        y: 393
                    },
                    {
                        x: 4582,
                        y: 1179
                    },
                    {
                        x: 4583,
                        y: 3556
                    },
                    {
                        x: 4584,
                        y: 1062
                    },
                    {
                        x: 4585,
                        y: 1412
                    },
                    {
                        x: 4586,
                        y: 958
                    },
                    {
                        x: 4587,
                        y: 513
                    },
                    {
                        x: 4588,
                        y: 3752
                    },
                    {
                        x: 4589,
                        y: 2600
                    },
                    {
                        x: 4590,
                        y: 4560
                    },
                    {
                        x: 4591,
                        y: 2408
                    },
                    {
                        x: 4592,
                        y: 1268
                    },
                    {
                        x: 4593,
                        y: 1008
                    },
                    {
                        x: 4594,
                        y: 3410
                    },
                    {
                        x: 4595,
                        y: 1624
                    },
                    {
                        x: 4596,
                        y: 3977
                    },
                    {
                        x: 4597,
                        y: 4591
                    },
                    {
                        x: 4598,
                        y: 4646
                    },
                    {
                        x: 4599,
                        y: 3658
                    },
                    {
                        x: 4600,
                        y: 2245
                    },
                    {
                        x: 4601,
                        y: 3624
                    },
                    {
                        x: 4602,
                        y: 3137
                    },
                    {
                        x: 4603,
                        y: 1351
                    },
                    {
                        x: 4604,
                        y: 1315
                    },
                    {
                        x: 4605,
                        y: 4739
                    },
                    {
                        x: 4606,
                        y: 1322
                    },
                    {
                        x: 4607,
                        y: 4644
                    },
                    {
                        x: 4608,
                        y: 2676
                    },
                    {
                        x: 4609,
                        y: 3886
                    },
                    {
                        x: 4610,
                        y: 4639
                    },
                    {
                        x: 4611,
                        y: 1857
                    },
                    {
                        x: 4612,
                        y: 952
                    },
                    {
                        x: 4613,
                        y: 1653
                    },
                    {
                        x: 4614,
                        y: 1277
                    },
                    {
                        x: 4615,
                        y: 116
                    },
                    {
                        x: 4616,
                        y: 840
                    },
                    {
                        x: 4617,
                        y: 713
                    },
                    {
                        x: 4618,
                        y: 1769
                    },
                    {
                        x: 4619,
                        y: 2832
                    },
                    {
                        x: 4620,
                        y: 1131
                    },
                    {
                        x: 4621,
                        y: 4258
                    },
                    {
                        x: 4622,
                        y: 4586
                    },
                    {
                        x: 4623,
                        y: 496
                    },
                    {
                        x: 4624,
                        y: 1085
                    },
                    {
                        x: 4625,
                        y: 2697
                    },
                    {
                        x: 4626,
                        y: 1778
                    },
                    {
                        x: 4627,
                        y: 1622
                    },
                    {
                        x: 4628,
                        y: 3948
                    },
                    {
                        x: 4629,
                        y: 1882
                    },
                    {
                        x: 4630,
                        y: 776
                    },
                    {
                        x: 4631,
                        y: 625
                    },
                    {
                        x: 4632,
                        y: 2323
                    },
                    {
                        x: 4633,
                        y: 272
                    },
                    {
                        x: 4634,
                        y: 3329
                    },
                    {
                        x: 4635,
                        y: 1045
                    },
                    {
                        x: 4636,
                        y: 45
                    },
                    {
                        x: 4637,
                        y: 2654
                    },
                    {
                        x: 4638,
                        y: 1588
                    },
                    {
                        x: 4639,
                        y: 1734
                    },
                    {
                        x: 4640,
                        y: 1917
                    },
                    {
                        x: 4641,
                        y: 1551
                    },
                    {
                        x: 4642,
                        y: 649
                    },
                    {
                        x: 4643,
                        y: 3152
                    },
                    {
                        x: 4644,
                        y: 3748
                    },
                    {
                        x: 4645,
                        y: 690
                    },
                    {
                        x: 4646,
                        y: 2141
                    },
                    {
                        x: 4647,
                        y: 3522
                    },
                    {
                        x: 4648,
                        y: 1301
                    },
                    {
                        x: 4649,
                        y: 686
                    },
                    {
                        x: 4650,
                        y: 646
                    },
                    {
                        x: 4651,
                        y: 826
                    },
                    {
                        x: 4652,
                        y: 4167
                    },
                    {
                        x: 4653,
                        y: 2608
                    },
                    {
                        x: 4654,
                        y: 4118
                    },
                    {
                        x: 4655,
                        y: 4860
                    },
                    {
                        x: 4656,
                        y: 1348
                    },
                    {
                        x: 4657,
                        y: 1828
                    },
                    {
                        x: 4658,
                        y: 883
                    },
                    {
                        x: 4659,
                        y: 4282
                    },
                    {
                        x: 4660,
                        y: 2263
                    },
                    {
                        x: 4661,
                        y: 1839
                    },
                    {
                        x: 4662,
                        y: 1957
                    },
                    {
                        x: 4663,
                        y: 4456
                    },
                    {
                        x: 4664,
                        y: 60
                    },
                    {
                        x: 4665,
                        y: 1449
                    },
                    {
                        x: 4666,
                        y: 1410
                    },
                    {
                        x: 4667,
                        y: 4854
                    },
                    {
                        x: 4668,
                        y: 4902
                    },
                    {
                        x: 4669,
                        y: 2118
                    },
                    {
                        x: 4670,
                        y: 2543
                    },
                    {
                        x: 4671,
                        y: 2496
                    },
                    {
                        x: 4672,
                        y: 1154
                    },
                    {
                        x: 4673,
                        y: 2927
                    },
                    {
                        x: 4674,
                        y: 2267
                    },
                    {
                        x: 4675,
                        y: 4714
                    },
                    {
                        x: 4676,
                        y: 266
                    },
                    {
                        x: 4677,
                        y: 3632
                    },
                    {
                        x: 4678,
                        y: 1185
                    },
                    {
                        x: 4679,
                        y: 273
                    },
                    {
                        x: 4680,
                        y: 4571
                    },
                    {
                        x: 4681,
                        y: 949
                    },
                    {
                        x: 4682,
                        y: 3071
                    },
                    {
                        x: 4683,
                        y: 3787
                    },
                    {
                        x: 4684,
                        y: 1856
                    },
                    {
                        x: 4685,
                        y: 2549
                    },
                    {
                        x: 4686,
                        y: 108
                    },
                    {
                        x: 4687,
                        y: 2857
                    },
                    {
                        x: 4688,
                        y: 1100
                    },
                    {
                        x: 4689,
                        y: 3681
                    },
                    {
                        x: 4690,
                        y: 556
                    },
                    {
                        x: 4691,
                        y: 2407
                    },
                    {
                        x: 4692,
                        y: 4689
                    },
                    {
                        x: 4693,
                        y: 2212
                    },
                    {
                        x: 4694,
                        y: 2370
                    },
                    {
                        x: 4695,
                        y: 1283
                    },
                    {
                        x: 4696,
                        y: 4210
                    },
                    {
                        x: 4697,
                        y: 1555
                    },
                    {
                        x: 4698,
                        y: 1435
                    },
                    {
                        x: 4699,
                        y: 3750
                    },
                    {
                        x: 4700,
                        y: 422
                    },
                    {
                        x: 4701,
                        y: 762
                    },
                    {
                        x: 4702,
                        y: 4264
                    },
                    {
                        x: 4703,
                        y: 3569
                    },
                    {
                        x: 4704,
                        y: 364
                    },
                    {
                        x: 4705,
                        y: 3803
                    },
                    {
                        x: 4706,
                        y: 530
                    },
                    {
                        x: 4707,
                        y: 3534
                    },
                    {
                        x: 4708,
                        y: 2698
                    },
                    {
                        x: 4709,
                        y: 644
                    },
                    {
                        x: 4710,
                        y: 4841
                    },
                    {
                        x: 4711,
                        y: 1645
                    },
                    {
                        x: 4712,
                        y: 4213
                    },
                    {
                        x: 4713,
                        y: 24
                    },
                    {
                        x: 4714,
                        y: 2900
                    },
                    {
                        x: 4715,
                        y: 3450
                    },
                    {
                        x: 4716,
                        y: 1442
                    },
                    {
                        x: 4717,
                        y: 4613
                    },
                    {
                        x: 4718,
                        y: 566
                    },
                    {
                        x: 4719,
                        y: 2535
                    },
                    {
                        x: 4720,
                        y: 1939
                    },
                    {
                        x: 4721,
                        y: 3647
                    },
                    {
                        x: 4722,
                        y: 4974
                    },
                    {
                        x: 4723,
                        y: 4300
                    },
                    {
                        x: 4724,
                        y: 377
                    },
                    {
                        x: 4725,
                        y: 2584
                    },
                    {
                        x: 4726,
                        y: 3873
                    },
                    {
                        x: 4727,
                        y: 2129
                    },
                    {
                        x: 4728,
                        y: 1992
                    },
                    {
                        x: 4729,
                        y: 4824
                    },
                    {
                        x: 4730,
                        y: 239
                    },
                    {
                        x: 4731,
                        y: 1834
                    },
                    {
                        x: 4732,
                        y: 205
                    },
                    {
                        x: 4733,
                        y: 1011
                    },
                    {
                        x: 4734,
                        y: 4574
                    },
                    {
                        x: 4735,
                        y: 4344
                    },
                    {
                        x: 4736,
                        y: 4009
                    },
                    {
                        x: 4737,
                        y: 1314
                    },
                    {
                        x: 4738,
                        y: 306
                    },
                    {
                        x: 4739,
                        y: 4482
                    },
                    {
                        x: 4740,
                        y: 3112
                    },
                    {
                        x: 4741,
                        y: 4484
                    },
                    {
                        x: 4742,
                        y: 4935
                    },
                    {
                        x: 4743,
                        y: 1162
                    },
                    {
                        x: 4744,
                        y: 2670
                    },
                    {
                        x: 4745,
                        y: 79
                    },
                    {
                        x: 4746,
                        y: 4911
                    },
                    {
                        x: 4747,
                        y: 4624
                    },
                    {
                        x: 4748,
                        y: 167
                    },
                    {
                        x: 4749,
                        y: 2563
                    },
                    {
                        x: 4750,
                        y: 3533
                    },
                    {
                        x: 4751,
                        y: 1579
                    },
                    {
                        x: 4752,
                        y: 3154
                    },
                    {
                        x: 4753,
                        y: 900
                    },
                    {
                        x: 4754,
                        y: 1012
                    },
                    {
                        x: 4755,
                        y: 2795
                    },
                    {
                        x: 4756,
                        y: 3321
                    },
                    {
                        x: 4757,
                        y: 2291
                    },
                    {
                        x: 4758,
                        y: 1069
                    },
                    {
                        x: 4759,
                        y: 4927
                    },
                    {
                        x: 4760,
                        y: 3714
                    },
                    {
                        x: 4761,
                        y: 679
                    },
                    {
                        x: 4762,
                        y: 3428
                    },
                    {
                        x: 4763,
                        y: 4201
                    },
                    {
                        x: 4764,
                        y: 4809
                    },
                    {
                        x: 4765,
                        y: 2428
                    },
                    {
                        x: 4766,
                        y: 4873
                    },
                    {
                        x: 4767,
                        y: 2467
                    },
                    {
                        x: 4768,
                        y: 1373
                    },
                    {
                        x: 4769,
                        y: 753
                    },
                    {
                        x: 4770,
                        y: 4179
                    },
                    {
                        x: 4771,
                        y: 4928
                    },
                    {
                        x: 4772,
                        y: 2996
                    },
                    {
                        x: 4773,
                        y: 2415
                    },
                    {
                        x: 4774,
                        y: 1647
                    },
                    {
                        x: 4775,
                        y: 3774
                    },
                    {
                        x: 4776,
                        y: 1440
                    },
                    {
                        x: 4777,
                        y: 1456
                    },
                    {
                        x: 4778,
                        y: 229
                    },
                    {
                        x: 4779,
                        y: 2404
                    },
                    {
                        x: 4780,
                        y: 1594
                    },
                    {
                        x: 4781,
                        y: 4677
                    },
                    {
                        x: 4782,
                        y: 4148
                    },
                    {
                        x: 4783,
                        y: 2265
                    },
                    {
                        x: 4784,
                        y: 200
                    },
                    {
                        x: 4785,
                        y: 2240
                    },
                    {
                        x: 4786,
                        y: 3042
                    },
                    {
                        x: 4787,
                        y: 2765
                    },
                    {
                        x: 4788,
                        y: 2168
                    },
                    {
                        x: 4789,
                        y: 4048
                    },
                    {
                        x: 4790,
                        y: 1384
                    },
                    {
                        x: 4791,
                        y: 1061
                    },
                    {
                        x: 4792,
                        y: 2468
                    },
                    {
                        x: 4793,
                        y: 4556
                    },
                    {
                        x: 4794,
                        y: 1641
                    },
                    {
                        x: 4795,
                        y: 7
                    },
                    {
                        x: 4796,
                        y: 3047
                    },
                    {
                        x: 4797,
                        y: 2336
                    },
                    {
                        x: 4798,
                        y: 3375
                    },
                    {
                        x: 4799,
                        y: 2036
                    },
                    {
                        x: 4800,
                        y: 68
                    },
                    {
                        x: 4801,
                        y: 4095
                    },
                    {
                        x: 4802,
                        y: 3893
                    },
                    {
                        x: 4803,
                        y: 878
                    },
                    {
                        x: 4804,
                        y: 4585
                    },
                    {
                        x: 4805,
                        y: 4450
                    },
                    {
                        x: 4806,
                        y: 3585
                    },
                    {
                        x: 4807,
                        y: 2236
                    },
                    {
                        x: 4808,
                        y: 558
                    },
                    {
                        x: 4809,
                        y: 1497
                    },
                    {
                        x: 4810,
                        y: 136
                    },
                    {
                        x: 4811,
                        y: 2817
                    },
                    {
                        x: 4812,
                        y: 4187
                    },
                    {
                        x: 4813,
                        y: 1681
                    },
                    {
                        x: 4814,
                        y: 88
                    },
                    {
                        x: 4815,
                        y: 3144
                    },
                    {
                        x: 4816,
                        y: 4227
                    },
                    {
                        x: 4817,
                        y: 562
                    },
                    {
                        x: 4818,
                        y: 2680
                    },
                    {
                        x: 4819,
                        y: 6
                    },
                    {
                        x: 4820,
                        y: 2653
                    },
                    {
                        x: 4821,
                        y: 942
                    },
                    {
                        x: 4822,
                        y: 3024
                    },
                    {
                        x: 4823,
                        y: 896
                    },
                    {
                        x: 4824,
                        y: 2091
                    },
                    {
                        x: 4825,
                        y: 2836
                    },
                    {
                        x: 4826,
                        y: 4160
                    },
                    {
                        x: 4827,
                        y: 2871
                    },
                    {
                        x: 4828,
                        y: 1865
                    },
                    {
                        x: 4829,
                        y: 3759
                    },
                    {
                        x: 4830,
                        y: 2257
                    },
                    {
                        x: 4831,
                        y: 2870
                    },
                    {
                        x: 4832,
                        y: 142
                    },
                    {
                        x: 4833,
                        y: 4716
                    },
                    {
                        x: 4834,
                        y: 3175
                    },
                    {
                        x: 4835,
                        y: 1924
                    },
                    {
                        x: 4836,
                        y: 732
                    },
                    {
                        x: 4837,
                        y: 4151
                    },
                    {
                        x: 4838,
                        y: 1561
                    },
                    {
                        x: 4839,
                        y: 1130
                    },
                    {
                        x: 4840,
                        y: 1894
                    },
                    {
                        x: 4841,
                        y: 255
                    },
                    {
                        x: 4842,
                        y: 4162
                    },
                    {
                        x: 4843,
                        y: 2626
                    },
                    {
                        x: 4844,
                        y: 241
                    },
                    {
                        x: 4845,
                        y: 1472
                    },
                    {
                        x: 4846,
                        y: 1265
                    },
                    {
                        x: 4847,
                        y: 421
                    },
                    {
                        x: 4848,
                        y: 2309
                    },
                    {
                        x: 4849,
                        y: 85
                    },
                    {
                        x: 4850,
                        y: 2364
                    },
                    {
                        x: 4851,
                        y: 3271
                    },
                    {
                        x: 4852,
                        y: 4952
                    },
                    {
                        x: 4853,
                        y: 4235
                    },
                    {
                        x: 4854,
                        y: 4133
                    },
                    {
                        x: 4855,
                        y: 1518
                    },
                    {
                        x: 4856,
                        y: 252
                    },
                    {
                        x: 4857,
                        y: 3468
                    },
                    {
                        x: 4858,
                        y: 372
                    },
                    {
                        x: 4859,
                        y: 4089
                    },
                    {
                        x: 4860,
                        y: 2255
                    },
                    {
                        x: 4861,
                        y: 4238
                    },
                    {
                        x: 4862,
                        y: 2419
                    },
                    {
                        x: 4863,
                        y: 462
                    },
                    {
                        x: 4864,
                        y: 3656
                    },
                    {
                        x: 4865,
                        y: 4299
                    },
                    {
                        x: 4866,
                        y: 827
                    },
                    {
                        x: 4867,
                        y: 4453
                    },
                    {
                        x: 4868,
                        y: 2710
                    },
                    {
                        x: 4869,
                        y: 3053
                    },
                    {
                        x: 4870,
                        y: 141
                    },
                    {
                        x: 4871,
                        y: 4894
                    },
                    {
                        x: 4872,
                        y: 2527
                    },
                    {
                        x: 4873,
                        y: 1342
                    },
                    {
                        x: 4874,
                        y: 3136
                    },
                    {
                        x: 4875,
                        y: 2638
                    },
                    {
                        x: 4876,
                        y: 3122
                    },
                    {
                        x: 4877,
                        y: 2238
                    },
                    {
                        x: 4878,
                        y: 3956
                    },
                    {
                        x: 4879,
                        y: 3935
                    },
                    {
                        x: 4880,
                        y: 1299
                    },
                    {
                        x: 4881,
                        y: 4072
                    },
                    {
                        x: 4882,
                        y: 3602
                    },
                    {
                        x: 4883,
                        y: 682
                    },
                    {
                        x: 4884,
                        y: 227
                    },
                    {
                        x: 4885,
                        y: 347
                    },
                    {
                        x: 4886,
                        y: 4577
                    },
                    {
                        x: 4887,
                        y: 1495
                    },
                    {
                        x: 4888,
                        y: 2351
                    },
                    {
                        x: 4889,
                        y: 1473
                    },
                    {
                        x: 4890,
                        y: 937
                    },
                    {
                        x: 4891,
                        y: 1347
                    },
                    {
                        x: 4892,
                        y: 2434
                    },
                    {
                        x: 4893,
                        y: 1809
                    },
                    {
                        x: 4894,
                        y: 2443
                    },
                    {
                        x: 4895,
                        y: 3121
                    },
                    {
                        x: 4896,
                        y: 3680
                    },
                    {
                        x: 4897,
                        y: 1596
                    },
                    {
                        x: 4898,
                        y: 2876
                    },
                    {
                        x: 4899,
                        y: 931
                    },
                    {
                        x: 4900,
                        y: 4923
                    },
                    {
                        x: 4901,
                        y: 4724
                    },
                    {
                        x: 4902,
                        y: 4611
                    },
                    {
                        x: 4903,
                        y: 2963
                    },
                    {
                        x: 4904,
                        y: 2553
                    },
                    {
                        x: 4905,
                        y: 3344
                    },
                    {
                        x: 4906,
                        y: 1107
                    },
                    {
                        x: 4907,
                        y: 3848
                    },
                    {
                        x: 4908,
                        y: 874
                    },
                    {
                        x: 4909,
                        y: 4553
                    },
                    {
                        x: 4910,
                        y: 3173
                    },
                    {
                        x: 4911,
                        y: 4920
                    },
                    {
                        x: 4912,
                        y: 2064
                    },
                    {
                        x: 4913,
                        y: 4832
                    },
                    {
                        x: 4914,
                        y: 4721
                    },
                    {
                        x: 4915,
                        y: 4047
                    },
                    {
                        x: 4916,
                        y: 3813
                    },
                    {
                        x: 4917,
                        y: 4098
                    },
                    {
                        x: 4918,
                        y: 3009
                    },
                    {
                        x: 4919,
                        y: 4963
                    },
                    {
                        x: 4920,
                        y: 4535
                    },
                    {
                        x: 4921,
                        y: 957
                    },
                    {
                        x: 4922,
                        y: 917
                    },
                    {
                        x: 4923,
                        y: 3743
                    },
                    {
                        x: 4924,
                        y: 3085
                    },
                    {
                        x: 4925,
                        y: 790
                    },
                    {
                        x: 4926,
                        y: 1309
                    },
                    {
                        x: 4927,
                        y: 197
                    },
                    {
                        x: 4928,
                        y: 63
                    },
                    {
                        x: 4929,
                        y: 2244
                    },
                    {
                        x: 4930,
                        y: 4131
                    },
                    {
                        x: 4931,
                        y: 2674
                    },
                    {
                        x: 4932,
                        y: 3289
                    },
                    {
                        x: 4933,
                        y: 3970
                    },
                    {
                        x: 4934,
                        y: 4468
                    },
                    {
                        x: 4935,
                        y: 2947
                    },
                    {
                        x: 4936,
                        y: 4357
                    },
                    {
                        x: 4937,
                        y: 1395
                    },
                    {
                        x: 4938,
                        y: 3536
                    },
                    {
                        x: 4939,
                        y: 2548
                    },
                    {
                        x: 4940,
                        y: 4142
                    },
                    {
                        x: 4941,
                        y: 3365
                    },
                    {
                        x: 4942,
                        y: 3374
                    },
                    {
                        x: 4943,
                        y: 4316
                    },
                    {
                        x: 4944,
                        y: 1482
                    },
                    {
                        x: 4945,
                        y: 3373
                    },
                    {
                        x: 4946,
                        y: 4567
                    },
                    {
                        x: 4947,
                        y: 966
                    },
                    {
                        x: 4948,
                        y: 299
                    },
                    {
                        x: 4949,
                        y: 721
                    },
                    {
                        x: 4950,
                        y: 3395
                    },
                    {
                        x: 4951,
                        y: 4315
                    },
                    {
                        x: 4952,
                        y: 1936
                    },
                    {
                        x: 4953,
                        y: 2590
                    },
                    {
                        x: 4954,
                        y: 863
                    },
                    {
                        x: 4955,
                        y: 222
                    },
                    {
                        x: 4956,
                        y: 4527
                    },
                    {
                        x: 4957,
                        y: 3622
                    },
                    {
                        x: 4958,
                        y: 970
                    },
                    {
                        x: 4959,
                        y: 4195
                    },
                    {
                        x: 4960,
                        y: 320
                    },
                    {
                        x: 4961,
                        y: 3347
                    },
                    {
                        x: 4962,
                        y: 3131
                    },
                    {
                        x: 4963,
                        y: 3194
                    },
                    {
                        x: 4964,
                        y: 1102
                    },
                    {
                        x: 4965,
                        y: 251
                    },
                    {
                        x: 4966,
                        y: 3075
                    },
                    {
                        x: 4967,
                        y: 91
                    },
                    {
                        x: 4968,
                        y: 2478
                    },
                    {
                        x: 4969,
                        y: 2827
                    },
                    {
                        x: 4970,
                        y: 3865
                    },
                    {
                        x: 4971,
                        y: 553
                    },
                    {
                        x: 4972,
                        y: 2779
                    },
                    {
                        x: 4973,
                        y: 963
                    },
                    {
                        x: 4974,
                        y: 2731
                    },
                    {
                        x: 4975,
                        y: 1611
                    },
                    {
                        x: 4976,
                        y: 2981
                    },
                    {
                        x: 4977,
                        y: 1913
                    },
                    {
                        x: 4978,
                        y: 4231
                    },
                    {
                        x: 4979,
                        y: 4612
                    },
                    {
                        x: 4980,
                        y: 1760
                    },
                    {
                        x: 4981,
                        y: 2213
                    },
                    {
                        x: 4982,
                        y: 3138
                    },
                    {
                        x: 4983,
                        y: 1542
                    },
                    {
                        x: 4984,
                        y: 2718
                    },
                    {
                        x: 4985,
                        y: 3858
                    },
                    {
                        x: 4986,
                        y: 1675
                    },
                    {
                        x: 4987,
                        y: 3406
                    },
                    {
                        x: 4988,
                        y: 4106
                    },
                    {
                        x: 4989,
                        y: 3416
                    },
                    {
                        x: 4990,
                        y: 3098
                    },
                    {
                        x: 4991,
                        y: 3545
                    },
                    {
                        x: 4992,
                        y: 2741
                    },
                    {
                        x: 4993,
                        y: 4490
                    },
                    {
                        x: 4994,
                        y: 4022
                    },
                    {
                        x: 4995,
                        y: 4205
                    },
                    {
                        x: 4996,
                        y: 3488
                    },
                    {
                        x: 4997,
                        y: 1465
                    },
                    {
                        x: 4998,
                        y: 298
                    },
                    {
                        x: 4999,
                        y: 1617
                    },
                    {
                        x: 5000,
                        y: 4286
                    }
                ],
                backgroundColor: "rgb(255, 99, 132)"
            }
        ]
    };
    new (0, _autoDefault.default)(document.getElementById("shuffled_5k"), {
        type: "scatter",
        data: data,
        options: {
            pointRadius: 2.3,
            scales: {
                x: {
                    type: "linear",
                    position: "bottom"
                }
            },
            plugins: {
                zoom: {
                    zoom: {
                        wheel: {
                            enabled: true
                        },
                        pinch: {
                            enabled: true
                        },
                        mode: "xy"
                    },
                    pan: {
                        enabled: true,
                        mode: "xy"
                    }
                }
            }
        }
    });
})();

},{"chart.js/auto":"d8NN9","chartjs-plugin-zoom":"kMtu7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d8NN9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _chartJs = require("../dist/chart.js");
parcelHelpers.exportAll(_chartJs, exports);
(0, _chartJs.Chart).register(...(0, _chartJs.registerables));
exports.default = (0, _chartJs.Chart);

},{"../dist/chart.js":"ipU8D","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ipU8D":[function(require,module,exports) {
/*!
 * Chart.js v4.4.4
 * https://www.chartjs.org
 * (c) 2024 Chart.js Contributors
 * Released under the MIT License
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Animation", ()=>Animation);
parcelHelpers.export(exports, "Animations", ()=>Animations);
parcelHelpers.export(exports, "ArcElement", ()=>ArcElement);
parcelHelpers.export(exports, "BarController", ()=>BarController);
parcelHelpers.export(exports, "BarElement", ()=>BarElement);
parcelHelpers.export(exports, "BasePlatform", ()=>BasePlatform);
parcelHelpers.export(exports, "BasicPlatform", ()=>BasicPlatform);
parcelHelpers.export(exports, "BubbleController", ()=>BubbleController);
parcelHelpers.export(exports, "CategoryScale", ()=>CategoryScale);
parcelHelpers.export(exports, "Chart", ()=>Chart);
parcelHelpers.export(exports, "Colors", ()=>plugin_colors);
parcelHelpers.export(exports, "DatasetController", ()=>DatasetController);
parcelHelpers.export(exports, "Decimation", ()=>plugin_decimation);
parcelHelpers.export(exports, "DomPlatform", ()=>DomPlatform);
parcelHelpers.export(exports, "DoughnutController", ()=>DoughnutController);
parcelHelpers.export(exports, "Element", ()=>Element);
parcelHelpers.export(exports, "Filler", ()=>index);
parcelHelpers.export(exports, "Interaction", ()=>Interaction);
parcelHelpers.export(exports, "Legend", ()=>plugin_legend);
parcelHelpers.export(exports, "LineController", ()=>LineController);
parcelHelpers.export(exports, "LineElement", ()=>LineElement);
parcelHelpers.export(exports, "LinearScale", ()=>LinearScale);
parcelHelpers.export(exports, "LogarithmicScale", ()=>LogarithmicScale);
parcelHelpers.export(exports, "PieController", ()=>PieController);
parcelHelpers.export(exports, "PointElement", ()=>PointElement);
parcelHelpers.export(exports, "PolarAreaController", ()=>PolarAreaController);
parcelHelpers.export(exports, "RadarController", ()=>RadarController);
parcelHelpers.export(exports, "RadialLinearScale", ()=>RadialLinearScale);
parcelHelpers.export(exports, "Scale", ()=>Scale);
parcelHelpers.export(exports, "ScatterController", ()=>ScatterController);
parcelHelpers.export(exports, "SubTitle", ()=>plugin_subtitle);
parcelHelpers.export(exports, "Ticks", ()=>(0, _helpersSegmentJs.aL));
parcelHelpers.export(exports, "TimeScale", ()=>TimeScale);
parcelHelpers.export(exports, "TimeSeriesScale", ()=>TimeSeriesScale);
parcelHelpers.export(exports, "Title", ()=>plugin_title);
parcelHelpers.export(exports, "Tooltip", ()=>plugin_tooltip);
parcelHelpers.export(exports, "_adapters", ()=>adapters);
parcelHelpers.export(exports, "_detectPlatform", ()=>_detectPlatform);
parcelHelpers.export(exports, "animator", ()=>animator);
parcelHelpers.export(exports, "controllers", ()=>controllers);
parcelHelpers.export(exports, "defaults", ()=>(0, _helpersSegmentJs.d));
parcelHelpers.export(exports, "elements", ()=>elements);
parcelHelpers.export(exports, "layouts", ()=>layouts);
parcelHelpers.export(exports, "plugins", ()=>plugins);
parcelHelpers.export(exports, "registerables", ()=>registerables);
parcelHelpers.export(exports, "registry", ()=>registry);
parcelHelpers.export(exports, "scales", ()=>scales);
var _helpersSegmentJs = require("./chunks/helpers.segment.js");
var _color = require("@kurkle/color");
class Animator {
    constructor(){
        this._request = null;
        this._charts = new Map();
        this._running = false;
        this._lastDate = undefined;
    }
    _notify(chart, anims, date, type) {
        const callbacks = anims.listeners[type];
        const numSteps = anims.duration;
        callbacks.forEach((fn)=>fn({
                chart,
                initial: anims.initial,
                numSteps,
                currentStep: Math.min(date - anims.start, numSteps)
            }));
    }
    _refresh() {
        if (this._request) return;
        this._running = true;
        this._request = (0, _helpersSegmentJs.r).call(window, ()=>{
            this._update();
            this._request = null;
            if (this._running) this._refresh();
        });
    }
    _update(date = Date.now()) {
        let remaining = 0;
        this._charts.forEach((anims, chart)=>{
            if (!anims.running || !anims.items.length) return;
            const items = anims.items;
            let i = items.length - 1;
            let draw = false;
            let item;
            for(; i >= 0; --i){
                item = items[i];
                if (item._active) {
                    if (item._total > anims.duration) anims.duration = item._total;
                    item.tick(date);
                    draw = true;
                } else {
                    items[i] = items[items.length - 1];
                    items.pop();
                }
            }
            if (draw) {
                chart.draw();
                this._notify(chart, anims, date, "progress");
            }
            if (!items.length) {
                anims.running = false;
                this._notify(chart, anims, date, "complete");
                anims.initial = false;
            }
            remaining += items.length;
        });
        this._lastDate = date;
        if (remaining === 0) this._running = false;
    }
    _getAnims(chart) {
        const charts = this._charts;
        let anims = charts.get(chart);
        if (!anims) {
            anims = {
                running: false,
                initial: true,
                items: [],
                listeners: {
                    complete: [],
                    progress: []
                }
            };
            charts.set(chart, anims);
        }
        return anims;
    }
    listen(chart, event, cb) {
        this._getAnims(chart).listeners[event].push(cb);
    }
    add(chart, items) {
        if (!items || !items.length) return;
        this._getAnims(chart).items.push(...items);
    }
    has(chart) {
        return this._getAnims(chart).items.length > 0;
    }
    start(chart) {
        const anims = this._charts.get(chart);
        if (!anims) return;
        anims.running = true;
        anims.start = Date.now();
        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);
        this._refresh();
    }
    running(chart) {
        if (!this._running) return false;
        const anims = this._charts.get(chart);
        if (!anims || !anims.running || !anims.items.length) return false;
        return true;
    }
    stop(chart) {
        const anims = this._charts.get(chart);
        if (!anims || !anims.items.length) return;
        const items = anims.items;
        let i = items.length - 1;
        for(; i >= 0; --i)items[i].cancel();
        anims.items = [];
        this._notify(chart, anims, Date.now(), "complete");
    }
    remove(chart) {
        return this._charts.delete(chart);
    }
}
var animator = /* #__PURE__ */ new Animator();
const transparent = "transparent";
const interpolators = {
    boolean (from, to, factor) {
        return factor > 0.5 ? to : from;
    },
    color (from, to, factor) {
        const c0 = (0, _helpersSegmentJs.c)(from || transparent);
        const c1 = c0.valid && (0, _helpersSegmentJs.c)(to || transparent);
        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;
    },
    number (from, to, factor) {
        return from + (to - from) * factor;
    }
};
class Animation {
    constructor(cfg, target, prop, to){
        const currentValue = target[prop];
        to = (0, _helpersSegmentJs.a)([
            cfg.to,
            to,
            currentValue,
            cfg.from
        ]);
        const from = (0, _helpersSegmentJs.a)([
            cfg.from,
            currentValue,
            to
        ]);
        this._active = true;
        this._fn = cfg.fn || interpolators[cfg.type || typeof from];
        this._easing = (0, _helpersSegmentJs.e)[cfg.easing] || (0, _helpersSegmentJs.e).linear;
        this._start = Math.floor(Date.now() + (cfg.delay || 0));
        this._duration = this._total = Math.floor(cfg.duration);
        this._loop = !!cfg.loop;
        this._target = target;
        this._prop = prop;
        this._from = from;
        this._to = to;
        this._promises = undefined;
    }
    active() {
        return this._active;
    }
    update(cfg, to, date) {
        if (this._active) {
            this._notify(false);
            const currentValue = this._target[this._prop];
            const elapsed = date - this._start;
            const remain = this._duration - elapsed;
            this._start = date;
            this._duration = Math.floor(Math.max(remain, cfg.duration));
            this._total += elapsed;
            this._loop = !!cfg.loop;
            this._to = (0, _helpersSegmentJs.a)([
                cfg.to,
                to,
                currentValue,
                cfg.from
            ]);
            this._from = (0, _helpersSegmentJs.a)([
                cfg.from,
                currentValue,
                to
            ]);
        }
    }
    cancel() {
        if (this._active) {
            this.tick(Date.now());
            this._active = false;
            this._notify(false);
        }
    }
    tick(date) {
        const elapsed = date - this._start;
        const duration = this._duration;
        const prop = this._prop;
        const from = this._from;
        const loop = this._loop;
        const to = this._to;
        let factor;
        this._active = from !== to && (loop || elapsed < duration);
        if (!this._active) {
            this._target[prop] = to;
            this._notify(true);
            return;
        }
        if (elapsed < 0) {
            this._target[prop] = from;
            return;
        }
        factor = elapsed / duration % 2;
        factor = loop && factor > 1 ? 2 - factor : factor;
        factor = this._easing(Math.min(1, Math.max(0, factor)));
        this._target[prop] = this._fn(from, to, factor);
    }
    wait() {
        const promises = this._promises || (this._promises = []);
        return new Promise((res, rej)=>{
            promises.push({
                res,
                rej
            });
        });
    }
    _notify(resolved) {
        const method = resolved ? "res" : "rej";
        const promises = this._promises || [];
        for(let i = 0; i < promises.length; i++)promises[i][method]();
    }
}
class Animations {
    constructor(chart, config){
        this._chart = chart;
        this._properties = new Map();
        this.configure(config);
    }
    configure(config) {
        if (!(0, _helpersSegmentJs.i)(config)) return;
        const animationOptions = Object.keys((0, _helpersSegmentJs.d).animation);
        const animatedProps = this._properties;
        Object.getOwnPropertyNames(config).forEach((key)=>{
            const cfg = config[key];
            if (!(0, _helpersSegmentJs.i)(cfg)) return;
            const resolved = {};
            for (const option of animationOptions)resolved[option] = cfg[option];
            ((0, _helpersSegmentJs.b)(cfg.properties) && cfg.properties || [
                key
            ]).forEach((prop)=>{
                if (prop === key || !animatedProps.has(prop)) animatedProps.set(prop, resolved);
            });
        });
    }
    _animateOptions(target, values) {
        const newOptions = values.options;
        const options = resolveTargetOptions(target, newOptions);
        if (!options) return [];
        const animations = this._createAnimations(options, newOptions);
        if (newOptions.$shared) awaitAll(target.options.$animations, newOptions).then(()=>{
            target.options = newOptions;
        }, ()=>{});
        return animations;
    }
    _createAnimations(target, values) {
        const animatedProps = this._properties;
        const animations = [];
        const running = target.$animations || (target.$animations = {});
        const props = Object.keys(values);
        const date = Date.now();
        let i;
        for(i = props.length - 1; i >= 0; --i){
            const prop = props[i];
            if (prop.charAt(0) === "$") continue;
            if (prop === "options") {
                animations.push(...this._animateOptions(target, values));
                continue;
            }
            const value = values[prop];
            let animation = running[prop];
            const cfg = animatedProps.get(prop);
            if (animation) {
                if (cfg && animation.active()) {
                    animation.update(cfg, value, date);
                    continue;
                } else animation.cancel();
            }
            if (!cfg || !cfg.duration) {
                target[prop] = value;
                continue;
            }
            running[prop] = animation = new Animation(cfg, target, prop, value);
            animations.push(animation);
        }
        return animations;
    }
    update(target, values) {
        if (this._properties.size === 0) {
            Object.assign(target, values);
            return;
        }
        const animations = this._createAnimations(target, values);
        if (animations.length) {
            animator.add(this._chart, animations);
            return true;
        }
    }
}
function awaitAll(animations, properties) {
    const running = [];
    const keys = Object.keys(properties);
    for(let i = 0; i < keys.length; i++){
        const anim = animations[keys[i]];
        if (anim && anim.active()) running.push(anim.wait());
    }
    return Promise.all(running);
}
function resolveTargetOptions(target, newOptions) {
    if (!newOptions) return;
    let options = target.options;
    if (!options) {
        target.options = newOptions;
        return;
    }
    if (options.$shared) target.options = options = Object.assign({}, options, {
        $shared: false,
        $animations: {}
    });
    return options;
}
function scaleClip(scale, allowedOverflow) {
    const opts = scale && scale.options || {};
    const reverse = opts.reverse;
    const min = opts.min === undefined ? allowedOverflow : 0;
    const max = opts.max === undefined ? allowedOverflow : 0;
    return {
        start: reverse ? max : min,
        end: reverse ? min : max
    };
}
function defaultClip(xScale, yScale, allowedOverflow) {
    if (allowedOverflow === false) return false;
    const x = scaleClip(xScale, allowedOverflow);
    const y = scaleClip(yScale, allowedOverflow);
    return {
        top: y.end,
        right: x.end,
        bottom: y.start,
        left: x.start
    };
}
function toClip(value) {
    let t, r, b, l;
    if ((0, _helpersSegmentJs.i)(value)) {
        t = value.top;
        r = value.right;
        b = value.bottom;
        l = value.left;
    } else t = r = b = l = value;
    return {
        top: t,
        right: r,
        bottom: b,
        left: l,
        disabled: value === false
    };
}
function getSortedDatasetIndices(chart, filterVisible) {
    const keys = [];
    const metasets = chart._getSortedDatasetMetas(filterVisible);
    let i, ilen;
    for(i = 0, ilen = metasets.length; i < ilen; ++i)keys.push(metasets[i].index);
    return keys;
}
function applyStack(stack, value, dsIndex, options = {}) {
    const keys = stack.keys;
    const singleMode = options.mode === "single";
    let i, ilen, datasetIndex, otherValue;
    if (value === null) return;
    for(i = 0, ilen = keys.length; i < ilen; ++i){
        datasetIndex = +keys[i];
        if (datasetIndex === dsIndex) {
            if (options.all) continue;
            break;
        }
        otherValue = stack.values[datasetIndex];
        if ((0, _helpersSegmentJs.g)(otherValue) && (singleMode || value === 0 || (0, _helpersSegmentJs.s)(value) === (0, _helpersSegmentJs.s)(otherValue))) value += otherValue;
    }
    return value;
}
function convertObjectDataToArray(data, meta) {
    const { iScale, vScale } = meta;
    const iAxisKey = iScale.axis === "x" ? "x" : "y";
    const vAxisKey = vScale.axis === "x" ? "x" : "y";
    const keys = Object.keys(data);
    const adata = new Array(keys.length);
    let i, ilen, key;
    for(i = 0, ilen = keys.length; i < ilen; ++i){
        key = keys[i];
        adata[i] = {
            [iAxisKey]: key,
            [vAxisKey]: data[key]
        };
    }
    return adata;
}
function isStacked(scale, meta) {
    const stacked = scale && scale.options.stacked;
    return stacked || stacked === undefined && meta.stack !== undefined;
}
function getStackKey(indexScale, valueScale, meta) {
    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
}
function getUserBounds(scale) {
    const { min, max, minDefined, maxDefined } = scale.getUserBounds();
    return {
        min: minDefined ? min : Number.NEGATIVE_INFINITY,
        max: maxDefined ? max : Number.POSITIVE_INFINITY
    };
}
function getOrCreateStack(stacks, stackKey, indexValue) {
    const subStack = stacks[stackKey] || (stacks[stackKey] = {});
    return subStack[indexValue] || (subStack[indexValue] = {});
}
function getLastIndexInStack(stack, vScale, positive, type) {
    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){
        const value = stack[meta.index];
        if (positive && value > 0 || !positive && value < 0) return meta.index;
    }
    return null;
}
function updateStacks(controller, parsed) {
    const { chart, _cachedMeta: meta } = controller;
    const stacks = chart._stacks || (chart._stacks = {});
    const { iScale, vScale, index: datasetIndex } = meta;
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const key = getStackKey(iScale, vScale, meta);
    const ilen = parsed.length;
    let stack;
    for(let i = 0; i < ilen; ++i){
        const item = parsed[i];
        const { [iAxis]: index, [vAxis]: value } = item;
        const itemStacks = item._stacks || (item._stacks = {});
        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);
        stack[datasetIndex] = value;
        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
        const visualValues = stack._visualValues || (stack._visualValues = {});
        visualValues[datasetIndex] = value;
    }
}
function getFirstScaleId(chart, axis) {
    const scales = chart.scales;
    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();
}
function createDatasetContext(parent, index) {
    return (0, _helpersSegmentJs.j)(parent, {
        active: false,
        dataset: undefined,
        datasetIndex: index,
        index,
        mode: "default",
        type: "dataset"
    });
}
function createDataContext(parent, index, element) {
    return (0, _helpersSegmentJs.j)(parent, {
        active: false,
        dataIndex: index,
        parsed: undefined,
        raw: undefined,
        element,
        index,
        mode: "default",
        type: "data"
    });
}
function clearStacks(meta, items) {
    const datasetIndex = meta.controller.index;
    const axis = meta.vScale && meta.vScale.axis;
    if (!axis) return;
    items = items || meta._parsed;
    for (const parsed of items){
        const stacks = parsed._stacks;
        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) return;
        delete stacks[axis][datasetIndex];
        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) delete stacks[axis]._visualValues[datasetIndex];
    }
}
const isDirectUpdateMode = (mode)=>mode === "reset" || mode === "none";
const cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);
const createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {
        keys: getSortedDatasetIndices(chart, true),
        values: null
    };
class DatasetController {
    static defaults = {};
    static datasetElementType = null;
    static dataElementType = null;
    constructor(chart, datasetIndex){
        this.chart = chart;
        this._ctx = chart.ctx;
        this.index = datasetIndex;
        this._cachedDataOpts = {};
        this._cachedMeta = this.getMeta();
        this._type = this._cachedMeta.type;
        this.options = undefined;
        this._parsing = false;
        this._data = undefined;
        this._objectData = undefined;
        this._sharedOptions = undefined;
        this._drawStart = undefined;
        this._drawCount = undefined;
        this.enableOptionSharing = false;
        this.supportsDecimation = false;
        this.$context = undefined;
        this._syncList = [];
        this.datasetElementType = new.target.datasetElementType;
        this.dataElementType = new.target.dataElementType;
        this.initialize();
    }
    initialize() {
        const meta = this._cachedMeta;
        this.configure();
        this.linkScales();
        meta._stacked = isStacked(meta.vScale, meta);
        this.addElements();
        if (this.options.fill && !this.chart.isPluginEnabled("filler")) console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
    }
    updateIndex(datasetIndex) {
        if (this.index !== datasetIndex) clearStacks(this._cachedMeta);
        this.index = datasetIndex;
    }
    linkScales() {
        const chart = this.chart;
        const meta = this._cachedMeta;
        const dataset = this.getDataset();
        const chooseId = (axis, x, y, r)=>axis === "x" ? x : axis === "r" ? r : y;
        const xid = meta.xAxisID = (0, _helpersSegmentJs.v)(dataset.xAxisID, getFirstScaleId(chart, "x"));
        const yid = meta.yAxisID = (0, _helpersSegmentJs.v)(dataset.yAxisID, getFirstScaleId(chart, "y"));
        const rid = meta.rAxisID = (0, _helpersSegmentJs.v)(dataset.rAxisID, getFirstScaleId(chart, "r"));
        const indexAxis = meta.indexAxis;
        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
        meta.xScale = this.getScaleForId(xid);
        meta.yScale = this.getScaleForId(yid);
        meta.rScale = this.getScaleForId(rid);
        meta.iScale = this.getScaleForId(iid);
        meta.vScale = this.getScaleForId(vid);
    }
    getDataset() {
        return this.chart.data.datasets[this.index];
    }
    getMeta() {
        return this.chart.getDatasetMeta(this.index);
    }
    getScaleForId(scaleID) {
        return this.chart.scales[scaleID];
    }
    _getOtherScale(scale) {
        const meta = this._cachedMeta;
        return scale === meta.iScale ? meta.vScale : meta.iScale;
    }
    reset() {
        this._update("reset");
    }
    _destroy() {
        const meta = this._cachedMeta;
        if (this._data) (0, _helpersSegmentJs.u)(this._data, this);
        if (meta._stacked) clearStacks(meta);
    }
    _dataCheck() {
        const dataset = this.getDataset();
        const data = dataset.data || (dataset.data = []);
        const _data = this._data;
        if ((0, _helpersSegmentJs.i)(data)) {
            const meta = this._cachedMeta;
            this._data = convertObjectDataToArray(data, meta);
        } else if (_data !== data) {
            if (_data) {
                (0, _helpersSegmentJs.u)(_data, this);
                const meta = this._cachedMeta;
                clearStacks(meta);
                meta._parsed = [];
            }
            if (data && Object.isExtensible(data)) (0, _helpersSegmentJs.l)(data, this);
            this._syncList = [];
            this._data = data;
        }
    }
    addElements() {
        const meta = this._cachedMeta;
        this._dataCheck();
        if (this.datasetElementType) meta.dataset = new this.datasetElementType();
    }
    buildOrUpdateElements(resetNewElements) {
        const meta = this._cachedMeta;
        const dataset = this.getDataset();
        let stackChanged = false;
        this._dataCheck();
        const oldStacked = meta._stacked;
        meta._stacked = isStacked(meta.vScale, meta);
        if (meta.stack !== dataset.stack) {
            stackChanged = true;
            clearStacks(meta);
            meta.stack = dataset.stack;
        }
        this._resyncElements(resetNewElements);
        if (stackChanged || oldStacked !== meta._stacked) updateStacks(this, meta._parsed);
    }
    configure() {
        const config = this.chart.config;
        const scopeKeys = config.datasetScopeKeys(this._type);
        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);
        this.options = config.createResolver(scopes, this.getContext());
        this._parsing = this.options.parsing;
        this._cachedDataOpts = {};
    }
    parse(start, count) {
        const { _cachedMeta: meta, _data: data } = this;
        const { iScale, _stacked } = meta;
        const iAxis = iScale.axis;
        let sorted = start === 0 && count === data.length ? true : meta._sorted;
        let prev = start > 0 && meta._parsed[start - 1];
        let i, cur, parsed;
        if (this._parsing === false) {
            meta._parsed = data;
            meta._sorted = true;
            parsed = data;
        } else {
            if ((0, _helpersSegmentJs.b)(data[start])) parsed = this.parseArrayData(meta, data, start, count);
            else if ((0, _helpersSegmentJs.i)(data[start])) parsed = this.parseObjectData(meta, data, start, count);
            else parsed = this.parsePrimitiveData(meta, data, start, count);
            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];
            for(i = 0; i < count; ++i){
                meta._parsed[i + start] = cur = parsed[i];
                if (sorted) {
                    if (isNotInOrderComparedToPrev()) sorted = false;
                    prev = cur;
                }
            }
            meta._sorted = sorted;
        }
        if (_stacked) updateStacks(this, parsed);
    }
    parsePrimitiveData(meta, data, start, count) {
        const { iScale, vScale } = meta;
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const labels = iScale.getLabels();
        const singleScale = iScale === vScale;
        const parsed = new Array(count);
        let i, ilen, index;
        for(i = 0, ilen = count; i < ilen; ++i){
            index = i + start;
            parsed[i] = {
                [iAxis]: singleScale || iScale.parse(labels[index], index),
                [vAxis]: vScale.parse(data[index], index)
            };
        }
        return parsed;
    }
    parseArrayData(meta, data, start, count) {
        const { xScale, yScale } = meta;
        const parsed = new Array(count);
        let i, ilen, index, item;
        for(i = 0, ilen = count; i < ilen; ++i){
            index = i + start;
            item = data[index];
            parsed[i] = {
                x: xScale.parse(item[0], index),
                y: yScale.parse(item[1], index)
            };
        }
        return parsed;
    }
    parseObjectData(meta, data, start, count) {
        const { xScale, yScale } = meta;
        const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
        const parsed = new Array(count);
        let i, ilen, index, item;
        for(i = 0, ilen = count; i < ilen; ++i){
            index = i + start;
            item = data[index];
            parsed[i] = {
                x: xScale.parse((0, _helpersSegmentJs.f)(item, xAxisKey), index),
                y: yScale.parse((0, _helpersSegmentJs.f)(item, yAxisKey), index)
            };
        }
        return parsed;
    }
    getParsed(index) {
        return this._cachedMeta._parsed[index];
    }
    getDataElement(index) {
        return this._cachedMeta.data[index];
    }
    applyStack(scale, parsed, mode) {
        const chart = this.chart;
        const meta = this._cachedMeta;
        const value = parsed[scale.axis];
        const stack = {
            keys: getSortedDatasetIndices(chart, true),
            values: parsed._stacks[scale.axis]._visualValues
        };
        return applyStack(stack, value, meta.index, {
            mode
        });
    }
    updateRangeFromParsed(range, scale, parsed, stack) {
        const parsedValue = parsed[scale.axis];
        let value = parsedValue === null ? NaN : parsedValue;
        const values = stack && parsed._stacks[scale.axis];
        if (stack && values) {
            stack.values = values;
            value = applyStack(stack, parsedValue, this._cachedMeta.index);
        }
        range.min = Math.min(range.min, value);
        range.max = Math.max(range.max, value);
    }
    getMinMax(scale, canStack) {
        const meta = this._cachedMeta;
        const _parsed = meta._parsed;
        const sorted = meta._sorted && scale === meta.iScale;
        const ilen = _parsed.length;
        const otherScale = this._getOtherScale(scale);
        const stack = createStack(canStack, meta, this.chart);
        const range = {
            min: Number.POSITIVE_INFINITY,
            max: Number.NEGATIVE_INFINITY
        };
        const { min: otherMin, max: otherMax } = getUserBounds(otherScale);
        let i, parsed;
        function _skip() {
            parsed = _parsed[i];
            const otherValue = parsed[otherScale.axis];
            return !(0, _helpersSegmentJs.g)(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
        }
        for(i = 0; i < ilen; ++i){
            if (_skip()) continue;
            this.updateRangeFromParsed(range, scale, parsed, stack);
            if (sorted) break;
        }
        if (sorted) for(i = ilen - 1; i >= 0; --i){
            if (_skip()) continue;
            this.updateRangeFromParsed(range, scale, parsed, stack);
            break;
        }
        return range;
    }
    getAllParsedValues(scale) {
        const parsed = this._cachedMeta._parsed;
        const values = [];
        let i, ilen, value;
        for(i = 0, ilen = parsed.length; i < ilen; ++i){
            value = parsed[i][scale.axis];
            if ((0, _helpersSegmentJs.g)(value)) values.push(value);
        }
        return values;
    }
    getMaxOverflow() {
        return false;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const iScale = meta.iScale;
        const vScale = meta.vScale;
        const parsed = this.getParsed(index);
        return {
            label: iScale ? "" + iScale.getLabelForValue(parsed[iScale.axis]) : "",
            value: vScale ? "" + vScale.getLabelForValue(parsed[vScale.axis]) : ""
        };
    }
    _update(mode) {
        const meta = this._cachedMeta;
        this.update(mode || "default");
        meta._clip = toClip((0, _helpersSegmentJs.v)(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
    }
    update(mode) {}
    draw() {
        const ctx = this._ctx;
        const chart = this.chart;
        const meta = this._cachedMeta;
        const elements = meta.data || [];
        const area = chart.chartArea;
        const active = [];
        const start = this._drawStart || 0;
        const count = this._drawCount || elements.length - start;
        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
        let i;
        if (meta.dataset) meta.dataset.draw(ctx, area, start, count);
        for(i = start; i < start + count; ++i){
            const element = elements[i];
            if (element.hidden) continue;
            if (element.active && drawActiveElementsOnTop) active.push(element);
            else element.draw(ctx, area);
        }
        for(i = 0; i < active.length; ++i)active[i].draw(ctx, area);
    }
    getStyle(index, active) {
        const mode = active ? "active" : "default";
        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);
    }
    getContext(index, active, mode) {
        const dataset = this.getDataset();
        let context;
        if (index >= 0 && index < this._cachedMeta.data.length) {
            const element = this._cachedMeta.data[index];
            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));
            context.parsed = this.getParsed(index);
            context.raw = dataset.data[index];
            context.index = context.dataIndex = index;
        } else {
            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));
            context.dataset = dataset;
            context.index = context.datasetIndex = this.index;
        }
        context.active = !!active;
        context.mode = mode;
        return context;
    }
    resolveDatasetElementOptions(mode) {
        return this._resolveElementOptions(this.datasetElementType.id, mode);
    }
    resolveDataElementOptions(index, mode) {
        return this._resolveElementOptions(this.dataElementType.id, mode, index);
    }
    _resolveElementOptions(elementType, mode = "default", index) {
        const active = mode === "active";
        const cache = this._cachedDataOpts;
        const cacheKey = elementType + "-" + mode;
        const cached = cache[cacheKey];
        const sharing = this.enableOptionSharing && (0, _helpersSegmentJs.h)(index);
        if (cached) return cloneIfNotShared(cached, sharing);
        const config = this.chart.config;
        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
        const prefixes = active ? [
            `${elementType}Hover`,
            "hover",
            elementType,
            ""
        ] : [
            elementType,
            ""
        ];
        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
        const names = Object.keys((0, _helpersSegmentJs.d).elements[elementType]);
        const context = ()=>this.getContext(index, active, mode);
        const values = config.resolveNamedOptions(scopes, names, context, prefixes);
        if (values.$shared) {
            values.$shared = sharing;
            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
        }
        return values;
    }
    _resolveAnimations(index, transition, active) {
        const chart = this.chart;
        const cache = this._cachedDataOpts;
        const cacheKey = `animation-${transition}`;
        const cached = cache[cacheKey];
        if (cached) return cached;
        let options;
        if (chart.options.animation !== false) {
            const config = this.chart.config;
            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
            options = config.createResolver(scopes, this.getContext(index, active, transition));
        }
        const animations = new Animations(chart, options && options.animations);
        if (options && options._cacheable) cache[cacheKey] = Object.freeze(animations);
        return animations;
    }
    getSharedOptions(options) {
        if (!options.$shared) return;
        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
    }
    includeOptions(mode, sharedOptions) {
        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
    }
    _getSharedOptions(start, mode) {
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const previouslySharedOptions = this._sharedOptions;
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
        return {
            sharedOptions,
            includeOptions
        };
    }
    updateElement(element, index, properties, mode) {
        if (isDirectUpdateMode(mode)) Object.assign(element, properties);
        else this._resolveAnimations(index, mode).update(element, properties);
    }
    updateSharedOptions(sharedOptions, mode, newOptions) {
        if (sharedOptions && !isDirectUpdateMode(mode)) this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);
    }
    _setStyle(element, index, mode, active) {
        element.active = active;
        const options = this.getStyle(index, active);
        this._resolveAnimations(index, mode, active).update(element, {
            options: !active && this.getSharedOptions(options) || options
        });
    }
    removeHoverStyle(element, datasetIndex, index) {
        this._setStyle(element, index, "active", false);
    }
    setHoverStyle(element, datasetIndex, index) {
        this._setStyle(element, index, "active", true);
    }
    _removeDatasetHoverStyle() {
        const element = this._cachedMeta.dataset;
        if (element) this._setStyle(element, undefined, "active", false);
    }
    _setDatasetHoverStyle() {
        const element = this._cachedMeta.dataset;
        if (element) this._setStyle(element, undefined, "active", true);
    }
    _resyncElements(resetNewElements) {
        const data = this._data;
        const elements = this._cachedMeta.data;
        for (const [method, arg1, arg2] of this._syncList)this[method](arg1, arg2);
        this._syncList = [];
        const numMeta = elements.length;
        const numData = data.length;
        const count = Math.min(numData, numMeta);
        if (count) this.parse(0, count);
        if (numData > numMeta) this._insertElements(numMeta, numData - numMeta, resetNewElements);
        else if (numData < numMeta) this._removeElements(numData, numMeta - numData);
    }
    _insertElements(start, count, resetNewElements = true) {
        const meta = this._cachedMeta;
        const data = meta.data;
        const end = start + count;
        let i;
        const move = (arr)=>{
            arr.length += count;
            for(i = arr.length - 1; i >= end; i--)arr[i] = arr[i - count];
        };
        move(data);
        for(i = start; i < end; ++i)data[i] = new this.dataElementType();
        if (this._parsing) move(meta._parsed);
        this.parse(start, count);
        if (resetNewElements) this.updateElements(data, start, count, "reset");
    }
    updateElements(element, start, count, mode) {}
    _removeElements(start, count) {
        const meta = this._cachedMeta;
        if (this._parsing) {
            const removed = meta._parsed.splice(start, count);
            if (meta._stacked) clearStacks(meta, removed);
        }
        meta.data.splice(start, count);
    }
    _sync(args) {
        if (this._parsing) this._syncList.push(args);
        else {
            const [method, arg1, arg2] = args;
            this[method](arg1, arg2);
        }
        this.chart._dataChanges.push([
            this.index,
            ...args
        ]);
    }
    _onDataPush() {
        const count = arguments.length;
        this._sync([
            "_insertElements",
            this.getDataset().data.length - count,
            count
        ]);
    }
    _onDataPop() {
        this._sync([
            "_removeElements",
            this._cachedMeta.data.length - 1,
            1
        ]);
    }
    _onDataShift() {
        this._sync([
            "_removeElements",
            0,
            1
        ]);
    }
    _onDataSplice(start, count) {
        if (count) this._sync([
            "_removeElements",
            start,
            count
        ]);
        const newCount = arguments.length - 2;
        if (newCount) this._sync([
            "_insertElements",
            start,
            newCount
        ]);
    }
    _onDataUnshift() {
        this._sync([
            "_insertElements",
            0,
            arguments.length
        ]);
    }
}
function getAllScaleValues(scale, type) {
    if (!scale._cache.$bar) {
        const visibleMetas = scale.getMatchingVisibleMetas(type);
        let values = [];
        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++)values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));
        scale._cache.$bar = (0, _helpersSegmentJs._)(values.sort((a, b)=>a - b));
    }
    return scale._cache.$bar;
}
function computeMinSampleSize(meta) {
    const scale = meta.iScale;
    const values = getAllScaleValues(scale, meta.type);
    let min = scale._length;
    let i, ilen, curr, prev;
    const updateMinAndPrev = ()=>{
        if (curr === 32767 || curr === -32768) return;
        if ((0, _helpersSegmentJs.h)(prev)) min = Math.min(min, Math.abs(curr - prev) || min);
        prev = curr;
    };
    for(i = 0, ilen = values.length; i < ilen; ++i){
        curr = scale.getPixelForValue(values[i]);
        updateMinAndPrev();
    }
    prev = undefined;
    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){
        curr = scale.getPixelForTick(i);
        updateMinAndPrev();
    }
    return min;
}
function computeFitCategoryTraits(index, ruler, options, stackCount) {
    const thickness = options.barThickness;
    let size, ratio;
    if ((0, _helpersSegmentJs.k)(thickness)) {
        size = ruler.min * options.categoryPercentage;
        ratio = options.barPercentage;
    } else {
        size = thickness * stackCount;
        ratio = 1;
    }
    return {
        chunk: size / stackCount,
        ratio,
        start: ruler.pixels[index] - size / 2
    };
}
function computeFlexCategoryTraits(index, ruler, options, stackCount) {
    const pixels = ruler.pixels;
    const curr = pixels[index];
    let prev = index > 0 ? pixels[index - 1] : null;
    let next = index < pixels.length - 1 ? pixels[index + 1] : null;
    const percent = options.categoryPercentage;
    if (prev === null) prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
    if (next === null) next = curr + curr - prev;
    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;
    const size = Math.abs(next - prev) / 2 * percent;
    return {
        chunk: size / stackCount,
        ratio: options.barPercentage,
        start
    };
}
function parseFloatBar(entry, item, vScale, i) {
    const startValue = vScale.parse(entry[0], i);
    const endValue = vScale.parse(entry[1], i);
    const min = Math.min(startValue, endValue);
    const max = Math.max(startValue, endValue);
    let barStart = min;
    let barEnd = max;
    if (Math.abs(min) > Math.abs(max)) {
        barStart = max;
        barEnd = min;
    }
    item[vScale.axis] = barEnd;
    item._custom = {
        barStart,
        barEnd,
        start: startValue,
        end: endValue,
        min,
        max
    };
}
function parseValue(entry, item, vScale, i) {
    if ((0, _helpersSegmentJs.b)(entry)) parseFloatBar(entry, item, vScale, i);
    else item[vScale.axis] = vScale.parse(entry, i);
    return item;
}
function parseArrayOrPrimitive(meta, data, start, count) {
    const iScale = meta.iScale;
    const vScale = meta.vScale;
    const labels = iScale.getLabels();
    const singleScale = iScale === vScale;
    const parsed = [];
    let i, ilen, item, entry;
    for(i = start, ilen = start + count; i < ilen; ++i){
        entry = data[i];
        item = {};
        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);
        parsed.push(parseValue(entry, item, vScale, i));
    }
    return parsed;
}
function isFloatBar(custom) {
    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;
}
function barSign(size, vScale, actualBase) {
    if (size !== 0) return (0, _helpersSegmentJs.s)(size);
    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
}
function borderProps(properties) {
    let reverse, start, end, top, bottom;
    if (properties.horizontal) {
        reverse = properties.base > properties.x;
        start = "left";
        end = "right";
    } else {
        reverse = properties.base < properties.y;
        start = "bottom";
        end = "top";
    }
    if (reverse) {
        top = "end";
        bottom = "start";
    } else {
        top = "start";
        bottom = "end";
    }
    return {
        start,
        end,
        reverse,
        top,
        bottom
    };
}
function setBorderSkipped(properties, options, stack, index) {
    let edge = options.borderSkipped;
    const res = {};
    if (!edge) {
        properties.borderSkipped = res;
        return;
    }
    if (edge === true) {
        properties.borderSkipped = {
            top: true,
            right: true,
            bottom: true,
            left: true
        };
        return;
    }
    const { start, end, reverse, top, bottom } = borderProps(properties);
    if (edge === "middle" && stack) {
        properties.enableBorderRadius = true;
        if ((stack._top || 0) === index) edge = top;
        else if ((stack._bottom || 0) === index) edge = bottom;
        else {
            res[parseEdge(bottom, start, end, reverse)] = true;
            edge = top;
        }
    }
    res[parseEdge(edge, start, end, reverse)] = true;
    properties.borderSkipped = res;
}
function parseEdge(edge, a, b, reverse) {
    if (reverse) {
        edge = swap(edge, a, b);
        edge = startEnd(edge, b, a);
    } else edge = startEnd(edge, a, b);
    return edge;
}
function swap(orig, v1, v2) {
    return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}
function startEnd(v, start, end) {
    return v === "start" ? start : v === "end" ? end : v;
}
function setInflateAmount(properties, { inflateAmount }, ratio) {
    properties.inflateAmount = inflateAmount === "auto" ? ratio === 1 ? 0.33 : 0 : inflateAmount;
}
class BarController extends DatasetController {
    static id = "bar";
    static defaults = {
        datasetElementType: false,
        dataElementType: "bar",
        categoryPercentage: 0.8,
        barPercentage: 0.9,
        grouped: true,
        animations: {
            numbers: {
                type: "number",
                properties: [
                    "x",
                    "y",
                    "base",
                    "width",
                    "height"
                ]
            }
        }
    };
    static overrides = {
        scales: {
            _index_: {
                type: "category",
                offset: true,
                grid: {
                    offset: true
                }
            },
            _value_: {
                type: "linear",
                beginAtZero: true
            }
        }
    };
    parsePrimitiveData(meta, data, start, count) {
        return parseArrayOrPrimitive(meta, data, start, count);
    }
    parseArrayData(meta, data, start, count) {
        return parseArrayOrPrimitive(meta, data, start, count);
    }
    parseObjectData(meta, data, start, count) {
        const { iScale, vScale } = meta;
        const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
        const iAxisKey = iScale.axis === "x" ? xAxisKey : yAxisKey;
        const vAxisKey = vScale.axis === "x" ? xAxisKey : yAxisKey;
        const parsed = [];
        let i, ilen, item, obj;
        for(i = start, ilen = start + count; i < ilen; ++i){
            obj = data[i];
            item = {};
            item[iScale.axis] = iScale.parse((0, _helpersSegmentJs.f)(obj, iAxisKey), i);
            parsed.push(parseValue((0, _helpersSegmentJs.f)(obj, vAxisKey), item, vScale, i));
        }
        return parsed;
    }
    updateRangeFromParsed(range, scale, parsed, stack) {
        super.updateRangeFromParsed(range, scale, parsed, stack);
        const custom = parsed._custom;
        if (custom && scale === this._cachedMeta.vScale) {
            range.min = Math.min(range.min, custom.min);
            range.max = Math.max(range.max, custom.max);
        }
    }
    getMaxOverflow() {
        return 0;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const { iScale, vScale } = meta;
        const parsed = this.getParsed(index);
        const custom = parsed._custom;
        const value = isFloatBar(custom) ? "[" + custom.start + ", " + custom.end + "]" : "" + vScale.getLabelForValue(parsed[vScale.axis]);
        return {
            label: "" + iScale.getLabelForValue(parsed[iScale.axis]),
            value
        };
    }
    initialize() {
        this.enableOptionSharing = true;
        super.initialize();
        const meta = this._cachedMeta;
        meta.stack = this.getDataset().stack;
    }
    update(mode) {
        const meta = this._cachedMeta;
        this.updateElements(meta.data, 0, meta.data.length, mode);
    }
    updateElements(bars, start, count, mode) {
        const reset = mode === "reset";
        const { index, _cachedMeta: { vScale } } = this;
        const base = vScale.getBasePixel();
        const horizontal = vScale.isHorizontal();
        const ruler = this._getRuler();
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        for(let i = start; i < start + count; i++){
            const parsed = this.getParsed(i);
            const vpixels = reset || (0, _helpersSegmentJs.k)(parsed[vScale.axis]) ? {
                base,
                head: base
            } : this._calculateBarValuePixels(i);
            const ipixels = this._calculateBarIndexPixels(i, ruler);
            const stack = (parsed._stacks || {})[vScale.axis];
            const properties = {
                horizontal,
                base: vpixels.base,
                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,
                x: horizontal ? vpixels.head : ipixels.center,
                y: horizontal ? ipixels.center : vpixels.head,
                height: horizontal ? ipixels.size : Math.abs(vpixels.size),
                width: horizontal ? Math.abs(vpixels.size) : ipixels.size
            };
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? "active" : mode);
            const options = properties.options || bars[i].options;
            setBorderSkipped(properties, options, stack, index);
            setInflateAmount(properties, options, ruler.ratio);
            this.updateElement(bars[i], i, properties, mode);
        }
    }
    _getStacks(last, dataIndex) {
        const { iScale } = this._cachedMeta;
        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);
        const stacked = iScale.options.stacked;
        const stacks = [];
        const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);
        const iScaleValue = currentParsed && currentParsed[iScale.axis];
        const skipNull = (meta)=>{
            const parsed = meta._parsed.find((item)=>item[iScale.axis] === iScaleValue);
            const val = parsed && parsed[meta.vScale.axis];
            if ((0, _helpersSegmentJs.k)(val) || isNaN(val)) return true;
        };
        for (const meta of metasets){
            if (dataIndex !== undefined && skipNull(meta)) continue;
            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) stacks.push(meta.stack);
            if (meta.index === last) break;
        }
        if (!stacks.length) stacks.push(undefined);
        return stacks;
    }
    _getStackCount(index) {
        return this._getStacks(undefined, index).length;
    }
    _getStackIndex(datasetIndex, name, dataIndex) {
        const stacks = this._getStacks(datasetIndex, dataIndex);
        const index = name !== undefined ? stacks.indexOf(name) : -1;
        return index === -1 ? stacks.length - 1 : index;
    }
    _getRuler() {
        const opts = this.options;
        const meta = this._cachedMeta;
        const iScale = meta.iScale;
        const pixels = [];
        let i, ilen;
        for(i = 0, ilen = meta.data.length; i < ilen; ++i)pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));
        const barThickness = opts.barThickness;
        const min = barThickness || computeMinSampleSize(meta);
        return {
            min,
            pixels,
            start: iScale._startPixel,
            end: iScale._endPixel,
            stackCount: this._getStackCount(),
            scale: iScale,
            grouped: opts.grouped,
            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
        };
    }
    _calculateBarValuePixels(index) {
        const { _cachedMeta: { vScale, _stacked, index: datasetIndex }, options: { base: baseValue, minBarLength } } = this;
        const actualBase = baseValue || 0;
        const parsed = this.getParsed(index);
        const custom = parsed._custom;
        const floating = isFloatBar(custom);
        let value = parsed[vScale.axis];
        let start = 0;
        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
        let head, size;
        if (length !== value) {
            start = length - value;
            length = value;
        }
        if (floating) {
            value = custom.barStart;
            length = custom.barEnd - custom.barStart;
            if (value !== 0 && (0, _helpersSegmentJs.s)(value) !== (0, _helpersSegmentJs.s)(custom.barEnd)) start = 0;
            start += value;
        }
        const startValue = !(0, _helpersSegmentJs.k)(baseValue) && !floating ? baseValue : start;
        let base = vScale.getPixelForValue(startValue);
        if (this.chart.getDataVisibility(index)) head = vScale.getPixelForValue(start + length);
        else head = base;
        size = head - base;
        if (Math.abs(size) < minBarLength) {
            size = barSign(size, vScale, actualBase) * minBarLength;
            if (value === actualBase) base -= size / 2;
            const startPixel = vScale.getPixelForDecimal(0);
            const endPixel = vScale.getPixelForDecimal(1);
            const min = Math.min(startPixel, endPixel);
            const max = Math.max(startPixel, endPixel);
            base = Math.max(Math.min(base, max), min);
            head = base + size;
            if (_stacked && !floating) parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);
        }
        if (base === vScale.getPixelForValue(actualBase)) {
            const halfGrid = (0, _helpersSegmentJs.s)(size) * vScale.getLineWidthForValue(actualBase) / 2;
            base += halfGrid;
            size -= halfGrid;
        }
        return {
            size,
            base,
            head,
            center: head + size / 2
        };
    }
    _calculateBarIndexPixels(index, ruler) {
        const scale = ruler.scale;
        const options = this.options;
        const skipNull = options.skipNull;
        const maxBarThickness = (0, _helpersSegmentJs.v)(options.maxBarThickness, Infinity);
        let center, size;
        if (ruler.grouped) {
            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;
            const range = options.barThickness === "flex" ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);
            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);
            center = range.start + range.chunk * stackIndex + range.chunk / 2;
            size = Math.min(maxBarThickness, range.chunk * range.ratio);
        } else {
            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);
            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
        }
        return {
            base: center - size / 2,
            head: center + size / 2,
            center,
            size
        };
    }
    draw() {
        const meta = this._cachedMeta;
        const vScale = meta.vScale;
        const rects = meta.data;
        const ilen = rects.length;
        let i = 0;
        for(; i < ilen; ++i)if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) rects[i].draw(this._ctx);
    }
}
class BubbleController extends DatasetController {
    static id = "bubble";
    static defaults = {
        datasetElementType: false,
        dataElementType: "point",
        animations: {
            numbers: {
                type: "number",
                properties: [
                    "x",
                    "y",
                    "borderWidth",
                    "radius"
                ]
            }
        }
    };
    static overrides = {
        scales: {
            x: {
                type: "linear"
            },
            y: {
                type: "linear"
            }
        }
    };
    initialize() {
        this.enableOptionSharing = true;
        super.initialize();
    }
    parsePrimitiveData(meta, data, start, count) {
        const parsed = super.parsePrimitiveData(meta, data, start, count);
        for(let i = 0; i < parsed.length; i++)parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;
        return parsed;
    }
    parseArrayData(meta, data, start, count) {
        const parsed = super.parseArrayData(meta, data, start, count);
        for(let i = 0; i < parsed.length; i++){
            const item = data[start + i];
            parsed[i]._custom = (0, _helpersSegmentJs.v)(item[2], this.resolveDataElementOptions(i + start).radius);
        }
        return parsed;
    }
    parseObjectData(meta, data, start, count) {
        const parsed = super.parseObjectData(meta, data, start, count);
        for(let i = 0; i < parsed.length; i++){
            const item = data[start + i];
            parsed[i]._custom = (0, _helpersSegmentJs.v)(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);
        }
        return parsed;
    }
    getMaxOverflow() {
        const data = this._cachedMeta.data;
        let max = 0;
        for(let i = data.length - 1; i >= 0; --i)max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
        return max > 0 && max;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const labels = this.chart.data.labels || [];
        const { xScale, yScale } = meta;
        const parsed = this.getParsed(index);
        const x = xScale.getLabelForValue(parsed.x);
        const y = yScale.getLabelForValue(parsed.y);
        const r = parsed._custom;
        return {
            label: labels[index] || "",
            value: "(" + x + ", " + y + (r ? ", " + r : "") + ")"
        };
    }
    update(mode) {
        const points = this._cachedMeta.data;
        this.updateElements(points, 0, points.length, mode);
    }
    updateElements(points, start, count, mode) {
        const reset = mode === "reset";
        const { iScale, vScale } = this._cachedMeta;
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        for(let i = start; i < start + count; i++){
            const point = points[i];
            const parsed = !reset && this.getParsed(i);
            const properties = {};
            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
            properties.skip = isNaN(iPixel) || isNaN(vPixel);
            if (includeOptions) {
                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? "active" : mode);
                if (reset) properties.options.radius = 0;
            }
            this.updateElement(point, i, properties, mode);
        }
    }
    resolveDataElementOptions(index, mode) {
        const parsed = this.getParsed(index);
        let values = super.resolveDataElementOptions(index, mode);
        if (values.$shared) values = Object.assign({}, values, {
            $shared: false
        });
        const radius = values.radius;
        if (mode !== "active") values.radius = 0;
        values.radius += (0, _helpersSegmentJs.v)(parsed && parsed._custom, radius);
        return values;
    }
}
function getRatioAndOffset(rotation, circumference, cutout) {
    let ratioX = 1;
    let ratioY = 1;
    let offsetX = 0;
    let offsetY = 0;
    if (circumference < (0, _helpersSegmentJs.T)) {
        const startAngle = rotation;
        const endAngle = startAngle + circumference;
        const startX = Math.cos(startAngle);
        const startY = Math.sin(startAngle);
        const endX = Math.cos(endAngle);
        const endY = Math.sin(endAngle);
        const calcMax = (angle, a, b)=>(0, _helpersSegmentJs.p)(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);
        const calcMin = (angle, a, b)=>(0, _helpersSegmentJs.p)(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);
        const maxX = calcMax(0, startX, endX);
        const maxY = calcMax((0, _helpersSegmentJs.H), startY, endY);
        const minX = calcMin((0, _helpersSegmentJs.P), startX, endX);
        const minY = calcMin((0, _helpersSegmentJs.P) + (0, _helpersSegmentJs.H), startY, endY);
        ratioX = (maxX - minX) / 2;
        ratioY = (maxY - minY) / 2;
        offsetX = -(maxX + minX) / 2;
        offsetY = -(maxY + minY) / 2;
    }
    return {
        ratioX,
        ratioY,
        offsetX,
        offsetY
    };
}
class DoughnutController extends DatasetController {
    static id = "doughnut";
    static defaults = {
        datasetElementType: false,
        dataElementType: "arc",
        animation: {
            animateRotate: true,
            animateScale: false
        },
        animations: {
            numbers: {
                type: "number",
                properties: [
                    "circumference",
                    "endAngle",
                    "innerRadius",
                    "outerRadius",
                    "startAngle",
                    "x",
                    "y",
                    "offset",
                    "borderWidth",
                    "spacing"
                ]
            }
        },
        cutout: "50%",
        rotation: 0,
        circumference: 360,
        radius: "100%",
        spacing: 0,
        indexAxis: "r"
    };
    static descriptors = {
        _scriptable: (name)=>name !== "spacing",
        _indexable: (name)=>name !== "spacing" && !name.startsWith("borderDash") && !name.startsWith("hoverBorderDash")
    };
    static overrides = {
        aspectRatio: 1,
        plugins: {
            legend: {
                labels: {
                    generateLabels (chart) {
                        const data = chart.data;
                        if (data.labels.length && data.datasets.length) {
                            const { labels: { pointStyle, color } } = chart.legend.options;
                            return data.labels.map((label, i)=>{
                                const meta = chart.getDatasetMeta(0);
                                const style = meta.controller.getStyle(i);
                                return {
                                    text: label,
                                    fillStyle: style.backgroundColor,
                                    strokeStyle: style.borderColor,
                                    fontColor: color,
                                    lineWidth: style.borderWidth,
                                    pointStyle: pointStyle,
                                    hidden: !chart.getDataVisibility(i),
                                    index: i
                                };
                            });
                        }
                        return [];
                    }
                },
                onClick (e, legendItem, legend) {
                    legend.chart.toggleDataVisibility(legendItem.index);
                    legend.chart.update();
                }
            }
        }
    };
    constructor(chart, datasetIndex){
        super(chart, datasetIndex);
        this.enableOptionSharing = true;
        this.innerRadius = undefined;
        this.outerRadius = undefined;
        this.offsetX = undefined;
        this.offsetY = undefined;
    }
    linkScales() {}
    parse(start, count) {
        const data = this.getDataset().data;
        const meta = this._cachedMeta;
        if (this._parsing === false) meta._parsed = data;
        else {
            let getter = (i)=>+data[i];
            if ((0, _helpersSegmentJs.i)(data[start])) {
                const { key = "value" } = this._parsing;
                getter = (i)=>+(0, _helpersSegmentJs.f)(data[i], key);
            }
            let i, ilen;
            for(i = start, ilen = start + count; i < ilen; ++i)meta._parsed[i] = getter(i);
        }
    }
    _getRotation() {
        return (0, _helpersSegmentJs.t)(this.options.rotation - 90);
    }
    _getCircumference() {
        return (0, _helpersSegmentJs.t)(this.options.circumference);
    }
    _getRotationExtents() {
        let min = (0, _helpersSegmentJs.T);
        let max = -(0, _helpersSegmentJs.T);
        for(let i = 0; i < this.chart.data.datasets.length; ++i)if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {
            const controller = this.chart.getDatasetMeta(i).controller;
            const rotation = controller._getRotation();
            const circumference = controller._getCircumference();
            min = Math.min(min, rotation);
            max = Math.max(max, rotation + circumference);
        }
        return {
            rotation: min,
            circumference: max - min
        };
    }
    update(mode) {
        const chart = this.chart;
        const { chartArea } = chart;
        const meta = this._cachedMeta;
        const arcs = meta.data;
        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
        const cutout = Math.min((0, _helpersSegmentJs.m)(this.options.cutout, maxSize), 1);
        const chartWeight = this._getRingWeight(this.index);
        const { circumference, rotation } = this._getRotationExtents();
        const { ratioX, ratioY, offsetX, offsetY } = getRatioAndOffset(rotation, circumference, cutout);
        const maxWidth = (chartArea.width - spacing) / ratioX;
        const maxHeight = (chartArea.height - spacing) / ratioY;
        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
        const outerRadius = (0, _helpersSegmentJs.n)(this.options.radius, maxRadius);
        const innerRadius = Math.max(outerRadius * cutout, 0);
        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
        this.offsetX = offsetX * outerRadius;
        this.offsetY = offsetY * outerRadius;
        meta.total = this.calculateTotal();
        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
        this.updateElements(arcs, 0, arcs.length, mode);
    }
    _circumference(i, reset) {
        const opts = this.options;
        const meta = this._cachedMeta;
        const circumference = this._getCircumference();
        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) return 0;
        return this.calculateCircumference(meta._parsed[i] * circumference / (0, _helpersSegmentJs.T));
    }
    updateElements(arcs, start, count, mode) {
        const reset = mode === "reset";
        const chart = this.chart;
        const chartArea = chart.chartArea;
        const opts = chart.options;
        const animationOpts = opts.animation;
        const centerX = (chartArea.left + chartArea.right) / 2;
        const centerY = (chartArea.top + chartArea.bottom) / 2;
        const animateScale = reset && animationOpts.animateScale;
        const innerRadius = animateScale ? 0 : this.innerRadius;
        const outerRadius = animateScale ? 0 : this.outerRadius;
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        let startAngle = this._getRotation();
        let i;
        for(i = 0; i < start; ++i)startAngle += this._circumference(i, reset);
        for(i = start; i < start + count; ++i){
            const circumference = this._circumference(i, reset);
            const arc = arcs[i];
            const properties = {
                x: centerX + this.offsetX,
                y: centerY + this.offsetY,
                startAngle,
                endAngle: startAngle + circumference,
                circumference,
                outerRadius,
                innerRadius
            };
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? "active" : mode);
            startAngle += circumference;
            this.updateElement(arc, i, properties, mode);
        }
    }
    calculateTotal() {
        const meta = this._cachedMeta;
        const metaData = meta.data;
        let total = 0;
        let i;
        for(i = 0; i < metaData.length; i++){
            const value = meta._parsed[i];
            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) total += Math.abs(value);
        }
        return total;
    }
    calculateCircumference(value) {
        const total = this._cachedMeta.total;
        if (total > 0 && !isNaN(value)) return (0, _helpersSegmentJs.T) * (Math.abs(value) / total);
        return 0;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const chart = this.chart;
        const labels = chart.data.labels || [];
        const value = (0, _helpersSegmentJs.o)(meta._parsed[index], chart.options.locale);
        return {
            label: labels[index] || "",
            value
        };
    }
    getMaxBorderWidth(arcs) {
        let max = 0;
        const chart = this.chart;
        let i, ilen, meta, controller, options;
        if (!arcs) {
            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i)if (chart.isDatasetVisible(i)) {
                meta = chart.getDatasetMeta(i);
                arcs = meta.data;
                controller = meta.controller;
                break;
            }
        }
        if (!arcs) return 0;
        for(i = 0, ilen = arcs.length; i < ilen; ++i){
            options = controller.resolveDataElementOptions(i);
            if (options.borderAlign !== "inner") max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
        }
        return max;
    }
    getMaxOffset(arcs) {
        let max = 0;
        for(let i = 0, ilen = arcs.length; i < ilen; ++i){
            const options = this.resolveDataElementOptions(i);
            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
        }
        return max;
    }
    _getRingWeightOffset(datasetIndex) {
        let ringWeightOffset = 0;
        for(let i = 0; i < datasetIndex; ++i)if (this.chart.isDatasetVisible(i)) ringWeightOffset += this._getRingWeight(i);
        return ringWeightOffset;
    }
    _getRingWeight(datasetIndex) {
        return Math.max((0, _helpersSegmentJs.v)(this.chart.data.datasets[datasetIndex].weight, 1), 0);
    }
    _getVisibleDatasetWeightTotal() {
        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
    }
}
class LineController extends DatasetController {
    static id = "line";
    static defaults = {
        datasetElementType: "line",
        dataElementType: "point",
        showLine: true,
        spanGaps: false
    };
    static overrides = {
        scales: {
            _index_: {
                type: "category"
            },
            _value_: {
                type: "linear"
            }
        }
    };
    initialize() {
        this.enableOptionSharing = true;
        this.supportsDecimation = true;
        super.initialize();
    }
    update(mode) {
        const meta = this._cachedMeta;
        const { dataset: line, data: points = [], _dataset } = meta;
        const animationsDisabled = this.chart._animationsDisabled;
        let { start, count } = (0, _helpersSegmentJs.q)(meta, points, animationsDisabled);
        this._drawStart = start;
        this._drawCount = count;
        if ((0, _helpersSegmentJs.w)(meta)) {
            start = 0;
            count = points.length;
        }
        line._chart = this.chart;
        line._datasetIndex = this.index;
        line._decimated = !!_dataset._decimated;
        line.points = points;
        const options = this.resolveDatasetElementOptions(mode);
        if (!this.options.showLine) options.borderWidth = 0;
        options.segment = this.options.segment;
        this.updateElement(line, undefined, {
            animated: !animationsDisabled,
            options
        }, mode);
        this.updateElements(points, start, count, mode);
    }
    updateElements(points, start, count, mode) {
        const reset = mode === "reset";
        const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const { spanGaps, segment } = this.options;
        const maxGapLength = (0, _helpersSegmentJs.x)(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
        const directUpdate = this.chart._animationsDisabled || reset || mode === "none";
        const end = start + count;
        const pointsCount = points.length;
        let prevParsed = start > 0 && this.getParsed(start - 1);
        for(let i = 0; i < pointsCount; ++i){
            const point = points[i];
            const properties = directUpdate ? point : {};
            if (i < start || i >= end) {
                properties.skip = true;
                continue;
            }
            const parsed = this.getParsed(i);
            const nullData = (0, _helpersSegmentJs.k)(parsed[vAxis]);
            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
            if (segment) {
                properties.parsed = parsed;
                properties.raw = _dataset.data[i];
            }
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? "active" : mode);
            if (!directUpdate) this.updateElement(point, i, properties, mode);
            prevParsed = parsed;
        }
    }
    getMaxOverflow() {
        const meta = this._cachedMeta;
        const dataset = meta.dataset;
        const border = dataset.options && dataset.options.borderWidth || 0;
        const data = meta.data || [];
        if (!data.length) return border;
        const firstPoint = data[0].size(this.resolveDataElementOptions(0));
        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
        return Math.max(border, firstPoint, lastPoint) / 2;
    }
    draw() {
        const meta = this._cachedMeta;
        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
        super.draw();
    }
}
class PolarAreaController extends DatasetController {
    static id = "polarArea";
    static defaults = {
        dataElementType: "arc",
        animation: {
            animateRotate: true,
            animateScale: true
        },
        animations: {
            numbers: {
                type: "number",
                properties: [
                    "x",
                    "y",
                    "startAngle",
                    "endAngle",
                    "innerRadius",
                    "outerRadius"
                ]
            }
        },
        indexAxis: "r",
        startAngle: 0
    };
    static overrides = {
        aspectRatio: 1,
        plugins: {
            legend: {
                labels: {
                    generateLabels (chart) {
                        const data = chart.data;
                        if (data.labels.length && data.datasets.length) {
                            const { labels: { pointStyle, color } } = chart.legend.options;
                            return data.labels.map((label, i)=>{
                                const meta = chart.getDatasetMeta(0);
                                const style = meta.controller.getStyle(i);
                                return {
                                    text: label,
                                    fillStyle: style.backgroundColor,
                                    strokeStyle: style.borderColor,
                                    fontColor: color,
                                    lineWidth: style.borderWidth,
                                    pointStyle: pointStyle,
                                    hidden: !chart.getDataVisibility(i),
                                    index: i
                                };
                            });
                        }
                        return [];
                    }
                },
                onClick (e, legendItem, legend) {
                    legend.chart.toggleDataVisibility(legendItem.index);
                    legend.chart.update();
                }
            }
        },
        scales: {
            r: {
                type: "radialLinear",
                angleLines: {
                    display: false
                },
                beginAtZero: true,
                grid: {
                    circular: true
                },
                pointLabels: {
                    display: false
                },
                startAngle: 0
            }
        }
    };
    constructor(chart, datasetIndex){
        super(chart, datasetIndex);
        this.innerRadius = undefined;
        this.outerRadius = undefined;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const chart = this.chart;
        const labels = chart.data.labels || [];
        const value = (0, _helpersSegmentJs.o)(meta._parsed[index].r, chart.options.locale);
        return {
            label: labels[index] || "",
            value
        };
    }
    parseObjectData(meta, data, start, count) {
        return (0, _helpersSegmentJs.y).bind(this)(meta, data, start, count);
    }
    update(mode) {
        const arcs = this._cachedMeta.data;
        this._updateRadius();
        this.updateElements(arcs, 0, arcs.length, mode);
    }
    getMinMax() {
        const meta = this._cachedMeta;
        const range = {
            min: Number.POSITIVE_INFINITY,
            max: Number.NEGATIVE_INFINITY
        };
        meta.data.forEach((element, index)=>{
            const parsed = this.getParsed(index).r;
            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {
                if (parsed < range.min) range.min = parsed;
                if (parsed > range.max) range.max = parsed;
            }
        });
        return range;
    }
    _updateRadius() {
        const chart = this.chart;
        const chartArea = chart.chartArea;
        const opts = chart.options;
        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
        const outerRadius = Math.max(minSize / 2, 0);
        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);
        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
        this.outerRadius = outerRadius - radiusLength * this.index;
        this.innerRadius = this.outerRadius - radiusLength;
    }
    updateElements(arcs, start, count, mode) {
        const reset = mode === "reset";
        const chart = this.chart;
        const opts = chart.options;
        const animationOpts = opts.animation;
        const scale = this._cachedMeta.rScale;
        const centerX = scale.xCenter;
        const centerY = scale.yCenter;
        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * (0, _helpersSegmentJs.P);
        let angle = datasetStartAngle;
        let i;
        const defaultAngle = 360 / this.countVisibleElements();
        for(i = 0; i < start; ++i)angle += this._computeAngle(i, mode, defaultAngle);
        for(i = start; i < start + count; i++){
            const arc = arcs[i];
            let startAngle = angle;
            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);
            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;
            angle = endAngle;
            if (reset) {
                if (animationOpts.animateScale) outerRadius = 0;
                if (animationOpts.animateRotate) startAngle = endAngle = datasetStartAngle;
            }
            const properties = {
                x: centerX,
                y: centerY,
                innerRadius: 0,
                outerRadius,
                startAngle,
                endAngle,
                options: this.resolveDataElementOptions(i, arc.active ? "active" : mode)
            };
            this.updateElement(arc, i, properties, mode);
        }
    }
    countVisibleElements() {
        const meta = this._cachedMeta;
        let count = 0;
        meta.data.forEach((element, index)=>{
            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) count++;
        });
        return count;
    }
    _computeAngle(index, mode, defaultAngle) {
        return this.chart.getDataVisibility(index) ? (0, _helpersSegmentJs.t)(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;
    }
}
class PieController extends DoughnutController {
    static id = "pie";
    static defaults = {
        cutout: 0,
        rotation: 0,
        circumference: 360,
        radius: "100%"
    };
}
class RadarController extends DatasetController {
    static id = "radar";
    static defaults = {
        datasetElementType: "line",
        dataElementType: "point",
        indexAxis: "r",
        showLine: true,
        elements: {
            line: {
                fill: "start"
            }
        }
    };
    static overrides = {
        aspectRatio: 1,
        scales: {
            r: {
                type: "radialLinear"
            }
        }
    };
    getLabelAndValue(index) {
        const vScale = this._cachedMeta.vScale;
        const parsed = this.getParsed(index);
        return {
            label: vScale.getLabels()[index],
            value: "" + vScale.getLabelForValue(parsed[vScale.axis])
        };
    }
    parseObjectData(meta, data, start, count) {
        return (0, _helpersSegmentJs.y).bind(this)(meta, data, start, count);
    }
    update(mode) {
        const meta = this._cachedMeta;
        const line = meta.dataset;
        const points = meta.data || [];
        const labels = meta.iScale.getLabels();
        line.points = points;
        if (mode !== "resize") {
            const options = this.resolveDatasetElementOptions(mode);
            if (!this.options.showLine) options.borderWidth = 0;
            const properties = {
                _loop: true,
                _fullLoop: labels.length === points.length,
                options
            };
            this.updateElement(line, undefined, properties, mode);
        }
        this.updateElements(points, 0, points.length, mode);
    }
    updateElements(points, start, count, mode) {
        const scale = this._cachedMeta.rScale;
        const reset = mode === "reset";
        for(let i = start; i < start + count; i++){
            const point = points[i];
            const options = this.resolveDataElementOptions(i, point.active ? "active" : mode);
            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);
            const x = reset ? scale.xCenter : pointPosition.x;
            const y = reset ? scale.yCenter : pointPosition.y;
            const properties = {
                x,
                y,
                angle: pointPosition.angle,
                skip: isNaN(x) || isNaN(y),
                options
            };
            this.updateElement(point, i, properties, mode);
        }
    }
}
class ScatterController extends DatasetController {
    static id = "scatter";
    static defaults = {
        datasetElementType: false,
        dataElementType: "point",
        showLine: false,
        fill: false
    };
    static overrides = {
        interaction: {
            mode: "point"
        },
        scales: {
            x: {
                type: "linear"
            },
            y: {
                type: "linear"
            }
        }
    };
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const labels = this.chart.data.labels || [];
        const { xScale, yScale } = meta;
        const parsed = this.getParsed(index);
        const x = xScale.getLabelForValue(parsed.x);
        const y = yScale.getLabelForValue(parsed.y);
        return {
            label: labels[index] || "",
            value: "(" + x + ", " + y + ")"
        };
    }
    update(mode) {
        const meta = this._cachedMeta;
        const { data: points = [] } = meta;
        const animationsDisabled = this.chart._animationsDisabled;
        let { start, count } = (0, _helpersSegmentJs.q)(meta, points, animationsDisabled);
        this._drawStart = start;
        this._drawCount = count;
        if ((0, _helpersSegmentJs.w)(meta)) {
            start = 0;
            count = points.length;
        }
        if (this.options.showLine) {
            if (!this.datasetElementType) this.addElements();
            const { dataset: line, _dataset } = meta;
            line._chart = this.chart;
            line._datasetIndex = this.index;
            line._decimated = !!_dataset._decimated;
            line.points = points;
            const options = this.resolveDatasetElementOptions(mode);
            options.segment = this.options.segment;
            this.updateElement(line, undefined, {
                animated: !animationsDisabled,
                options
            }, mode);
        } else if (this.datasetElementType) {
            delete meta.dataset;
            this.datasetElementType = false;
        }
        this.updateElements(points, start, count, mode);
    }
    addElements() {
        const { showLine } = this.options;
        if (!this.datasetElementType && showLine) this.datasetElementType = this.chart.registry.getElement("line");
        super.addElements();
    }
    updateElements(points, start, count, mode) {
        const reset = mode === "reset";
        const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const { spanGaps, segment } = this.options;
        const maxGapLength = (0, _helpersSegmentJs.x)(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
        const directUpdate = this.chart._animationsDisabled || reset || mode === "none";
        let prevParsed = start > 0 && this.getParsed(start - 1);
        for(let i = start; i < start + count; ++i){
            const point = points[i];
            const parsed = this.getParsed(i);
            const properties = directUpdate ? point : {};
            const nullData = (0, _helpersSegmentJs.k)(parsed[vAxis]);
            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
            if (segment) {
                properties.parsed = parsed;
                properties.raw = _dataset.data[i];
            }
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? "active" : mode);
            if (!directUpdate) this.updateElement(point, i, properties, mode);
            prevParsed = parsed;
        }
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
    }
    getMaxOverflow() {
        const meta = this._cachedMeta;
        const data = meta.data || [];
        if (!this.options.showLine) {
            let max = 0;
            for(let i = data.length - 1; i >= 0; --i)max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
            return max > 0 && max;
        }
        const dataset = meta.dataset;
        const border = dataset.options && dataset.options.borderWidth || 0;
        if (!data.length) return border;
        const firstPoint = data[0].size(this.resolveDataElementOptions(0));
        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
        return Math.max(border, firstPoint, lastPoint) / 2;
    }
}
var controllers = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    BarController: BarController,
    BubbleController: BubbleController,
    DoughnutController: DoughnutController,
    LineController: LineController,
    PieController: PieController,
    PolarAreaController: PolarAreaController,
    RadarController: RadarController,
    ScatterController: ScatterController
});
/**
 * @namespace Chart._adapters
 * @since 2.8.0
 * @private
 */ function abstract() {
    throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
}
/**
 * Date adapter (current used by the time scale)
 * @namespace Chart._adapters._date
 * @memberof Chart._adapters
 * @private
 */ class DateAdapterBase {
    /**
   * Override default date adapter methods.
   * Accepts type parameter to define options type.
   * @example
   * Chart._adapters._date.override<{myAdapterOption: string}>({
   *   init() {
   *     console.log(this.options.myAdapterOption);
   *   }
   * })
   */ static override(members) {
        Object.assign(DateAdapterBase.prototype, members);
    }
    options;
    constructor(options){
        this.options = options || {};
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    init() {}
    formats() {
        return abstract();
    }
    parse() {
        return abstract();
    }
    format() {
        return abstract();
    }
    add() {
        return abstract();
    }
    diff() {
        return abstract();
    }
    startOf() {
        return abstract();
    }
    endOf() {
        return abstract();
    }
}
var adapters = {
    _date: DateAdapterBase
};
function binarySearch(metaset, axis, value, intersect) {
    const { controller, data, _sorted } = metaset;
    const iScale = controller._cachedMeta.iScale;
    if (iScale && axis === iScale.axis && axis !== "r" && _sorted && data.length) {
        const lookupMethod = iScale._reversePixels ? (0, _helpersSegmentJs.A) : (0, _helpersSegmentJs.B);
        if (!intersect) return lookupMethod(data, axis, value);
        else if (controller._sharedOptions) {
            const el = data[0];
            const range = typeof el.getRange === "function" && el.getRange(axis);
            if (range) {
                const start = lookupMethod(data, axis, value - range);
                const end = lookupMethod(data, axis, value + range);
                return {
                    lo: start.lo,
                    hi: end.hi
                };
            }
        }
    }
    return {
        lo: 0,
        hi: data.length - 1
    };
}
function evaluateInteractionItems(chart, axis, position, handler, intersect) {
    const metasets = chart.getSortedVisibleDatasetMetas();
    const value = position[axis];
    for(let i = 0, ilen = metasets.length; i < ilen; ++i){
        const { index, data } = metasets[i];
        const { lo, hi } = binarySearch(metasets[i], axis, value, intersect);
        for(let j = lo; j <= hi; ++j){
            const element = data[j];
            if (!element.skip) handler(element, index, j);
        }
    }
}
function getDistanceMetricForAxis(axis) {
    const useX = axis.indexOf("x") !== -1;
    const useY = axis.indexOf("y") !== -1;
    return function(pt1, pt2) {
        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
    };
}
function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
    const items = [];
    if (!includeInvisible && !chart.isPointInArea(position)) return items;
    const evaluationFunc = function(element, datasetIndex, index) {
        if (!includeInvisible && !(0, _helpersSegmentJs.C)(element, chart.chartArea, 0)) return;
        if (element.inRange(position.x, position.y, useFinalPosition)) items.push({
            element,
            datasetIndex,
            index
        });
    };
    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
    return items;
}
function getNearestRadialItems(chart, position, axis, useFinalPosition) {
    let items = [];
    function evaluationFunc(element, datasetIndex, index) {
        const { startAngle, endAngle } = element.getProps([
            "startAngle",
            "endAngle"
        ], useFinalPosition);
        const { angle } = (0, _helpersSegmentJs.D)(element, {
            x: position.x,
            y: position.y
        });
        if ((0, _helpersSegmentJs.p)(angle, startAngle, endAngle)) items.push({
            element,
            datasetIndex,
            index
        });
    }
    evaluateInteractionItems(chart, axis, position, evaluationFunc);
    return items;
}
function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
    let items = [];
    const distanceMetric = getDistanceMetricForAxis(axis);
    let minDistance = Number.POSITIVE_INFINITY;
    function evaluationFunc(element, datasetIndex, index) {
        const inRange = element.inRange(position.x, position.y, useFinalPosition);
        if (intersect && !inRange) return;
        const center = element.getCenterPoint(useFinalPosition);
        const pointInArea = !!includeInvisible || chart.isPointInArea(center);
        if (!pointInArea && !inRange) return;
        const distance = distanceMetric(position, center);
        if (distance < minDistance) {
            items = [
                {
                    element,
                    datasetIndex,
                    index
                }
            ];
            minDistance = distance;
        } else if (distance === minDistance) items.push({
            element,
            datasetIndex,
            index
        });
    }
    evaluateInteractionItems(chart, axis, position, evaluationFunc);
    return items;
}
function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
    if (!includeInvisible && !chart.isPointInArea(position)) return [];
    return axis === "r" && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
}
function getAxisItems(chart, position, axis, intersect, useFinalPosition) {
    const items = [];
    const rangeMethod = axis === "x" ? "inXRange" : "inYRange";
    let intersectsItem = false;
    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{
        if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {
            items.push({
                element,
                datasetIndex,
                index
            });
            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);
        }
    });
    if (intersect && !intersectsItem) return [];
    return items;
}
var Interaction = {
    evaluateInteractionItems,
    modes: {
        index (chart, e, options, useFinalPosition) {
            const position = (0, _helpersSegmentJs.z)(e, chart);
            const axis = options.axis || "x";
            const includeInvisible = options.includeInvisible || false;
            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
            const elements = [];
            if (!items.length) return [];
            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{
                const index = items[0].index;
                const element = meta.data[index];
                if (element && !element.skip) elements.push({
                    element,
                    datasetIndex: meta.index,
                    index
                });
            });
            return elements;
        },
        dataset (chart, e, options, useFinalPosition) {
            const position = (0, _helpersSegmentJs.z)(e, chart);
            const axis = options.axis || "xy";
            const includeInvisible = options.includeInvisible || false;
            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
            if (items.length > 0) {
                const datasetIndex = items[0].datasetIndex;
                const data = chart.getDatasetMeta(datasetIndex).data;
                items = [];
                for(let i = 0; i < data.length; ++i)items.push({
                    element: data[i],
                    datasetIndex,
                    index: i
                });
            }
            return items;
        },
        point (chart, e, options, useFinalPosition) {
            const position = (0, _helpersSegmentJs.z)(e, chart);
            const axis = options.axis || "xy";
            const includeInvisible = options.includeInvisible || false;
            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
        },
        nearest (chart, e, options, useFinalPosition) {
            const position = (0, _helpersSegmentJs.z)(e, chart);
            const axis = options.axis || "xy";
            const includeInvisible = options.includeInvisible || false;
            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);
        },
        x (chart, e, options, useFinalPosition) {
            const position = (0, _helpersSegmentJs.z)(e, chart);
            return getAxisItems(chart, position, "x", options.intersect, useFinalPosition);
        },
        y (chart, e, options, useFinalPosition) {
            const position = (0, _helpersSegmentJs.z)(e, chart);
            return getAxisItems(chart, position, "y", options.intersect, useFinalPosition);
        }
    }
};
const STATIC_POSITIONS = [
    "left",
    "top",
    "right",
    "bottom"
];
function filterByPosition(array, position) {
    return array.filter((v)=>v.pos === position);
}
function filterDynamicPositionByAxis(array, axis) {
    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);
}
function sortByWeight(array, reverse) {
    return array.sort((a, b)=>{
        const v0 = reverse ? b : a;
        const v1 = reverse ? a : b;
        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
    });
}
function wrapBoxes(boxes) {
    const layoutBoxes = [];
    let i, ilen, box, pos, stack, stackWeight;
    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){
        box = boxes[i];
        ({ position: pos, options: { stack, stackWeight = 1 } } = box);
        layoutBoxes.push({
            index: i,
            box,
            pos,
            horizontal: box.isHorizontal(),
            weight: box.weight,
            stack: stack && pos + stack,
            stackWeight
        });
    }
    return layoutBoxes;
}
function buildStacks(layouts) {
    const stacks = {};
    for (const wrap of layouts){
        const { stack, pos, stackWeight } = wrap;
        if (!stack || !STATIC_POSITIONS.includes(pos)) continue;
        const _stack = stacks[stack] || (stacks[stack] = {
            count: 0,
            placed: 0,
            weight: 0,
            size: 0
        });
        _stack.count++;
        _stack.weight += stackWeight;
    }
    return stacks;
}
function setLayoutDims(layouts, params) {
    const stacks = buildStacks(layouts);
    const { vBoxMaxWidth, hBoxMaxHeight } = params;
    let i, ilen, layout;
    for(i = 0, ilen = layouts.length; i < ilen; ++i){
        layout = layouts[i];
        const { fullSize } = layout.box;
        const stack = stacks[layout.stack];
        const factor = stack && layout.stackWeight / stack.weight;
        if (layout.horizontal) {
            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
            layout.height = hBoxMaxHeight;
        } else {
            layout.width = vBoxMaxWidth;
            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
        }
    }
    return stacks;
}
function buildLayoutBoxes(boxes) {
    const layoutBoxes = wrapBoxes(boxes);
    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);
    const left = sortByWeight(filterByPosition(layoutBoxes, "left"), true);
    const right = sortByWeight(filterByPosition(layoutBoxes, "right"));
    const top = sortByWeight(filterByPosition(layoutBoxes, "top"), true);
    const bottom = sortByWeight(filterByPosition(layoutBoxes, "bottom"));
    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, "x");
    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, "y");
    return {
        fullSize,
        leftAndTop: left.concat(top),
        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
        chartArea: filterByPosition(layoutBoxes, "chartArea"),
        vertical: left.concat(right).concat(centerVertical),
        horizontal: top.concat(bottom).concat(centerHorizontal)
    };
}
function getCombinedMax(maxPadding, chartArea, a, b) {
    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
}
function updateMaxPadding(maxPadding, boxPadding) {
    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
}
function updateDims(chartArea, params, layout, stacks) {
    const { pos, box } = layout;
    const maxPadding = chartArea.maxPadding;
    if (!(0, _helpersSegmentJs.i)(pos)) {
        if (layout.size) chartArea[pos] -= layout.size;
        const stack = stacks[layout.stack] || {
            size: 0,
            count: 1
        };
        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
        layout.size = stack.size / stack.count;
        chartArea[pos] += layout.size;
    }
    if (box.getPadding) updateMaxPadding(maxPadding, box.getPadding());
    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, "left", "right"));
    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, "top", "bottom"));
    const widthChanged = newWidth !== chartArea.w;
    const heightChanged = newHeight !== chartArea.h;
    chartArea.w = newWidth;
    chartArea.h = newHeight;
    return layout.horizontal ? {
        same: widthChanged,
        other: heightChanged
    } : {
        same: heightChanged,
        other: widthChanged
    };
}
function handleMaxPadding(chartArea) {
    const maxPadding = chartArea.maxPadding;
    function updatePos(pos) {
        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
        chartArea[pos] += change;
        return change;
    }
    chartArea.y += updatePos("top");
    chartArea.x += updatePos("left");
    updatePos("right");
    updatePos("bottom");
}
function getMargins(horizontal, chartArea) {
    const maxPadding = chartArea.maxPadding;
    function marginForPositions(positions) {
        const margin = {
            left: 0,
            top: 0,
            right: 0,
            bottom: 0
        };
        positions.forEach((pos)=>{
            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
        });
        return margin;
    }
    return horizontal ? marginForPositions([
        "left",
        "right"
    ]) : marginForPositions([
        "top",
        "bottom"
    ]);
}
function fitBoxes(boxes, chartArea, params, stacks) {
    const refitBoxes = [];
    let i, ilen, layout, box, refit, changed;
    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){
        layout = boxes[i];
        box = layout.box;
        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));
        const { same, other } = updateDims(chartArea, params, layout, stacks);
        refit |= same && refitBoxes.length;
        changed = changed || other;
        if (!box.fullSize) refitBoxes.push(layout);
    }
    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
}
function setBoxDims(box, left, top, width, height) {
    box.top = top;
    box.left = left;
    box.right = left + width;
    box.bottom = top + height;
    box.width = width;
    box.height = height;
}
function placeBoxes(boxes, chartArea, params, stacks) {
    const userPadding = params.padding;
    let { x, y } = chartArea;
    for (const layout of boxes){
        const box = layout.box;
        const stack = stacks[layout.stack] || {
            count: 1,
            placed: 0,
            weight: 1
        };
        const weight = layout.stackWeight / stack.weight || 1;
        if (layout.horizontal) {
            const width = chartArea.w * weight;
            const height = stack.size || box.height;
            if ((0, _helpersSegmentJs.h)(stack.start)) y = stack.start;
            if (box.fullSize) setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);
            else setBoxDims(box, chartArea.left + stack.placed, y, width, height);
            stack.start = y;
            stack.placed += width;
            y = box.bottom;
        } else {
            const height = chartArea.h * weight;
            const width = stack.size || box.width;
            if ((0, _helpersSegmentJs.h)(stack.start)) x = stack.start;
            if (box.fullSize) setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
            else setBoxDims(box, x, chartArea.top + stack.placed, width, height);
            stack.start = x;
            stack.placed += height;
            x = box.right;
        }
    }
    chartArea.x = x;
    chartArea.y = y;
}
var layouts = {
    addBox (chart, item) {
        if (!chart.boxes) chart.boxes = [];
        item.fullSize = item.fullSize || false;
        item.position = item.position || "top";
        item.weight = item.weight || 0;
        item._layers = item._layers || function() {
            return [
                {
                    z: 0,
                    draw (chartArea) {
                        item.draw(chartArea);
                    }
                }
            ];
        };
        chart.boxes.push(item);
    },
    removeBox (chart, layoutItem) {
        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
        if (index !== -1) chart.boxes.splice(index, 1);
    },
    configure (chart, item, options) {
        item.fullSize = options.fullSize;
        item.position = options.position;
        item.weight = options.weight;
    },
    update (chart, width, height, minPadding) {
        if (!chart) return;
        const padding = (0, _helpersSegmentJs.E)(chart.options.layout.padding);
        const availableWidth = Math.max(width - padding.width, 0);
        const availableHeight = Math.max(height - padding.height, 0);
        const boxes = buildLayoutBoxes(chart.boxes);
        const verticalBoxes = boxes.vertical;
        const horizontalBoxes = boxes.horizontal;
        (0, _helpersSegmentJs.F)(chart.boxes, (box)=>{
            if (typeof box.beforeLayout === "function") box.beforeLayout();
        });
        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
        const params = Object.freeze({
            outerWidth: width,
            outerHeight: height,
            padding,
            availableWidth,
            availableHeight,
            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
            hBoxMaxHeight: availableHeight / 2
        });
        const maxPadding = Object.assign({}, padding);
        updateMaxPadding(maxPadding, (0, _helpersSegmentJs.E)(minPadding));
        const chartArea = Object.assign({
            maxPadding,
            w: availableWidth,
            h: availableHeight,
            x: padding.left,
            y: padding.top
        }, padding);
        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
        fitBoxes(boxes.fullSize, chartArea, params, stacks);
        fitBoxes(verticalBoxes, chartArea, params, stacks);
        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) fitBoxes(verticalBoxes, chartArea, params, stacks);
        handleMaxPadding(chartArea);
        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
        chartArea.x += chartArea.w;
        chartArea.y += chartArea.h;
        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
        chart.chartArea = {
            left: chartArea.left,
            top: chartArea.top,
            right: chartArea.left + chartArea.w,
            bottom: chartArea.top + chartArea.h,
            height: chartArea.h,
            width: chartArea.w
        };
        (0, _helpersSegmentJs.F)(boxes.chartArea, (layout)=>{
            const box = layout.box;
            Object.assign(box, chart.chartArea);
            box.update(chartArea.w, chartArea.h, {
                left: 0,
                top: 0,
                right: 0,
                bottom: 0
            });
        });
    }
};
class BasePlatform {
    acquireContext(canvas, aspectRatio) {}
    releaseContext(context) {
        return false;
    }
    addEventListener(chart, type, listener) {}
    removeEventListener(chart, type, listener) {}
    getDevicePixelRatio() {
        return 1;
    }
    getMaximumSize(element, width, height, aspectRatio) {
        width = Math.max(0, width || element.width);
        height = height || element.height;
        return {
            width,
            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
        };
    }
    isAttached(canvas) {
        return true;
    }
    updateConfig(config) {}
}
class BasicPlatform extends BasePlatform {
    acquireContext(item) {
        return item && item.getContext && item.getContext("2d") || null;
    }
    updateConfig(config) {
        config.options.animation = false;
    }
}
const EXPANDO_KEY = "$chartjs";
const EVENT_TYPES = {
    touchstart: "mousedown",
    touchmove: "mousemove",
    touchend: "mouseup",
    pointerenter: "mouseenter",
    pointerdown: "mousedown",
    pointermove: "mousemove",
    pointerup: "mouseup",
    pointerleave: "mouseout",
    pointerout: "mouseout"
};
const isNullOrEmpty = (value)=>value === null || value === "";
function initCanvas(canvas, aspectRatio) {
    const style = canvas.style;
    const renderHeight = canvas.getAttribute("height");
    const renderWidth = canvas.getAttribute("width");
    canvas[EXPANDO_KEY] = {
        initial: {
            height: renderHeight,
            width: renderWidth,
            style: {
                display: style.display,
                height: style.height,
                width: style.width
            }
        }
    };
    style.display = style.display || "block";
    style.boxSizing = style.boxSizing || "border-box";
    if (isNullOrEmpty(renderWidth)) {
        const displayWidth = (0, _helpersSegmentJs.J)(canvas, "width");
        if (displayWidth !== undefined) canvas.width = displayWidth;
    }
    if (isNullOrEmpty(renderHeight)) {
        if (canvas.style.height === "") canvas.height = canvas.width / (aspectRatio || 2);
        else {
            const displayHeight = (0, _helpersSegmentJs.J)(canvas, "height");
            if (displayHeight !== undefined) canvas.height = displayHeight;
        }
    }
    return canvas;
}
const eventListenerOptions = (0, _helpersSegmentJs.K) ? {
    passive: true
} : false;
function addListener(node, type, listener) {
    if (node) node.addEventListener(type, listener, eventListenerOptions);
}
function removeListener(chart, type, listener) {
    if (chart && chart.canvas) chart.canvas.removeEventListener(type, listener, eventListenerOptions);
}
function fromNativeEvent(event, chart) {
    const type = EVENT_TYPES[event.type] || event.type;
    const { x, y } = (0, _helpersSegmentJs.z)(event, chart);
    return {
        type,
        chart,
        native: event,
        x: x !== undefined ? x : null,
        y: y !== undefined ? y : null
    };
}
function nodeListContains(nodeList, canvas) {
    for (const node of nodeList){
        if (node === canvas || node.contains(canvas)) return true;
    }
}
function createAttachObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const observer = new MutationObserver((entries)=>{
        let trigger = false;
        for (const entry of entries){
            trigger = trigger || nodeListContains(entry.addedNodes, canvas);
            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
        }
        if (trigger) listener();
    });
    observer.observe(document, {
        childList: true,
        subtree: true
    });
    return observer;
}
function createDetachObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const observer = new MutationObserver((entries)=>{
        let trigger = false;
        for (const entry of entries){
            trigger = trigger || nodeListContains(entry.removedNodes, canvas);
            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
        }
        if (trigger) listener();
    });
    observer.observe(document, {
        childList: true,
        subtree: true
    });
    return observer;
}
const drpListeningCharts = new Map();
let oldDevicePixelRatio = 0;
function onWindowResize() {
    const dpr = window.devicePixelRatio;
    if (dpr === oldDevicePixelRatio) return;
    oldDevicePixelRatio = dpr;
    drpListeningCharts.forEach((resize, chart)=>{
        if (chart.currentDevicePixelRatio !== dpr) resize();
    });
}
function listenDevicePixelRatioChanges(chart, resize) {
    if (!drpListeningCharts.size) window.addEventListener("resize", onWindowResize);
    drpListeningCharts.set(chart, resize);
}
function unlistenDevicePixelRatioChanges(chart) {
    drpListeningCharts.delete(chart);
    if (!drpListeningCharts.size) window.removeEventListener("resize", onWindowResize);
}
function createResizeObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const container = canvas && (0, _helpersSegmentJs.I)(canvas);
    if (!container) return;
    const resize = (0, _helpersSegmentJs.L)((width, height)=>{
        const w = container.clientWidth;
        listener(width, height);
        if (w < container.clientWidth) listener();
    }, window);
    const observer = new ResizeObserver((entries)=>{
        const entry = entries[0];
        const width = entry.contentRect.width;
        const height = entry.contentRect.height;
        if (width === 0 && height === 0) return;
        resize(width, height);
    });
    observer.observe(container);
    listenDevicePixelRatioChanges(chart, resize);
    return observer;
}
function releaseObserver(chart, type, observer) {
    if (observer) observer.disconnect();
    if (type === "resize") unlistenDevicePixelRatioChanges(chart);
}
function createProxyAndListen(chart, type, listener) {
    const canvas = chart.canvas;
    const proxy = (0, _helpersSegmentJs.L)((event)=>{
        if (chart.ctx !== null) listener(fromNativeEvent(event, chart));
    }, chart);
    addListener(canvas, type, proxy);
    return proxy;
}
class DomPlatform extends BasePlatform {
    acquireContext(canvas, aspectRatio) {
        const context = canvas && canvas.getContext && canvas.getContext("2d");
        if (context && context.canvas === canvas) {
            initCanvas(canvas, aspectRatio);
            return context;
        }
        return null;
    }
    releaseContext(context) {
        const canvas = context.canvas;
        if (!canvas[EXPANDO_KEY]) return false;
        const initial = canvas[EXPANDO_KEY].initial;
        [
            "height",
            "width"
        ].forEach((prop)=>{
            const value = initial[prop];
            if ((0, _helpersSegmentJs.k)(value)) canvas.removeAttribute(prop);
            else canvas.setAttribute(prop, value);
        });
        const style = initial.style || {};
        Object.keys(style).forEach((key)=>{
            canvas.style[key] = style[key];
        });
        canvas.width = canvas.width;
        delete canvas[EXPANDO_KEY];
        return true;
    }
    addEventListener(chart, type, listener) {
        this.removeEventListener(chart, type);
        const proxies = chart.$proxies || (chart.$proxies = {});
        const handlers = {
            attach: createAttachObserver,
            detach: createDetachObserver,
            resize: createResizeObserver
        };
        const handler = handlers[type] || createProxyAndListen;
        proxies[type] = handler(chart, type, listener);
    }
    removeEventListener(chart, type) {
        const proxies = chart.$proxies || (chart.$proxies = {});
        const proxy = proxies[type];
        if (!proxy) return;
        const handlers = {
            attach: releaseObserver,
            detach: releaseObserver,
            resize: releaseObserver
        };
        const handler = handlers[type] || removeListener;
        handler(chart, type, proxy);
        proxies[type] = undefined;
    }
    getDevicePixelRatio() {
        return window.devicePixelRatio;
    }
    getMaximumSize(canvas, width, height, aspectRatio) {
        return (0, _helpersSegmentJs.G)(canvas, width, height, aspectRatio);
    }
    isAttached(canvas) {
        const container = canvas && (0, _helpersSegmentJs.I)(canvas);
        return !!(container && container.isConnected);
    }
}
function _detectPlatform(canvas) {
    if (!(0, _helpersSegmentJs.M)() || typeof OffscreenCanvas !== "undefined" && canvas instanceof OffscreenCanvas) return BasicPlatform;
    return DomPlatform;
}
class Element {
    static defaults = {};
    static defaultRoutes = undefined;
    x;
    y;
    active = false;
    options;
    $animations;
    tooltipPosition(useFinalPosition) {
        const { x, y } = this.getProps([
            "x",
            "y"
        ], useFinalPosition);
        return {
            x,
            y
        };
    }
    hasValue() {
        return (0, _helpersSegmentJs.x)(this.x) && (0, _helpersSegmentJs.x)(this.y);
    }
    getProps(props, final) {
        const anims = this.$animations;
        if (!final || !anims) // let's not create an object, if not needed
        return this;
        const ret = {};
        props.forEach((prop)=>{
            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
        });
        return ret;
    }
}
function autoSkip(scale, ticks) {
    const tickOpts = scale.options.ticks;
    const determinedMaxTicks = determineMaxTicks(scale);
    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);
    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
    const numMajorIndices = majorIndices.length;
    const first = majorIndices[0];
    const last = majorIndices[numMajorIndices - 1];
    const newTicks = [];
    if (numMajorIndices > ticksLimit) {
        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
        return newTicks;
    }
    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
    if (numMajorIndices > 0) {
        let i, ilen;
        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
        skip(ticks, newTicks, spacing, (0, _helpersSegmentJs.k)(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++)skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
        skip(ticks, newTicks, spacing, last, (0, _helpersSegmentJs.k)(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
        return newTicks;
    }
    skip(ticks, newTicks, spacing);
    return newTicks;
}
function determineMaxTicks(scale) {
    const offset = scale.options.offset;
    const tickLength = scale._tickSize();
    const maxScale = scale._length / tickLength + (offset ? 0 : 1);
    const maxChart = scale._maxLength / tickLength;
    return Math.floor(Math.min(maxScale, maxChart));
}
function calculateSpacing(majorIndices, ticks, ticksLimit) {
    const evenMajorSpacing = getEvenSpacing(majorIndices);
    const spacing = ticks.length / ticksLimit;
    if (!evenMajorSpacing) return Math.max(spacing, 1);
    const factors = (0, _helpersSegmentJs.N)(evenMajorSpacing);
    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){
        const factor = factors[i];
        if (factor > spacing) return factor;
    }
    return Math.max(spacing, 1);
}
function getMajorIndices(ticks) {
    const result = [];
    let i, ilen;
    for(i = 0, ilen = ticks.length; i < ilen; i++)if (ticks[i].major) result.push(i);
    return result;
}
function skipMajors(ticks, newTicks, majorIndices, spacing) {
    let count = 0;
    let next = majorIndices[0];
    let i;
    spacing = Math.ceil(spacing);
    for(i = 0; i < ticks.length; i++)if (i === next) {
        newTicks.push(ticks[i]);
        count++;
        next = majorIndices[count * spacing];
    }
}
function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
    const start = (0, _helpersSegmentJs.v)(majorStart, 0);
    const end = Math.min((0, _helpersSegmentJs.v)(majorEnd, ticks.length), ticks.length);
    let count = 0;
    let length, i, next;
    spacing = Math.ceil(spacing);
    if (majorEnd) {
        length = majorEnd - majorStart;
        spacing = length / Math.floor(length / spacing);
    }
    next = start;
    while(next < 0){
        count++;
        next = Math.round(start + count * spacing);
    }
    for(i = Math.max(start, 0); i < end; i++)if (i === next) {
        newTicks.push(ticks[i]);
        count++;
        next = Math.round(start + count * spacing);
    }
}
function getEvenSpacing(arr) {
    const len = arr.length;
    let i, diff;
    if (len < 2) return false;
    for(diff = arr[0], i = 1; i < len; ++i){
        if (arr[i] - arr[i - 1] !== diff) return false;
    }
    return diff;
}
const reverseAlign = (align)=>align === "left" ? "right" : align === "right" ? "left" : align;
const offsetFromEdge = (scale, edge, offset)=>edge === "top" || edge === "left" ? scale[edge] + offset : scale[edge] - offset;
const getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);
function sample(arr, numItems) {
    const result = [];
    const increment = arr.length / numItems;
    const len = arr.length;
    let i = 0;
    for(; i < len; i += increment)result.push(arr[Math.floor(i)]);
    return result;
}
function getPixelForGridLine(scale, index, offsetGridLines) {
    const length = scale.ticks.length;
    const validIndex = Math.min(index, length - 1);
    const start = scale._startPixel;
    const end = scale._endPixel;
    const epsilon = 1e-6;
    let lineValue = scale.getPixelForTick(validIndex);
    let offset;
    if (offsetGridLines) {
        if (length === 1) offset = Math.max(lineValue - start, end - lineValue);
        else if (index === 0) offset = (scale.getPixelForTick(1) - lineValue) / 2;
        else offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
        lineValue += validIndex < index ? offset : -offset;
        if (lineValue < start - epsilon || lineValue > end + epsilon) return;
    }
    return lineValue;
}
function garbageCollect(caches, length) {
    (0, _helpersSegmentJs.F)(caches, (cache)=>{
        const gc = cache.gc;
        const gcLen = gc.length / 2;
        let i;
        if (gcLen > length) {
            for(i = 0; i < gcLen; ++i)delete cache.data[gc[i]];
            gc.splice(0, gcLen);
        }
    });
}
function getTickMarkLength(options) {
    return options.drawTicks ? options.tickLength : 0;
}
function getTitleHeight(options, fallback) {
    if (!options.display) return 0;
    const font = (0, _helpersSegmentJs.a0)(options.font, fallback);
    const padding = (0, _helpersSegmentJs.E)(options.padding);
    const lines = (0, _helpersSegmentJs.b)(options.text) ? options.text.length : 1;
    return lines * font.lineHeight + padding.height;
}
function createScaleContext(parent, scale) {
    return (0, _helpersSegmentJs.j)(parent, {
        scale,
        type: "scale"
    });
}
function createTickContext(parent, index, tick) {
    return (0, _helpersSegmentJs.j)(parent, {
        tick,
        index,
        type: "tick"
    });
}
function titleAlign(align, position, reverse) {
    let ret = (0, _helpersSegmentJs.a1)(align);
    if (reverse && position !== "right" || !reverse && position === "right") ret = reverseAlign(ret);
    return ret;
}
function titleArgs(scale, offset, position, align) {
    const { top, left, bottom, right, chart } = scale;
    const { chartArea, scales } = chart;
    let rotation = 0;
    let maxWidth, titleX, titleY;
    const height = bottom - top;
    const width = right - left;
    if (scale.isHorizontal()) {
        titleX = (0, _helpersSegmentJs.a2)(align, left, right);
        if ((0, _helpersSegmentJs.i)(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;
        } else if (position === "center") titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
        else titleY = offsetFromEdge(scale, position, offset);
        maxWidth = right - left;
    } else {
        if ((0, _helpersSegmentJs.i)(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;
        } else if (position === "center") titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
        else titleX = offsetFromEdge(scale, position, offset);
        titleY = (0, _helpersSegmentJs.a2)(align, bottom, top);
        rotation = position === "left" ? -(0, _helpersSegmentJs.H) : (0, _helpersSegmentJs.H);
    }
    return {
        titleX,
        titleY,
        maxWidth,
        rotation
    };
}
class Scale extends Element {
    constructor(cfg){
        super();
        this.id = cfg.id;
        this.type = cfg.type;
        this.options = undefined;
        this.ctx = cfg.ctx;
        this.chart = cfg.chart;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.width = undefined;
        this.height = undefined;
        this._margins = {
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
        };
        this.maxWidth = undefined;
        this.maxHeight = undefined;
        this.paddingTop = undefined;
        this.paddingBottom = undefined;
        this.paddingLeft = undefined;
        this.paddingRight = undefined;
        this.axis = undefined;
        this.labelRotation = undefined;
        this.min = undefined;
        this.max = undefined;
        this._range = undefined;
        this.ticks = [];
        this._gridLineItems = null;
        this._labelItems = null;
        this._labelSizes = null;
        this._length = 0;
        this._maxLength = 0;
        this._longestTextCache = {};
        this._startPixel = undefined;
        this._endPixel = undefined;
        this._reversePixels = false;
        this._userMax = undefined;
        this._userMin = undefined;
        this._suggestedMax = undefined;
        this._suggestedMin = undefined;
        this._ticksLength = 0;
        this._borderValue = 0;
        this._cache = {};
        this._dataLimitsCached = false;
        this.$context = undefined;
    }
    init(options) {
        this.options = options.setContext(this.getContext());
        this.axis = options.axis;
        this._userMin = this.parse(options.min);
        this._userMax = this.parse(options.max);
        this._suggestedMin = this.parse(options.suggestedMin);
        this._suggestedMax = this.parse(options.suggestedMax);
    }
    parse(raw, index) {
        return raw;
    }
    getUserBounds() {
        let { _userMin, _userMax, _suggestedMin, _suggestedMax } = this;
        _userMin = (0, _helpersSegmentJs.O)(_userMin, Number.POSITIVE_INFINITY);
        _userMax = (0, _helpersSegmentJs.O)(_userMax, Number.NEGATIVE_INFINITY);
        _suggestedMin = (0, _helpersSegmentJs.O)(_suggestedMin, Number.POSITIVE_INFINITY);
        _suggestedMax = (0, _helpersSegmentJs.O)(_suggestedMax, Number.NEGATIVE_INFINITY);
        return {
            min: (0, _helpersSegmentJs.O)(_userMin, _suggestedMin),
            max: (0, _helpersSegmentJs.O)(_userMax, _suggestedMax),
            minDefined: (0, _helpersSegmentJs.g)(_userMin),
            maxDefined: (0, _helpersSegmentJs.g)(_userMax)
        };
    }
    getMinMax(canStack) {
        let { min, max, minDefined, maxDefined } = this.getUserBounds();
        let range;
        if (minDefined && maxDefined) return {
            min,
            max
        };
        const metas = this.getMatchingVisibleMetas();
        for(let i = 0, ilen = metas.length; i < ilen; ++i){
            range = metas[i].controller.getMinMax(this, canStack);
            if (!minDefined) min = Math.min(min, range.min);
            if (!maxDefined) max = Math.max(max, range.max);
        }
        min = maxDefined && min > max ? max : min;
        max = minDefined && min > max ? min : max;
        return {
            min: (0, _helpersSegmentJs.O)(min, (0, _helpersSegmentJs.O)(max, min)),
            max: (0, _helpersSegmentJs.O)(max, (0, _helpersSegmentJs.O)(min, max))
        };
    }
    getPadding() {
        return {
            left: this.paddingLeft || 0,
            top: this.paddingTop || 0,
            right: this.paddingRight || 0,
            bottom: this.paddingBottom || 0
        };
    }
    getTicks() {
        return this.ticks;
    }
    getLabels() {
        const data = this.chart.data;
        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
    }
    getLabelItems(chartArea = this.chart.chartArea) {
        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
        return items;
    }
    beforeLayout() {
        this._cache = {};
        this._dataLimitsCached = false;
    }
    beforeUpdate() {
        (0, _helpersSegmentJs.Q)(this.options.beforeUpdate, [
            this
        ]);
    }
    update(maxWidth, maxHeight, margins) {
        const { beginAtZero, grace, ticks: tickOpts } = this.options;
        const sampleSize = tickOpts.sampleSize;
        this.beforeUpdate();
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this._margins = margins = Object.assign({
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
        }, margins);
        this.ticks = null;
        this._labelSizes = null;
        this._gridLineItems = null;
        this._labelItems = null;
        this.beforeSetDimensions();
        this.setDimensions();
        this.afterSetDimensions();
        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
        if (!this._dataLimitsCached) {
            this.beforeDataLimits();
            this.determineDataLimits();
            this.afterDataLimits();
            this._range = (0, _helpersSegmentJs.R)(this, grace, beginAtZero);
            this._dataLimitsCached = true;
        }
        this.beforeBuildTicks();
        this.ticks = this.buildTicks() || [];
        this.afterBuildTicks();
        const samplingEnabled = sampleSize < this.ticks.length;
        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
        this.configure();
        this.beforeCalculateLabelRotation();
        this.calculateLabelRotation();
        this.afterCalculateLabelRotation();
        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === "auto")) {
            this.ticks = autoSkip(this, this.ticks);
            this._labelSizes = null;
            this.afterAutoSkip();
        }
        if (samplingEnabled) this._convertTicksToLabels(this.ticks);
        this.beforeFit();
        this.fit();
        this.afterFit();
        this.afterUpdate();
    }
    configure() {
        let reversePixels = this.options.reverse;
        let startPixel, endPixel;
        if (this.isHorizontal()) {
            startPixel = this.left;
            endPixel = this.right;
        } else {
            startPixel = this.top;
            endPixel = this.bottom;
            reversePixels = !reversePixels;
        }
        this._startPixel = startPixel;
        this._endPixel = endPixel;
        this._reversePixels = reversePixels;
        this._length = endPixel - startPixel;
        this._alignToPixels = this.options.alignToPixels;
    }
    afterUpdate() {
        (0, _helpersSegmentJs.Q)(this.options.afterUpdate, [
            this
        ]);
    }
    beforeSetDimensions() {
        (0, _helpersSegmentJs.Q)(this.options.beforeSetDimensions, [
            this
        ]);
    }
    setDimensions() {
        if (this.isHorizontal()) {
            this.width = this.maxWidth;
            this.left = 0;
            this.right = this.width;
        } else {
            this.height = this.maxHeight;
            this.top = 0;
            this.bottom = this.height;
        }
        this.paddingLeft = 0;
        this.paddingTop = 0;
        this.paddingRight = 0;
        this.paddingBottom = 0;
    }
    afterSetDimensions() {
        (0, _helpersSegmentJs.Q)(this.options.afterSetDimensions, [
            this
        ]);
    }
    _callHooks(name) {
        this.chart.notifyPlugins(name, this.getContext());
        (0, _helpersSegmentJs.Q)(this.options[name], [
            this
        ]);
    }
    beforeDataLimits() {
        this._callHooks("beforeDataLimits");
    }
    determineDataLimits() {}
    afterDataLimits() {
        this._callHooks("afterDataLimits");
    }
    beforeBuildTicks() {
        this._callHooks("beforeBuildTicks");
    }
    buildTicks() {
        return [];
    }
    afterBuildTicks() {
        this._callHooks("afterBuildTicks");
    }
    beforeTickToLabelConversion() {
        (0, _helpersSegmentJs.Q)(this.options.beforeTickToLabelConversion, [
            this
        ]);
    }
    generateTickLabels(ticks) {
        const tickOpts = this.options.ticks;
        let i, ilen, tick;
        for(i = 0, ilen = ticks.length; i < ilen; i++){
            tick = ticks[i];
            tick.label = (0, _helpersSegmentJs.Q)(tickOpts.callback, [
                tick.value,
                i,
                ticks
            ], this);
        }
    }
    afterTickToLabelConversion() {
        (0, _helpersSegmentJs.Q)(this.options.afterTickToLabelConversion, [
            this
        ]);
    }
    beforeCalculateLabelRotation() {
        (0, _helpersSegmentJs.Q)(this.options.beforeCalculateLabelRotation, [
            this
        ]);
    }
    calculateLabelRotation() {
        const options = this.options;
        const tickOpts = options.ticks;
        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);
        const minRotation = tickOpts.minRotation || 0;
        const maxRotation = tickOpts.maxRotation;
        let labelRotation = minRotation;
        let tickWidth, maxHeight, maxLabelDiagonal;
        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
            this.labelRotation = minRotation;
            return;
        }
        const labelSizes = this._getLabelSizes();
        const maxLabelWidth = labelSizes.widest.width;
        const maxLabelHeight = labelSizes.highest.height;
        const maxWidth = (0, _helpersSegmentJs.S)(this.chart.width - maxLabelWidth, 0, this.maxWidth);
        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
        if (maxLabelWidth + 6 > tickWidth) {
            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);
            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
            labelRotation = (0, _helpersSegmentJs.U)(Math.min(Math.asin((0, _helpersSegmentJs.S)((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin((0, _helpersSegmentJs.S)(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin((0, _helpersSegmentJs.S)(maxLabelHeight / maxLabelDiagonal, -1, 1))));
            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
        }
        this.labelRotation = labelRotation;
    }
    afterCalculateLabelRotation() {
        (0, _helpersSegmentJs.Q)(this.options.afterCalculateLabelRotation, [
            this
        ]);
    }
    afterAutoSkip() {}
    beforeFit() {
        (0, _helpersSegmentJs.Q)(this.options.beforeFit, [
            this
        ]);
    }
    fit() {
        const minSize = {
            width: 0,
            height: 0
        };
        const { chart, options: { ticks: tickOpts, title: titleOpts, grid: gridOpts } } = this;
        const display = this._isVisible();
        const isHorizontal = this.isHorizontal();
        if (display) {
            const titleHeight = getTitleHeight(titleOpts, chart.options.font);
            if (isHorizontal) {
                minSize.width = this.maxWidth;
                minSize.height = getTickMarkLength(gridOpts) + titleHeight;
            } else {
                minSize.height = this.maxHeight;
                minSize.width = getTickMarkLength(gridOpts) + titleHeight;
            }
            if (tickOpts.display && this.ticks.length) {
                const { first, last, widest, highest } = this._getLabelSizes();
                const tickPadding = tickOpts.padding * 2;
                const angleRadians = (0, _helpersSegmentJs.t)(this.labelRotation);
                const cos = Math.cos(angleRadians);
                const sin = Math.sin(angleRadians);
                if (isHorizontal) {
                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
                } else {
                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
                }
                this._calculatePadding(first, last, sin, cos);
            }
        }
        this._handleMargins();
        if (isHorizontal) {
            this.width = this._length = chart.width - this._margins.left - this._margins.right;
            this.height = minSize.height;
        } else {
            this.width = minSize.width;
            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
        }
    }
    _calculatePadding(first, last, sin, cos) {
        const { ticks: { align, padding }, position } = this.options;
        const isRotated = this.labelRotation !== 0;
        const labelsBelowTicks = position !== "top" && this.axis === "x";
        if (this.isHorizontal()) {
            const offsetLeft = this.getPixelForTick(0) - this.left;
            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
            let paddingLeft = 0;
            let paddingRight = 0;
            if (isRotated) {
                if (labelsBelowTicks) {
                    paddingLeft = cos * first.width;
                    paddingRight = sin * last.height;
                } else {
                    paddingLeft = sin * first.height;
                    paddingRight = cos * last.width;
                }
            } else if (align === "start") paddingRight = last.width;
            else if (align === "end") paddingLeft = first.width;
            else if (align !== "inner") {
                paddingLeft = first.width / 2;
                paddingRight = last.width / 2;
            }
            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
        } else {
            let paddingTop = last.height / 2;
            let paddingBottom = first.height / 2;
            if (align === "start") {
                paddingTop = 0;
                paddingBottom = first.height;
            } else if (align === "end") {
                paddingTop = last.height;
                paddingBottom = 0;
            }
            this.paddingTop = paddingTop + padding;
            this.paddingBottom = paddingBottom + padding;
        }
    }
    _handleMargins() {
        if (this._margins) {
            this._margins.left = Math.max(this.paddingLeft, this._margins.left);
            this._margins.top = Math.max(this.paddingTop, this._margins.top);
            this._margins.right = Math.max(this.paddingRight, this._margins.right);
            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
        }
    }
    afterFit() {
        (0, _helpersSegmentJs.Q)(this.options.afterFit, [
            this
        ]);
    }
    isHorizontal() {
        const { axis, position } = this.options;
        return position === "top" || position === "bottom" || axis === "x";
    }
    isFullSize() {
        return this.options.fullSize;
    }
    _convertTicksToLabels(ticks) {
        this.beforeTickToLabelConversion();
        this.generateTickLabels(ticks);
        let i, ilen;
        for(i = 0, ilen = ticks.length; i < ilen; i++)if ((0, _helpersSegmentJs.k)(ticks[i].label)) {
            ticks.splice(i, 1);
            ilen--;
            i--;
        }
        this.afterTickToLabelConversion();
    }
    _getLabelSizes() {
        let labelSizes = this._labelSizes;
        if (!labelSizes) {
            const sampleSize = this.options.ticks.sampleSize;
            let ticks = this.ticks;
            if (sampleSize < ticks.length) ticks = sample(ticks, sampleSize);
            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);
        }
        return labelSizes;
    }
    _computeLabelSizes(ticks, length, maxTicksLimit) {
        const { ctx, _longestTextCache: caches } = this;
        const widths = [];
        const heights = [];
        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));
        let widestLabelSize = 0;
        let highestLabelSize = 0;
        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
        for(i = 0; i < length; i += increment){
            label = ticks[i].label;
            tickFont = this._resolveTickFontOptions(i);
            ctx.font = fontString = tickFont.string;
            cache = caches[fontString] = caches[fontString] || {
                data: {},
                gc: []
            };
            lineHeight = tickFont.lineHeight;
            width = height = 0;
            if (!(0, _helpersSegmentJs.k)(label) && !(0, _helpersSegmentJs.b)(label)) {
                width = (0, _helpersSegmentJs.V)(ctx, cache.data, cache.gc, width, label);
                height = lineHeight;
            } else if ((0, _helpersSegmentJs.b)(label)) for(j = 0, jlen = label.length; j < jlen; ++j){
                nestedLabel = label[j];
                if (!(0, _helpersSegmentJs.k)(nestedLabel) && !(0, _helpersSegmentJs.b)(nestedLabel)) {
                    width = (0, _helpersSegmentJs.V)(ctx, cache.data, cache.gc, width, nestedLabel);
                    height += lineHeight;
                }
            }
            widths.push(width);
            heights.push(height);
            widestLabelSize = Math.max(width, widestLabelSize);
            highestLabelSize = Math.max(height, highestLabelSize);
        }
        garbageCollect(caches, length);
        const widest = widths.indexOf(widestLabelSize);
        const highest = heights.indexOf(highestLabelSize);
        const valueAt = (idx)=>({
                width: widths[idx] || 0,
                height: heights[idx] || 0
            });
        return {
            first: valueAt(0),
            last: valueAt(length - 1),
            widest: valueAt(widest),
            highest: valueAt(highest),
            widths,
            heights
        };
    }
    getLabelForValue(value) {
        return value;
    }
    getPixelForValue(value, index) {
        return NaN;
    }
    getValueForPixel(pixel) {}
    getPixelForTick(index) {
        const ticks = this.ticks;
        if (index < 0 || index > ticks.length - 1) return null;
        return this.getPixelForValue(ticks[index].value);
    }
    getPixelForDecimal(decimal) {
        if (this._reversePixels) decimal = 1 - decimal;
        const pixel = this._startPixel + decimal * this._length;
        return (0, _helpersSegmentJs.W)(this._alignToPixels ? (0, _helpersSegmentJs.X)(this.chart, pixel, 0) : pixel);
    }
    getDecimalForPixel(pixel) {
        const decimal = (pixel - this._startPixel) / this._length;
        return this._reversePixels ? 1 - decimal : decimal;
    }
    getBasePixel() {
        return this.getPixelForValue(this.getBaseValue());
    }
    getBaseValue() {
        const { min, max } = this;
        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
    }
    getContext(index) {
        const ticks = this.ticks || [];
        if (index >= 0 && index < ticks.length) {
            const tick = ticks[index];
            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));
        }
        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
    }
    _tickSize() {
        const optionTicks = this.options.ticks;
        const rot = (0, _helpersSegmentJs.t)(this.labelRotation);
        const cos = Math.abs(Math.cos(rot));
        const sin = Math.abs(Math.sin(rot));
        const labelSizes = this._getLabelSizes();
        const padding = optionTicks.autoSkipPadding || 0;
        const w = labelSizes ? labelSizes.widest.width + padding : 0;
        const h = labelSizes ? labelSizes.highest.height + padding : 0;
        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;
    }
    _isVisible() {
        const display = this.options.display;
        if (display !== "auto") return !!display;
        return this.getMatchingVisibleMetas().length > 0;
    }
    _computeGridLineItems(chartArea) {
        const axis = this.axis;
        const chart = this.chart;
        const options = this.options;
        const { grid, position, border } = options;
        const offset = grid.offset;
        const isHorizontal = this.isHorizontal();
        const ticks = this.ticks;
        const ticksLength = ticks.length + (offset ? 1 : 0);
        const tl = getTickMarkLength(grid);
        const items = [];
        const borderOpts = border.setContext(this.getContext());
        const axisWidth = borderOpts.display ? borderOpts.width : 0;
        const axisHalfWidth = axisWidth / 2;
        const alignBorderValue = function(pixel) {
            return (0, _helpersSegmentJs.X)(chart, pixel, axisWidth);
        };
        let borderValue, i, lineValue, alignedLineValue;
        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;
        if (position === "top") {
            borderValue = alignBorderValue(this.bottom);
            ty1 = this.bottom - tl;
            ty2 = borderValue - axisHalfWidth;
            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
            y2 = chartArea.bottom;
        } else if (position === "bottom") {
            borderValue = alignBorderValue(this.top);
            y1 = chartArea.top;
            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
            ty1 = borderValue + axisHalfWidth;
            ty2 = this.top + tl;
        } else if (position === "left") {
            borderValue = alignBorderValue(this.right);
            tx1 = this.right - tl;
            tx2 = borderValue - axisHalfWidth;
            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
            x2 = chartArea.right;
        } else if (position === "right") {
            borderValue = alignBorderValue(this.left);
            x1 = chartArea.left;
            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
            tx1 = borderValue + axisHalfWidth;
            tx2 = this.left + tl;
        } else if (axis === "x") {
            if (position === "center") borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
            else if ((0, _helpersSegmentJs.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
            }
            y1 = chartArea.top;
            y2 = chartArea.bottom;
            ty1 = borderValue + axisHalfWidth;
            ty2 = ty1 + tl;
        } else if (axis === "y") {
            if (position === "center") borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
            else if ((0, _helpersSegmentJs.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
            }
            tx1 = borderValue - axisHalfWidth;
            tx2 = tx1 - tl;
            x1 = chartArea.left;
            x2 = chartArea.right;
        }
        const limit = (0, _helpersSegmentJs.v)(options.ticks.maxTicksLimit, ticksLength);
        const step = Math.max(1, Math.ceil(ticksLength / limit));
        for(i = 0; i < ticksLength; i += step){
            const context = this.getContext(i);
            const optsAtIndex = grid.setContext(context);
            const optsAtIndexBorder = border.setContext(context);
            const lineWidth = optsAtIndex.lineWidth;
            const lineColor = optsAtIndex.color;
            const borderDash = optsAtIndexBorder.dash || [];
            const borderDashOffset = optsAtIndexBorder.dashOffset;
            const tickWidth = optsAtIndex.tickWidth;
            const tickColor = optsAtIndex.tickColor;
            const tickBorderDash = optsAtIndex.tickBorderDash || [];
            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
            lineValue = getPixelForGridLine(this, i, offset);
            if (lineValue === undefined) continue;
            alignedLineValue = (0, _helpersSegmentJs.X)(chart, lineValue, lineWidth);
            if (isHorizontal) tx1 = tx2 = x1 = x2 = alignedLineValue;
            else ty1 = ty2 = y1 = y2 = alignedLineValue;
            items.push({
                tx1,
                ty1,
                tx2,
                ty2,
                x1,
                y1,
                x2,
                y2,
                width: lineWidth,
                color: lineColor,
                borderDash,
                borderDashOffset,
                tickWidth,
                tickColor,
                tickBorderDash,
                tickBorderDashOffset
            });
        }
        this._ticksLength = ticksLength;
        this._borderValue = borderValue;
        return items;
    }
    _computeLabelItems(chartArea) {
        const axis = this.axis;
        const options = this.options;
        const { position, ticks: optionTicks } = options;
        const isHorizontal = this.isHorizontal();
        const ticks = this.ticks;
        const { align, crossAlign, padding, mirror } = optionTicks;
        const tl = getTickMarkLength(options.grid);
        const tickAndPadding = tl + padding;
        const hTickAndPadding = mirror ? -padding : tickAndPadding;
        const rotation = -(0, _helpersSegmentJs.t)(this.labelRotation);
        const items = [];
        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
        let textBaseline = "middle";
        if (position === "top") {
            y = this.bottom - hTickAndPadding;
            textAlign = this._getXAxisLabelAlignment();
        } else if (position === "bottom") {
            y = this.top + hTickAndPadding;
            textAlign = this._getXAxisLabelAlignment();
        } else if (position === "left") {
            const ret = this._getYAxisLabelAlignment(tl);
            textAlign = ret.textAlign;
            x = ret.x;
        } else if (position === "right") {
            const ret = this._getYAxisLabelAlignment(tl);
            textAlign = ret.textAlign;
            x = ret.x;
        } else if (axis === "x") {
            if (position === "center") y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
            else if ((0, _helpersSegmentJs.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
            }
            textAlign = this._getXAxisLabelAlignment();
        } else if (axis === "y") {
            if (position === "center") x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
            else if ((0, _helpersSegmentJs.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                x = this.chart.scales[positionAxisID].getPixelForValue(value);
            }
            textAlign = this._getYAxisLabelAlignment(tl).textAlign;
        }
        if (axis === "y") {
            if (align === "start") textBaseline = "top";
            else if (align === "end") textBaseline = "bottom";
        }
        const labelSizes = this._getLabelSizes();
        for(i = 0, ilen = ticks.length; i < ilen; ++i){
            tick = ticks[i];
            label = tick.label;
            const optsAtIndex = optionTicks.setContext(this.getContext(i));
            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;
            font = this._resolveTickFontOptions(i);
            lineHeight = font.lineHeight;
            lineCount = (0, _helpersSegmentJs.b)(label) ? label.length : 1;
            const halfCount = lineCount / 2;
            const color = optsAtIndex.color;
            const strokeColor = optsAtIndex.textStrokeColor;
            const strokeWidth = optsAtIndex.textStrokeWidth;
            let tickTextAlign = textAlign;
            if (isHorizontal) {
                x = pixel;
                if (textAlign === "inner") {
                    if (i === ilen - 1) tickTextAlign = !this.options.reverse ? "right" : "left";
                    else if (i === 0) tickTextAlign = !this.options.reverse ? "left" : "right";
                    else tickTextAlign = "center";
                }
                if (position === "top") {
                    if (crossAlign === "near" || rotation !== 0) textOffset = -lineCount * lineHeight + lineHeight / 2;
                    else if (crossAlign === "center") textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
                    else textOffset = -labelSizes.highest.height + lineHeight / 2;
                } else {
                    if (crossAlign === "near" || rotation !== 0) textOffset = lineHeight / 2;
                    else if (crossAlign === "center") textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
                    else textOffset = labelSizes.highest.height - lineCount * lineHeight;
                }
                if (mirror) textOffset *= -1;
                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) x += lineHeight / 2 * Math.sin(rotation);
            } else {
                y = pixel;
                textOffset = (1 - lineCount) * lineHeight / 2;
            }
            let backdrop;
            if (optsAtIndex.showLabelBackdrop) {
                const labelPadding = (0, _helpersSegmentJs.E)(optsAtIndex.backdropPadding);
                const height = labelSizes.heights[i];
                const width = labelSizes.widths[i];
                let top = textOffset - labelPadding.top;
                let left = 0 - labelPadding.left;
                switch(textBaseline){
                    case "middle":
                        top -= height / 2;
                        break;
                    case "bottom":
                        top -= height;
                        break;
                }
                switch(textAlign){
                    case "center":
                        left -= width / 2;
                        break;
                    case "right":
                        left -= width;
                        break;
                    case "inner":
                        if (i === ilen - 1) left -= width;
                        else if (i > 0) left -= width / 2;
                        break;
                }
                backdrop = {
                    left,
                    top,
                    width: width + labelPadding.width,
                    height: height + labelPadding.height,
                    color: optsAtIndex.backdropColor
                };
            }
            items.push({
                label,
                font,
                textOffset,
                options: {
                    rotation,
                    color,
                    strokeColor,
                    strokeWidth,
                    textAlign: tickTextAlign,
                    textBaseline,
                    translation: [
                        x,
                        y
                    ],
                    backdrop
                }
            });
        }
        return items;
    }
    _getXAxisLabelAlignment() {
        const { position, ticks } = this.options;
        const rotation = -(0, _helpersSegmentJs.t)(this.labelRotation);
        if (rotation) return position === "top" ? "left" : "right";
        let align = "center";
        if (ticks.align === "start") align = "left";
        else if (ticks.align === "end") align = "right";
        else if (ticks.align === "inner") align = "inner";
        return align;
    }
    _getYAxisLabelAlignment(tl) {
        const { position, ticks: { crossAlign, mirror, padding } } = this.options;
        const labelSizes = this._getLabelSizes();
        const tickAndPadding = tl + padding;
        const widest = labelSizes.widest.width;
        let textAlign;
        let x;
        if (position === "left") {
            if (mirror) {
                x = this.right + padding;
                if (crossAlign === "near") textAlign = "left";
                else if (crossAlign === "center") {
                    textAlign = "center";
                    x += widest / 2;
                } else {
                    textAlign = "right";
                    x += widest;
                }
            } else {
                x = this.right - tickAndPadding;
                if (crossAlign === "near") textAlign = "right";
                else if (crossAlign === "center") {
                    textAlign = "center";
                    x -= widest / 2;
                } else {
                    textAlign = "left";
                    x = this.left;
                }
            }
        } else if (position === "right") {
            if (mirror) {
                x = this.left + padding;
                if (crossAlign === "near") textAlign = "right";
                else if (crossAlign === "center") {
                    textAlign = "center";
                    x -= widest / 2;
                } else {
                    textAlign = "left";
                    x -= widest;
                }
            } else {
                x = this.left + tickAndPadding;
                if (crossAlign === "near") textAlign = "left";
                else if (crossAlign === "center") {
                    textAlign = "center";
                    x += widest / 2;
                } else {
                    textAlign = "right";
                    x = this.right;
                }
            }
        } else textAlign = "right";
        return {
            textAlign,
            x
        };
    }
    _computeLabelArea() {
        if (this.options.ticks.mirror) return;
        const chart = this.chart;
        const position = this.options.position;
        if (position === "left" || position === "right") return {
            top: 0,
            left: this.left,
            bottom: chart.height,
            right: this.right
        };
        if (position === "top" || position === "bottom") return {
            top: this.top,
            left: 0,
            bottom: this.bottom,
            right: chart.width
        };
    }
    drawBackground() {
        const { ctx, options: { backgroundColor }, left, top, width, height } = this;
        if (backgroundColor) {
            ctx.save();
            ctx.fillStyle = backgroundColor;
            ctx.fillRect(left, top, width, height);
            ctx.restore();
        }
    }
    getLineWidthForValue(value) {
        const grid = this.options.grid;
        if (!this._isVisible() || !grid.display) return 0;
        const ticks = this.ticks;
        const index = ticks.findIndex((t)=>t.value === value);
        if (index >= 0) {
            const opts = grid.setContext(this.getContext(index));
            return opts.lineWidth;
        }
        return 0;
    }
    drawGrid(chartArea) {
        const grid = this.options.grid;
        const ctx = this.ctx;
        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
        let i, ilen;
        const drawLine = (p1, p2, style)=>{
            if (!style.width || !style.color) return;
            ctx.save();
            ctx.lineWidth = style.width;
            ctx.strokeStyle = style.color;
            ctx.setLineDash(style.borderDash || []);
            ctx.lineDashOffset = style.borderDashOffset;
            ctx.beginPath();
            ctx.moveTo(p1.x, p1.y);
            ctx.lineTo(p2.x, p2.y);
            ctx.stroke();
            ctx.restore();
        };
        if (grid.display) for(i = 0, ilen = items.length; i < ilen; ++i){
            const item = items[i];
            if (grid.drawOnChartArea) drawLine({
                x: item.x1,
                y: item.y1
            }, {
                x: item.x2,
                y: item.y2
            }, item);
            if (grid.drawTicks) drawLine({
                x: item.tx1,
                y: item.ty1
            }, {
                x: item.tx2,
                y: item.ty2
            }, {
                color: item.tickColor,
                width: item.tickWidth,
                borderDash: item.tickBorderDash,
                borderDashOffset: item.tickBorderDashOffset
            });
        }
    }
    drawBorder() {
        const { chart, ctx, options: { border, grid } } = this;
        const borderOpts = border.setContext(this.getContext());
        const axisWidth = border.display ? borderOpts.width : 0;
        if (!axisWidth) return;
        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
        const borderValue = this._borderValue;
        let x1, x2, y1, y2;
        if (this.isHorizontal()) {
            x1 = (0, _helpersSegmentJs.X)(chart, this.left, axisWidth) - axisWidth / 2;
            x2 = (0, _helpersSegmentJs.X)(chart, this.right, lastLineWidth) + lastLineWidth / 2;
            y1 = y2 = borderValue;
        } else {
            y1 = (0, _helpersSegmentJs.X)(chart, this.top, axisWidth) - axisWidth / 2;
            y2 = (0, _helpersSegmentJs.X)(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
            x1 = x2 = borderValue;
        }
        ctx.save();
        ctx.lineWidth = borderOpts.width;
        ctx.strokeStyle = borderOpts.color;
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
        ctx.restore();
    }
    drawLabels(chartArea) {
        const optionTicks = this.options.ticks;
        if (!optionTicks.display) return;
        const ctx = this.ctx;
        const area = this._computeLabelArea();
        if (area) (0, _helpersSegmentJs.Y)(ctx, area);
        const items = this.getLabelItems(chartArea);
        for (const item of items){
            const renderTextOptions = item.options;
            const tickFont = item.font;
            const label = item.label;
            const y = item.textOffset;
            (0, _helpersSegmentJs.Z)(ctx, label, 0, y, tickFont, renderTextOptions);
        }
        if (area) (0, _helpersSegmentJs.$)(ctx);
    }
    drawTitle() {
        const { ctx, options: { position, title, reverse } } = this;
        if (!title.display) return;
        const font = (0, _helpersSegmentJs.a0)(title.font);
        const padding = (0, _helpersSegmentJs.E)(title.padding);
        const align = title.align;
        let offset = font.lineHeight / 2;
        if (position === "bottom" || position === "center" || (0, _helpersSegmentJs.i)(position)) {
            offset += padding.bottom;
            if ((0, _helpersSegmentJs.b)(title.text)) offset += font.lineHeight * (title.text.length - 1);
        } else offset += padding.top;
        const { titleX, titleY, maxWidth, rotation } = titleArgs(this, offset, position, align);
        (0, _helpersSegmentJs.Z)(ctx, title.text, 0, 0, font, {
            color: title.color,
            maxWidth,
            rotation,
            textAlign: titleAlign(align, position, reverse),
            textBaseline: "middle",
            translation: [
                titleX,
                titleY
            ]
        });
    }
    draw(chartArea) {
        if (!this._isVisible()) return;
        this.drawBackground();
        this.drawGrid(chartArea);
        this.drawBorder();
        this.drawTitle();
        this.drawLabels(chartArea);
    }
    _layers() {
        const opts = this.options;
        const tz = opts.ticks && opts.ticks.z || 0;
        const gz = (0, _helpersSegmentJs.v)(opts.grid && opts.grid.z, -1);
        const bz = (0, _helpersSegmentJs.v)(opts.border && opts.border.z, 0);
        if (!this._isVisible() || this.draw !== Scale.prototype.draw) return [
            {
                z: tz,
                draw: (chartArea)=>{
                    this.draw(chartArea);
                }
            }
        ];
        return [
            {
                z: gz,
                draw: (chartArea)=>{
                    this.drawBackground();
                    this.drawGrid(chartArea);
                    this.drawTitle();
                }
            },
            {
                z: bz,
                draw: ()=>{
                    this.drawBorder();
                }
            },
            {
                z: tz,
                draw: (chartArea)=>{
                    this.drawLabels(chartArea);
                }
            }
        ];
    }
    getMatchingVisibleMetas(type) {
        const metas = this.chart.getSortedVisibleDatasetMetas();
        const axisID = this.axis + "AxisID";
        const result = [];
        let i, ilen;
        for(i = 0, ilen = metas.length; i < ilen; ++i){
            const meta = metas[i];
            if (meta[axisID] === this.id && (!type || meta.type === type)) result.push(meta);
        }
        return result;
    }
    _resolveTickFontOptions(index) {
        const opts = this.options.ticks.setContext(this.getContext(index));
        return (0, _helpersSegmentJs.a0)(opts.font);
    }
    _maxDigits() {
        const fontSize = this._resolveTickFontOptions(0).lineHeight;
        return (this.isHorizontal() ? this.width : this.height) / fontSize;
    }
}
class TypedRegistry {
    constructor(type, scope, override){
        this.type = type;
        this.scope = scope;
        this.override = override;
        this.items = Object.create(null);
    }
    isForType(type) {
        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
    }
    register(item) {
        const proto = Object.getPrototypeOf(item);
        let parentScope;
        if (isIChartComponent(proto)) parentScope = this.register(proto);
        const items = this.items;
        const id = item.id;
        const scope = this.scope + "." + id;
        if (!id) throw new Error("class does not have id: " + item);
        if (id in items) return scope;
        items[id] = item;
        registerDefaults(item, scope, parentScope);
        if (this.override) (0, _helpersSegmentJs.d).override(item.id, item.overrides);
        return scope;
    }
    get(id) {
        return this.items[id];
    }
    unregister(item) {
        const items = this.items;
        const id = item.id;
        const scope = this.scope;
        if (id in items) delete items[id];
        if (scope && id in (0, _helpersSegmentJs.d)[scope]) {
            delete (0, _helpersSegmentJs.d)[scope][id];
            if (this.override) delete (0, _helpersSegmentJs.a3)[id];
        }
    }
}
function registerDefaults(item, scope, parentScope) {
    const itemDefaults = (0, _helpersSegmentJs.a4)(Object.create(null), [
        parentScope ? (0, _helpersSegmentJs.d).get(parentScope) : {},
        (0, _helpersSegmentJs.d).get(scope),
        item.defaults
    ]);
    (0, _helpersSegmentJs.d).set(scope, itemDefaults);
    if (item.defaultRoutes) routeDefaults(scope, item.defaultRoutes);
    if (item.descriptors) (0, _helpersSegmentJs.d).describe(scope, item.descriptors);
}
function routeDefaults(scope, routes) {
    Object.keys(routes).forEach((property)=>{
        const propertyParts = property.split(".");
        const sourceName = propertyParts.pop();
        const sourceScope = [
            scope
        ].concat(propertyParts).join(".");
        const parts = routes[property].split(".");
        const targetName = parts.pop();
        const targetScope = parts.join(".");
        (0, _helpersSegmentJs.d).route(sourceScope, sourceName, targetScope, targetName);
    });
}
function isIChartComponent(proto) {
    return "id" in proto && "defaults" in proto;
}
class Registry {
    constructor(){
        this.controllers = new TypedRegistry(DatasetController, "datasets", true);
        this.elements = new TypedRegistry(Element, "elements");
        this.plugins = new TypedRegistry(Object, "plugins");
        this.scales = new TypedRegistry(Scale, "scales");
        this._typedRegistries = [
            this.controllers,
            this.scales,
            this.elements
        ];
    }
    add(...args) {
        this._each("register", args);
    }
    remove(...args) {
        this._each("unregister", args);
    }
    addControllers(...args) {
        this._each("register", args, this.controllers);
    }
    addElements(...args) {
        this._each("register", args, this.elements);
    }
    addPlugins(...args) {
        this._each("register", args, this.plugins);
    }
    addScales(...args) {
        this._each("register", args, this.scales);
    }
    getController(id) {
        return this._get(id, this.controllers, "controller");
    }
    getElement(id) {
        return this._get(id, this.elements, "element");
    }
    getPlugin(id) {
        return this._get(id, this.plugins, "plugin");
    }
    getScale(id) {
        return this._get(id, this.scales, "scale");
    }
    removeControllers(...args) {
        this._each("unregister", args, this.controllers);
    }
    removeElements(...args) {
        this._each("unregister", args, this.elements);
    }
    removePlugins(...args) {
        this._each("unregister", args, this.plugins);
    }
    removeScales(...args) {
        this._each("unregister", args, this.scales);
    }
    _each(method, args, typedRegistry) {
        [
            ...args
        ].forEach((arg)=>{
            const reg = typedRegistry || this._getRegistryForType(arg);
            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) this._exec(method, reg, arg);
            else (0, _helpersSegmentJs.F)(arg, (item)=>{
                const itemReg = typedRegistry || this._getRegistryForType(item);
                this._exec(method, itemReg, item);
            });
        });
    }
    _exec(method, registry, component) {
        const camelMethod = (0, _helpersSegmentJs.a5)(method);
        (0, _helpersSegmentJs.Q)(component["before" + camelMethod], [], component);
        registry[method](component);
        (0, _helpersSegmentJs.Q)(component["after" + camelMethod], [], component);
    }
    _getRegistryForType(type) {
        for(let i = 0; i < this._typedRegistries.length; i++){
            const reg = this._typedRegistries[i];
            if (reg.isForType(type)) return reg;
        }
        return this.plugins;
    }
    _get(id, typedRegistry, type) {
        const item = typedRegistry.get(id);
        if (item === undefined) throw new Error('"' + id + '" is not a registered ' + type + ".");
        return item;
    }
}
var registry = /* #__PURE__ */ new Registry();
class PluginService {
    constructor(){
        this._init = [];
    }
    notify(chart, hook, args, filter) {
        if (hook === "beforeInit") {
            this._init = this._createDescriptors(chart, true);
            this._notify(this._init, chart, "install");
        }
        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
        const result = this._notify(descriptors, chart, hook, args);
        if (hook === "afterDestroy") {
            this._notify(descriptors, chart, "stop");
            this._notify(this._init, chart, "uninstall");
        }
        return result;
    }
    _notify(descriptors, chart, hook, args) {
        args = args || {};
        for (const descriptor of descriptors){
            const plugin = descriptor.plugin;
            const method = plugin[hook];
            const params = [
                chart,
                args,
                descriptor.options
            ];
            if ((0, _helpersSegmentJs.Q)(method, params, plugin) === false && args.cancelable) return false;
        }
        return true;
    }
    invalidate() {
        if (!(0, _helpersSegmentJs.k)(this._cache)) {
            this._oldCache = this._cache;
            this._cache = undefined;
        }
    }
    _descriptors(chart) {
        if (this._cache) return this._cache;
        const descriptors = this._cache = this._createDescriptors(chart);
        this._notifyStateChanges(chart);
        return descriptors;
    }
    _createDescriptors(chart, all) {
        const config = chart && chart.config;
        const options = (0, _helpersSegmentJs.v)(config.options && config.options.plugins, {});
        const plugins = allPlugins(config);
        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);
    }
    _notifyStateChanges(chart) {
        const previousDescriptors = this._oldCache || [];
        const descriptors = this._cache;
        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));
        this._notify(diff(previousDescriptors, descriptors), chart, "stop");
        this._notify(diff(descriptors, previousDescriptors), chart, "start");
    }
}
function allPlugins(config) {
    const localIds = {};
    const plugins = [];
    const keys = Object.keys(registry.plugins.items);
    for(let i = 0; i < keys.length; i++)plugins.push(registry.getPlugin(keys[i]));
    const local = config.plugins || [];
    for(let i = 0; i < local.length; i++){
        const plugin = local[i];
        if (plugins.indexOf(plugin) === -1) {
            plugins.push(plugin);
            localIds[plugin.id] = true;
        }
    }
    return {
        plugins,
        localIds
    };
}
function getOpts(options, all) {
    if (!all && options === false) return null;
    if (options === true) return {};
    return options;
}
function createDescriptors(chart, { plugins, localIds }, options, all) {
    const result = [];
    const context = chart.getContext();
    for (const plugin of plugins){
        const id = plugin.id;
        const opts = getOpts(options[id], all);
        if (opts === null) continue;
        result.push({
            plugin,
            options: pluginOpts(chart.config, {
                plugin,
                local: localIds[id]
            }, opts, context)
        });
    }
    return result;
}
function pluginOpts(config, { plugin, local }, opts, context) {
    const keys = config.pluginScopeKeys(plugin);
    const scopes = config.getOptionScopes(opts, keys);
    if (local && plugin.defaults) scopes.push(plugin.defaults);
    return config.createResolver(scopes, context, [
        ""
    ], {
        scriptable: false,
        indexable: false,
        allKeys: true
    });
}
function getIndexAxis(type, options) {
    const datasetDefaults = (0, _helpersSegmentJs.d).datasets[type] || {};
    const datasetOptions = (options.datasets || {})[type] || {};
    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || "x";
}
function getAxisFromDefaultScaleID(id, indexAxis) {
    let axis = id;
    if (id === "_index_") axis = indexAxis;
    else if (id === "_value_") axis = indexAxis === "x" ? "y" : "x";
    return axis;
}
function getDefaultScaleIDFromAxis(axis, indexAxis) {
    return axis === indexAxis ? "_index_" : "_value_";
}
function idMatchesAxis(id) {
    if (id === "x" || id === "y" || id === "r") return id;
}
function axisFromPosition(position) {
    if (position === "top" || position === "bottom") return "x";
    if (position === "left" || position === "right") return "y";
}
function determineAxis(id, ...scaleOptions) {
    if (idMatchesAxis(id)) return id;
    for (const opts of scaleOptions){
        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());
        if (axis) return axis;
    }
    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);
}
function getAxisFromDataset(id, axis, dataset) {
    if (dataset[axis + "AxisID"] === id) return {
        axis
    };
}
function retrieveAxisFromDatasets(id, config) {
    if (config.data && config.data.datasets) {
        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);
        if (boundDs.length) return getAxisFromDataset(id, "x", boundDs[0]) || getAxisFromDataset(id, "y", boundDs[0]);
    }
    return {};
}
function mergeScaleConfig(config, options) {
    const chartDefaults = (0, _helpersSegmentJs.a3)[config.type] || {
        scales: {}
    };
    const configScales = options.scales || {};
    const chartIndexAxis = getIndexAxis(config.type, options);
    const scales = Object.create(null);
    Object.keys(configScales).forEach((id)=>{
        const scaleConf = configScales[id];
        if (!(0, _helpersSegmentJs.i)(scaleConf)) return console.error(`Invalid scale configuration for scale: ${id}`);
        if (scaleConf._proxy) return console.warn(`Ignoring resolver passed as options for scale: ${id}`);
        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), (0, _helpersSegmentJs.d).scales[scaleConf.type]);
        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
        const defaultScaleOptions = chartDefaults.scales || {};
        scales[id] = (0, _helpersSegmentJs.ab)(Object.create(null), [
            {
                axis
            },
            scaleConf,
            defaultScaleOptions[axis],
            defaultScaleOptions[defaultId]
        ]);
    });
    config.data.datasets.forEach((dataset)=>{
        const type = dataset.type || config.type;
        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
        const datasetDefaults = (0, _helpersSegmentJs.a3)[type] || {};
        const defaultScaleOptions = datasetDefaults.scales || {};
        Object.keys(defaultScaleOptions).forEach((defaultID)=>{
            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
            const id = dataset[axis + "AxisID"] || axis;
            scales[id] = scales[id] || Object.create(null);
            (0, _helpersSegmentJs.ab)(scales[id], [
                {
                    axis
                },
                configScales[id],
                defaultScaleOptions[defaultID]
            ]);
        });
    });
    Object.keys(scales).forEach((key)=>{
        const scale = scales[key];
        (0, _helpersSegmentJs.ab)(scale, [
            (0, _helpersSegmentJs.d).scales[scale.type],
            (0, _helpersSegmentJs.d).scale
        ]);
    });
    return scales;
}
function initOptions(config) {
    const options = config.options || (config.options = {});
    options.plugins = (0, _helpersSegmentJs.v)(options.plugins, {});
    options.scales = mergeScaleConfig(config, options);
}
function initData(data) {
    data = data || {};
    data.datasets = data.datasets || [];
    data.labels = data.labels || [];
    return data;
}
function initConfig(config) {
    config = config || {};
    config.data = initData(config.data);
    initOptions(config);
    return config;
}
const keyCache = new Map();
const keysCached = new Set();
function cachedKeys(cacheKey, generate) {
    let keys = keyCache.get(cacheKey);
    if (!keys) {
        keys = generate();
        keyCache.set(cacheKey, keys);
        keysCached.add(keys);
    }
    return keys;
}
const addIfFound = (set, obj, key)=>{
    const opts = (0, _helpersSegmentJs.f)(obj, key);
    if (opts !== undefined) set.add(opts);
};
class Config {
    constructor(config){
        this._config = initConfig(config);
        this._scopeCache = new Map();
        this._resolverCache = new Map();
    }
    get platform() {
        return this._config.platform;
    }
    get type() {
        return this._config.type;
    }
    set type(type) {
        this._config.type = type;
    }
    get data() {
        return this._config.data;
    }
    set data(data) {
        this._config.data = initData(data);
    }
    get options() {
        return this._config.options;
    }
    set options(options) {
        this._config.options = options;
    }
    get plugins() {
        return this._config.plugins;
    }
    update() {
        const config = this._config;
        this.clearCache();
        initOptions(config);
    }
    clearCache() {
        this._scopeCache.clear();
        this._resolverCache.clear();
    }
    datasetScopeKeys(datasetType) {
        return cachedKeys(datasetType, ()=>[
                [
                    `datasets.${datasetType}`,
                    ""
                ]
            ]);
    }
    datasetAnimationScopeKeys(datasetType, transition) {
        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[
                [
                    `datasets.${datasetType}.transitions.${transition}`,
                    `transitions.${transition}`
                ],
                [
                    `datasets.${datasetType}`,
                    ""
                ]
            ]);
    }
    datasetElementScopeKeys(datasetType, elementType) {
        return cachedKeys(`${datasetType}-${elementType}`, ()=>[
                [
                    `datasets.${datasetType}.elements.${elementType}`,
                    `datasets.${datasetType}`,
                    `elements.${elementType}`,
                    ""
                ]
            ]);
    }
    pluginScopeKeys(plugin) {
        const id = plugin.id;
        const type = this.type;
        return cachedKeys(`${type}-plugin-${id}`, ()=>[
                [
                    `plugins.${id}`,
                    ...plugin.additionalOptionScopes || []
                ]
            ]);
    }
    _cachedScopes(mainScope, resetCache) {
        const _scopeCache = this._scopeCache;
        let cache = _scopeCache.get(mainScope);
        if (!cache || resetCache) {
            cache = new Map();
            _scopeCache.set(mainScope, cache);
        }
        return cache;
    }
    getOptionScopes(mainScope, keyLists, resetCache) {
        const { options, type } = this;
        const cache = this._cachedScopes(mainScope, resetCache);
        const cached = cache.get(keyLists);
        if (cached) return cached;
        const scopes = new Set();
        keyLists.forEach((keys)=>{
            if (mainScope) {
                scopes.add(mainScope);
                keys.forEach((key)=>addIfFound(scopes, mainScope, key));
            }
            keys.forEach((key)=>addIfFound(scopes, options, key));
            keys.forEach((key)=>addIfFound(scopes, (0, _helpersSegmentJs.a3)[type] || {}, key));
            keys.forEach((key)=>addIfFound(scopes, (0, _helpersSegmentJs.d), key));
            keys.forEach((key)=>addIfFound(scopes, (0, _helpersSegmentJs.a6), key));
        });
        const array = Array.from(scopes);
        if (array.length === 0) array.push(Object.create(null));
        if (keysCached.has(keyLists)) cache.set(keyLists, array);
        return array;
    }
    chartOptionScopes() {
        const { options, type } = this;
        return [
            options,
            (0, _helpersSegmentJs.a3)[type] || {},
            (0, _helpersSegmentJs.d).datasets[type] || {},
            {
                type
            },
            (0, _helpersSegmentJs.d),
            (0, _helpersSegmentJs.a6)
        ];
    }
    resolveNamedOptions(scopes, names, context, prefixes = [
        ""
    ]) {
        const result = {
            $shared: true
        };
        const { resolver, subPrefixes } = getResolver(this._resolverCache, scopes, prefixes);
        let options = resolver;
        if (needContext(resolver, names)) {
            result.$shared = false;
            context = (0, _helpersSegmentJs.a7)(context) ? context() : context;
            const subResolver = this.createResolver(scopes, context, subPrefixes);
            options = (0, _helpersSegmentJs.a8)(resolver, context, subResolver);
        }
        for (const prop of names)result[prop] = options[prop];
        return result;
    }
    createResolver(scopes, context, prefixes = [
        ""
    ], descriptorDefaults) {
        const { resolver } = getResolver(this._resolverCache, scopes, prefixes);
        return (0, _helpersSegmentJs.i)(context) ? (0, _helpersSegmentJs.a8)(resolver, context, undefined, descriptorDefaults) : resolver;
    }
}
function getResolver(resolverCache, scopes, prefixes) {
    let cache = resolverCache.get(scopes);
    if (!cache) {
        cache = new Map();
        resolverCache.set(scopes, cache);
    }
    const cacheKey = prefixes.join();
    let cached = cache.get(cacheKey);
    if (!cached) {
        const resolver = (0, _helpersSegmentJs.a9)(scopes, prefixes);
        cached = {
            resolver,
            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes("hover"))
        };
        cache.set(cacheKey, cached);
    }
    return cached;
}
const hasFunction = (value)=>(0, _helpersSegmentJs.i)(value) && Object.getOwnPropertyNames(value).some((key)=>(0, _helpersSegmentJs.a7)(value[key]));
function needContext(proxy, names) {
    const { isScriptable, isIndexable } = (0, _helpersSegmentJs.aa)(proxy);
    for (const prop of names){
        const scriptable = isScriptable(prop);
        const indexable = isIndexable(prop);
        const value = (indexable || scriptable) && proxy[prop];
        if (scriptable && ((0, _helpersSegmentJs.a7)(value) || hasFunction(value)) || indexable && (0, _helpersSegmentJs.b)(value)) return true;
    }
    return false;
}
var version = "4.4.4";
const KNOWN_POSITIONS = [
    "top",
    "bottom",
    "left",
    "right",
    "chartArea"
];
function positionIsHorizontal(position, axis) {
    return position === "top" || position === "bottom" || KNOWN_POSITIONS.indexOf(position) === -1 && axis === "x";
}
function compare2Level(l1, l2) {
    return function(a, b) {
        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];
    };
}
function onAnimationsComplete(context) {
    const chart = context.chart;
    const animationOptions = chart.options.animation;
    chart.notifyPlugins("afterRender");
    (0, _helpersSegmentJs.Q)(animationOptions && animationOptions.onComplete, [
        context
    ], chart);
}
function onAnimationProgress(context) {
    const chart = context.chart;
    const animationOptions = chart.options.animation;
    (0, _helpersSegmentJs.Q)(animationOptions && animationOptions.onProgress, [
        context
    ], chart);
}
function getCanvas(item) {
    if ((0, _helpersSegmentJs.M)() && typeof item === "string") item = document.getElementById(item);
    else if (item && item.length) item = item[0];
    if (item && item.canvas) item = item.canvas;
    return item;
}
const instances = {};
const getChart = (key)=>{
    const canvas = getCanvas(key);
    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();
};
function moveNumericKeys(obj, start, move) {
    const keys = Object.keys(obj);
    for (const key of keys){
        const intKey = +key;
        if (intKey >= start) {
            const value = obj[key];
            delete obj[key];
            if (move > 0 || intKey > start) obj[intKey + move] = value;
        }
    }
}
function determineLastEvent(e, lastEvent, inChartArea, isClick) {
    if (!inChartArea || e.type === "mouseout") return null;
    if (isClick) return lastEvent;
    return e;
}
function getSizeForArea(scale, chartArea, field) {
    return scale.options.clip ? scale[field] : chartArea[field];
}
function getDatasetArea(meta, chartArea) {
    const { xScale, yScale } = meta;
    if (xScale && yScale) return {
        left: getSizeForArea(xScale, chartArea, "left"),
        right: getSizeForArea(xScale, chartArea, "right"),
        top: getSizeForArea(yScale, chartArea, "top"),
        bottom: getSizeForArea(yScale, chartArea, "bottom")
    };
    return chartArea;
}
class Chart {
    static defaults = (0, _helpersSegmentJs.d);
    static instances = instances;
    static overrides = (0, _helpersSegmentJs.a3);
    static registry = registry;
    static version = version;
    static getChart = getChart;
    static register(...items) {
        registry.add(...items);
        invalidatePlugins();
    }
    static unregister(...items) {
        registry.remove(...items);
        invalidatePlugins();
    }
    constructor(item, userConfig){
        const config = this.config = new Config(userConfig);
        const initialCanvas = getCanvas(item);
        const existingChart = getChart(initialCanvas);
        if (existingChart) throw new Error("Canvas is already in use. Chart with ID '" + existingChart.id + "'" + " must be destroyed before the canvas with ID '" + existingChart.canvas.id + "' can be reused.");
        const options = config.createResolver(config.chartOptionScopes(), this.getContext());
        this.platform = new (config.platform || _detectPlatform(initialCanvas))();
        this.platform.updateConfig(config);
        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
        const canvas = context && context.canvas;
        const height = canvas && canvas.height;
        const width = canvas && canvas.width;
        this.id = (0, _helpersSegmentJs.ac)();
        this.ctx = context;
        this.canvas = canvas;
        this.width = width;
        this.height = height;
        this._options = options;
        this._aspectRatio = this.aspectRatio;
        this._layers = [];
        this._metasets = [];
        this._stacks = undefined;
        this.boxes = [];
        this.currentDevicePixelRatio = undefined;
        this.chartArea = undefined;
        this._active = [];
        this._lastEvent = undefined;
        this._listeners = {};
        this._responsiveListeners = undefined;
        this._sortedMetasets = [];
        this.scales = {};
        this._plugins = new PluginService();
        this.$proxies = {};
        this._hiddenIndices = {};
        this.attached = false;
        this._animationsDisabled = undefined;
        this.$context = undefined;
        this._doResize = (0, _helpersSegmentJs.ad)((mode)=>this.update(mode), options.resizeDelay || 0);
        this._dataChanges = [];
        instances[this.id] = this;
        if (!context || !canvas) {
            console.error("Failed to create chart: can't acquire context from the given item");
            return;
        }
        animator.listen(this, "complete", onAnimationsComplete);
        animator.listen(this, "progress", onAnimationProgress);
        this._initialize();
        if (this.attached) this.update();
    }
    get aspectRatio() {
        const { options: { aspectRatio, maintainAspectRatio }, width, height, _aspectRatio } = this;
        if (!(0, _helpersSegmentJs.k)(aspectRatio)) return aspectRatio;
        if (maintainAspectRatio && _aspectRatio) return _aspectRatio;
        return height ? width / height : null;
    }
    get data() {
        return this.config.data;
    }
    set data(data) {
        this.config.data = data;
    }
    get options() {
        return this._options;
    }
    set options(options) {
        this.config.options = options;
    }
    get registry() {
        return registry;
    }
    _initialize() {
        this.notifyPlugins("beforeInit");
        if (this.options.responsive) this.resize();
        else (0, _helpersSegmentJs.ae)(this, this.options.devicePixelRatio);
        this.bindEvents();
        this.notifyPlugins("afterInit");
        return this;
    }
    clear() {
        (0, _helpersSegmentJs.af)(this.canvas, this.ctx);
        return this;
    }
    stop() {
        animator.stop(this);
        return this;
    }
    resize(width, height) {
        if (!animator.running(this)) this._resize(width, height);
        else this._resizeBeforeDraw = {
            width,
            height
        };
    }
    _resize(width, height) {
        const options = this.options;
        const canvas = this.canvas;
        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;
        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
        const mode = this.width ? "resize" : "attach";
        this.width = newSize.width;
        this.height = newSize.height;
        this._aspectRatio = this.aspectRatio;
        if (!(0, _helpersSegmentJs.ae)(this, newRatio, true)) return;
        this.notifyPlugins("resize", {
            size: newSize
        });
        (0, _helpersSegmentJs.Q)(options.onResize, [
            this,
            newSize
        ], this);
        if (this.attached) {
            if (this._doResize(mode)) this.render();
        }
    }
    ensureScalesHaveIDs() {
        const options = this.options;
        const scalesOptions = options.scales || {};
        (0, _helpersSegmentJs.F)(scalesOptions, (axisOptions, axisID)=>{
            axisOptions.id = axisID;
        });
    }
    buildOrUpdateScales() {
        const options = this.options;
        const scaleOpts = options.scales;
        const scales = this.scales;
        const updated = Object.keys(scales).reduce((obj, id)=>{
            obj[id] = false;
            return obj;
        }, {});
        let items = [];
        if (scaleOpts) items = items.concat(Object.keys(scaleOpts).map((id)=>{
            const scaleOptions = scaleOpts[id];
            const axis = determineAxis(id, scaleOptions);
            const isRadial = axis === "r";
            const isHorizontal = axis === "x";
            return {
                options: scaleOptions,
                dposition: isRadial ? "chartArea" : isHorizontal ? "bottom" : "left",
                dtype: isRadial ? "radialLinear" : isHorizontal ? "category" : "linear"
            };
        }));
        (0, _helpersSegmentJs.F)(items, (item)=>{
            const scaleOptions = item.options;
            const id = scaleOptions.id;
            const axis = determineAxis(id, scaleOptions);
            const scaleType = (0, _helpersSegmentJs.v)(scaleOptions.type, item.dtype);
            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) scaleOptions.position = item.dposition;
            updated[id] = true;
            let scale = null;
            if (id in scales && scales[id].type === scaleType) scale = scales[id];
            else {
                const scaleClass = registry.getScale(scaleType);
                scale = new scaleClass({
                    id,
                    type: scaleType,
                    ctx: this.ctx,
                    chart: this
                });
                scales[scale.id] = scale;
            }
            scale.init(scaleOptions, options);
        });
        (0, _helpersSegmentJs.F)(updated, (hasUpdated, id)=>{
            if (!hasUpdated) delete scales[id];
        });
        (0, _helpersSegmentJs.F)(scales, (scale)=>{
            layouts.configure(this, scale, scale.options);
            layouts.addBox(this, scale);
        });
    }
    _updateMetasets() {
        const metasets = this._metasets;
        const numData = this.data.datasets.length;
        const numMeta = metasets.length;
        metasets.sort((a, b)=>a.index - b.index);
        if (numMeta > numData) {
            for(let i = numData; i < numMeta; ++i)this._destroyDatasetMeta(i);
            metasets.splice(numData, numMeta - numData);
        }
        this._sortedMetasets = metasets.slice(0).sort(compare2Level("order", "index"));
    }
    _removeUnreferencedMetasets() {
        const { _metasets: metasets, data: { datasets } } = this;
        if (metasets.length > datasets.length) delete this._stacks;
        metasets.forEach((meta, index)=>{
            if (datasets.filter((x)=>x === meta._dataset).length === 0) this._destroyDatasetMeta(index);
        });
    }
    buildOrUpdateControllers() {
        const newControllers = [];
        const datasets = this.data.datasets;
        let i, ilen;
        this._removeUnreferencedMetasets();
        for(i = 0, ilen = datasets.length; i < ilen; i++){
            const dataset = datasets[i];
            let meta = this.getDatasetMeta(i);
            const type = dataset.type || this.config.type;
            if (meta.type && meta.type !== type) {
                this._destroyDatasetMeta(i);
                meta = this.getDatasetMeta(i);
            }
            meta.type = type;
            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
            meta.order = dataset.order || 0;
            meta.index = i;
            meta.label = "" + dataset.label;
            meta.visible = this.isDatasetVisible(i);
            if (meta.controller) {
                meta.controller.updateIndex(i);
                meta.controller.linkScales();
            } else {
                const ControllerClass = registry.getController(type);
                const { datasetElementType, dataElementType } = (0, _helpersSegmentJs.d).datasets[type];
                Object.assign(ControllerClass, {
                    dataElementType: registry.getElement(dataElementType),
                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)
                });
                meta.controller = new ControllerClass(this, i);
                newControllers.push(meta.controller);
            }
        }
        this._updateMetasets();
        return newControllers;
    }
    _resetElements() {
        (0, _helpersSegmentJs.F)(this.data.datasets, (dataset, datasetIndex)=>{
            this.getDatasetMeta(datasetIndex).controller.reset();
        }, this);
    }
    reset() {
        this._resetElements();
        this.notifyPlugins("reset");
    }
    update(mode) {
        const config = this.config;
        config.update();
        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
        const animsDisabled = this._animationsDisabled = !options.animation;
        this._updateScales();
        this._checkEventBindings();
        this._updateHiddenIndices();
        this._plugins.invalidate();
        if (this.notifyPlugins("beforeUpdate", {
            mode,
            cancelable: true
        }) === false) return;
        const newControllers = this.buildOrUpdateControllers();
        this.notifyPlugins("beforeElementsUpdate");
        let minPadding = 0;
        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){
            const { controller } = this.getDatasetMeta(i);
            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
            controller.buildOrUpdateElements(reset);
            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
        }
        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
        this._updateLayout(minPadding);
        if (!animsDisabled) (0, _helpersSegmentJs.F)(newControllers, (controller)=>{
            controller.reset();
        });
        this._updateDatasets(mode);
        this.notifyPlugins("afterUpdate", {
            mode
        });
        this._layers.sort(compare2Level("z", "_idx"));
        const { _active, _lastEvent } = this;
        if (_lastEvent) this._eventHandler(_lastEvent, true);
        else if (_active.length) this._updateHoverStyles(_active, _active, true);
        this.render();
    }
    _updateScales() {
        (0, _helpersSegmentJs.F)(this.scales, (scale)=>{
            layouts.removeBox(this, scale);
        });
        this.ensureScalesHaveIDs();
        this.buildOrUpdateScales();
    }
    _checkEventBindings() {
        const options = this.options;
        const existingEvents = new Set(Object.keys(this._listeners));
        const newEvents = new Set(options.events);
        if (!(0, _helpersSegmentJs.ag)(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
            this.unbindEvents();
            this.bindEvents();
        }
    }
    _updateHiddenIndices() {
        const { _hiddenIndices } = this;
        const changes = this._getUniformDataChanges() || [];
        for (const { method, start, count } of changes){
            const move = method === "_removeElements" ? -count : count;
            moveNumericKeys(_hiddenIndices, start, move);
        }
    }
    _getUniformDataChanges() {
        const _dataChanges = this._dataChanges;
        if (!_dataChanges || !_dataChanges.length) return;
        this._dataChanges = [];
        const datasetCount = this.data.datasets.length;
        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + "," + c.splice(1).join(",")));
        const changeSet = makeSet(0);
        for(let i = 1; i < datasetCount; i++){
            if (!(0, _helpersSegmentJs.ag)(changeSet, makeSet(i))) return;
        }
        return Array.from(changeSet).map((c)=>c.split(",")).map((a)=>({
                method: a[1],
                start: +a[2],
                count: +a[3]
            }));
    }
    _updateLayout(minPadding) {
        if (this.notifyPlugins("beforeLayout", {
            cancelable: true
        }) === false) return;
        layouts.update(this, this.width, this.height, minPadding);
        const area = this.chartArea;
        const noArea = area.width <= 0 || area.height <= 0;
        this._layers = [];
        (0, _helpersSegmentJs.F)(this.boxes, (box)=>{
            if (noArea && box.position === "chartArea") return;
            if (box.configure) box.configure();
            this._layers.push(...box._layers());
        }, this);
        this._layers.forEach((item, index)=>{
            item._idx = index;
        });
        this.notifyPlugins("afterLayout");
    }
    _updateDatasets(mode) {
        if (this.notifyPlugins("beforeDatasetsUpdate", {
            mode,
            cancelable: true
        }) === false) return;
        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this.getDatasetMeta(i).controller.configure();
        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this._updateDataset(i, (0, _helpersSegmentJs.a7)(mode) ? mode({
            datasetIndex: i
        }) : mode);
        this.notifyPlugins("afterDatasetsUpdate", {
            mode
        });
    }
    _updateDataset(index, mode) {
        const meta = this.getDatasetMeta(index);
        const args = {
            meta,
            index,
            mode,
            cancelable: true
        };
        if (this.notifyPlugins("beforeDatasetUpdate", args) === false) return;
        meta.controller._update(mode);
        args.cancelable = false;
        this.notifyPlugins("afterDatasetUpdate", args);
    }
    render() {
        if (this.notifyPlugins("beforeRender", {
            cancelable: true
        }) === false) return;
        if (animator.has(this)) {
            if (this.attached && !animator.running(this)) animator.start(this);
        } else {
            this.draw();
            onAnimationsComplete({
                chart: this
            });
        }
    }
    draw() {
        let i;
        if (this._resizeBeforeDraw) {
            const { width, height } = this._resizeBeforeDraw;
            this._resizeBeforeDraw = null;
            this._resize(width, height);
        }
        this.clear();
        if (this.width <= 0 || this.height <= 0) return;
        if (this.notifyPlugins("beforeDraw", {
            cancelable: true
        }) === false) return;
        const layers = this._layers;
        for(i = 0; i < layers.length && layers[i].z <= 0; ++i)layers[i].draw(this.chartArea);
        this._drawDatasets();
        for(; i < layers.length; ++i)layers[i].draw(this.chartArea);
        this.notifyPlugins("afterDraw");
    }
    _getSortedDatasetMetas(filterVisible) {
        const metasets = this._sortedMetasets;
        const result = [];
        let i, ilen;
        for(i = 0, ilen = metasets.length; i < ilen; ++i){
            const meta = metasets[i];
            if (!filterVisible || meta.visible) result.push(meta);
        }
        return result;
    }
    getSortedVisibleDatasetMetas() {
        return this._getSortedDatasetMetas(true);
    }
    _drawDatasets() {
        if (this.notifyPlugins("beforeDatasetsDraw", {
            cancelable: true
        }) === false) return;
        const metasets = this.getSortedVisibleDatasetMetas();
        for(let i = metasets.length - 1; i >= 0; --i)this._drawDataset(metasets[i]);
        this.notifyPlugins("afterDatasetsDraw");
    }
    _drawDataset(meta) {
        const ctx = this.ctx;
        const clip = meta._clip;
        const useClip = !clip.disabled;
        const area = getDatasetArea(meta, this.chartArea);
        const args = {
            meta,
            index: meta.index,
            cancelable: true
        };
        if (this.notifyPlugins("beforeDatasetDraw", args) === false) return;
        if (useClip) (0, _helpersSegmentJs.Y)(ctx, {
            left: clip.left === false ? 0 : area.left - clip.left,
            right: clip.right === false ? this.width : area.right + clip.right,
            top: clip.top === false ? 0 : area.top - clip.top,
            bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom
        });
        meta.controller.draw();
        if (useClip) (0, _helpersSegmentJs.$)(ctx);
        args.cancelable = false;
        this.notifyPlugins("afterDatasetDraw", args);
    }
    isPointInArea(point) {
        return (0, _helpersSegmentJs.C)(point, this.chartArea, this._minPadding);
    }
    getElementsAtEventForMode(e, mode, options, useFinalPosition) {
        const method = Interaction.modes[mode];
        if (typeof method === "function") return method(this, e, options, useFinalPosition);
        return [];
    }
    getDatasetMeta(datasetIndex) {
        const dataset = this.data.datasets[datasetIndex];
        const metasets = this._metasets;
        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();
        if (!meta) {
            meta = {
                type: null,
                data: [],
                dataset: null,
                controller: null,
                hidden: null,
                xAxisID: null,
                yAxisID: null,
                order: dataset && dataset.order || 0,
                index: datasetIndex,
                _dataset: dataset,
                _parsed: [],
                _sorted: false
            };
            metasets.push(meta);
        }
        return meta;
    }
    getContext() {
        return this.$context || (this.$context = (0, _helpersSegmentJs.j)(null, {
            chart: this,
            type: "chart"
        }));
    }
    getVisibleDatasetCount() {
        return this.getSortedVisibleDatasetMetas().length;
    }
    isDatasetVisible(datasetIndex) {
        const dataset = this.data.datasets[datasetIndex];
        if (!dataset) return false;
        const meta = this.getDatasetMeta(datasetIndex);
        return typeof meta.hidden === "boolean" ? !meta.hidden : !dataset.hidden;
    }
    setDatasetVisibility(datasetIndex, visible) {
        const meta = this.getDatasetMeta(datasetIndex);
        meta.hidden = !visible;
    }
    toggleDataVisibility(index) {
        this._hiddenIndices[index] = !this._hiddenIndices[index];
    }
    getDataVisibility(index) {
        return !this._hiddenIndices[index];
    }
    _updateVisibility(datasetIndex, dataIndex, visible) {
        const mode = visible ? "show" : "hide";
        const meta = this.getDatasetMeta(datasetIndex);
        const anims = meta.controller._resolveAnimations(undefined, mode);
        if ((0, _helpersSegmentJs.h)(dataIndex)) {
            meta.data[dataIndex].hidden = !visible;
            this.update();
        } else {
            this.setDatasetVisibility(datasetIndex, visible);
            anims.update(meta, {
                visible
            });
            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);
        }
    }
    hide(datasetIndex, dataIndex) {
        this._updateVisibility(datasetIndex, dataIndex, false);
    }
    show(datasetIndex, dataIndex) {
        this._updateVisibility(datasetIndex, dataIndex, true);
    }
    _destroyDatasetMeta(datasetIndex) {
        const meta = this._metasets[datasetIndex];
        if (meta && meta.controller) meta.controller._destroy();
        delete this._metasets[datasetIndex];
    }
    _stop() {
        let i, ilen;
        this.stop();
        animator.remove(this);
        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this._destroyDatasetMeta(i);
    }
    destroy() {
        this.notifyPlugins("beforeDestroy");
        const { canvas, ctx } = this;
        this._stop();
        this.config.clearCache();
        if (canvas) {
            this.unbindEvents();
            (0, _helpersSegmentJs.af)(canvas, ctx);
            this.platform.releaseContext(ctx);
            this.canvas = null;
            this.ctx = null;
        }
        delete instances[this.id];
        this.notifyPlugins("afterDestroy");
    }
    toBase64Image(...args) {
        return this.canvas.toDataURL(...args);
    }
    bindEvents() {
        this.bindUserEvents();
        if (this.options.responsive) this.bindResponsiveEvents();
        else this.attached = true;
    }
    bindUserEvents() {
        const listeners = this._listeners;
        const platform = this.platform;
        const _add = (type, listener)=>{
            platform.addEventListener(this, type, listener);
            listeners[type] = listener;
        };
        const listener = (e, x, y)=>{
            e.offsetX = x;
            e.offsetY = y;
            this._eventHandler(e);
        };
        (0, _helpersSegmentJs.F)(this.options.events, (type)=>_add(type, listener));
    }
    bindResponsiveEvents() {
        if (!this._responsiveListeners) this._responsiveListeners = {};
        const listeners = this._responsiveListeners;
        const platform = this.platform;
        const _add = (type, listener)=>{
            platform.addEventListener(this, type, listener);
            listeners[type] = listener;
        };
        const _remove = (type, listener)=>{
            if (listeners[type]) {
                platform.removeEventListener(this, type, listener);
                delete listeners[type];
            }
        };
        const listener = (width, height)=>{
            if (this.canvas) this.resize(width, height);
        };
        let detached;
        const attached = ()=>{
            _remove("attach", attached);
            this.attached = true;
            this.resize();
            _add("resize", listener);
            _add("detach", detached);
        };
        detached = ()=>{
            this.attached = false;
            _remove("resize", listener);
            this._stop();
            this._resize(0, 0);
            _add("attach", attached);
        };
        if (platform.isAttached(this.canvas)) attached();
        else detached();
    }
    unbindEvents() {
        (0, _helpersSegmentJs.F)(this._listeners, (listener, type)=>{
            this.platform.removeEventListener(this, type, listener);
        });
        this._listeners = {};
        (0, _helpersSegmentJs.F)(this._responsiveListeners, (listener, type)=>{
            this.platform.removeEventListener(this, type, listener);
        });
        this._responsiveListeners = undefined;
    }
    updateHoverStyle(items, mode, enabled) {
        const prefix = enabled ? "set" : "remove";
        let meta, item, i, ilen;
        if (mode === "dataset") {
            meta = this.getDatasetMeta(items[0].datasetIndex);
            meta.controller["_" + prefix + "DatasetHoverStyle"]();
        }
        for(i = 0, ilen = items.length; i < ilen; ++i){
            item = items[i];
            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
            if (controller) controller[prefix + "HoverStyle"](item.element, item.datasetIndex, item.index);
        }
    }
    getActiveElements() {
        return this._active || [];
    }
    setActiveElements(activeElements) {
        const lastActive = this._active || [];
        const active = activeElements.map(({ datasetIndex, index })=>{
            const meta = this.getDatasetMeta(datasetIndex);
            if (!meta) throw new Error("No dataset found at index " + datasetIndex);
            return {
                datasetIndex,
                element: meta.data[index],
                index
            };
        });
        const changed = !(0, _helpersSegmentJs.ah)(active, lastActive);
        if (changed) {
            this._active = active;
            this._lastEvent = null;
            this._updateHoverStyles(active, lastActive);
        }
    }
    notifyPlugins(hook, args, filter) {
        return this._plugins.notify(this, hook, args, filter);
    }
    isPluginEnabled(pluginId) {
        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;
    }
    _updateHoverStyles(active, lastActive, replay) {
        const hoverOptions = this.options.hover;
        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));
        const deactivated = diff(lastActive, active);
        const activated = replay ? active : diff(active, lastActive);
        if (deactivated.length) this.updateHoverStyle(deactivated, hoverOptions.mode, false);
        if (activated.length && hoverOptions.mode) this.updateHoverStyle(activated, hoverOptions.mode, true);
    }
    _eventHandler(e, replay) {
        const args = {
            event: e,
            replay,
            cancelable: true,
            inChartArea: this.isPointInArea(e)
        };
        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);
        if (this.notifyPlugins("beforeEvent", args, eventFilter) === false) return;
        const changed = this._handleEvent(e, replay, args.inChartArea);
        args.cancelable = false;
        this.notifyPlugins("afterEvent", args, eventFilter);
        if (changed || args.changed) this.render();
        return this;
    }
    _handleEvent(e, replay, inChartArea) {
        const { _active: lastActive = [], options } = this;
        const useFinalPosition = replay;
        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);
        const isClick = (0, _helpersSegmentJs.ai)(e);
        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);
        if (inChartArea) {
            this._lastEvent = null;
            (0, _helpersSegmentJs.Q)(options.onHover, [
                e,
                active,
                this
            ], this);
            if (isClick) (0, _helpersSegmentJs.Q)(options.onClick, [
                e,
                active,
                this
            ], this);
        }
        const changed = !(0, _helpersSegmentJs.ah)(active, lastActive);
        if (changed || replay) {
            this._active = active;
            this._updateHoverStyles(active, lastActive, replay);
        }
        this._lastEvent = lastEvent;
        return changed;
    }
    _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {
        if (e.type === "mouseout") return [];
        if (!inChartArea) return lastActive;
        const hoverOptions = this.options.hover;
        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
    }
}
function invalidatePlugins() {
    return (0, _helpersSegmentJs.F)(Chart.instances, (chart)=>chart._plugins.invalidate());
}
function clipArc(ctx, element, endAngle) {
    const { startAngle, pixelMargin, x, y, outerRadius, innerRadius } = element;
    let angleMargin = pixelMargin / outerRadius;
    // Draw an inner border by clipping the arc and drawing a double-width border
    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders
    ctx.beginPath();
    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
    if (innerRadius > pixelMargin) {
        angleMargin = pixelMargin / innerRadius;
        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
    } else ctx.arc(x, y, pixelMargin, endAngle + (0, _helpersSegmentJs.H), startAngle - (0, _helpersSegmentJs.H));
    ctx.closePath();
    ctx.clip();
}
function toRadiusCorners(value) {
    return (0, _helpersSegmentJs.ak)(value, [
        "outerStart",
        "outerEnd",
        "innerStart",
        "innerEnd"
    ]);
}
/**
 * Parse border radius from the provided options
 */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
    const o = toRadiusCorners(arc.options.borderRadius);
    const halfThickness = (outerRadius - innerRadius) / 2;
    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
    // Outer limits are complicated. We want to compute the available angular distance at
    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.
    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.
    //
    // If the borderRadius is large, that value can become negative.
    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius
    // we know that the thickness term will dominate and compute the limits at that point
    const computeOuterLimit = (val)=>{
        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
        return (0, _helpersSegmentJs.S)(val, 0, Math.min(halfThickness, outerArcLimit));
    };
    return {
        outerStart: computeOuterLimit(o.outerStart),
        outerEnd: computeOuterLimit(o.outerEnd),
        innerStart: (0, _helpersSegmentJs.S)(o.innerStart, 0, innerLimit),
        innerEnd: (0, _helpersSegmentJs.S)(o.innerEnd, 0, innerLimit)
    };
}
/**
 * Convert (r, 𝜃) to (x, y)
 */ function rThetaToXY(r, theta, x, y) {
    return {
        x: x + r * Math.cos(theta),
        y: y + r * Math.sin(theta)
    };
}
/**
 * Path the arc, respecting border radius by separating into left and right halves.
 *
 *   Start      End
 *
 *    1--->a--->2    Outer
 *   /           \
 *   8           3
 *   |           |
 *   |           |
 *   7           4
 *   \           /
 *    6<---b<---5    Inner
 */ function pathArc(ctx, element, offset, spacing, end, circular) {
    const { x, y, startAngle: start, pixelMargin, innerRadius: innerR } = element;
    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);
    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
    let spacingOffset = 0;
    const alpha = end - start;
    if (spacing) {
        // When spacing is present, it is the same for all items
        // So we adjust the start and end angle of the arc such that
        // the distance is the same as it would be without the spacing
        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;
        spacingOffset = (alpha - adjustedAngle) / 2;
    }
    const beta = Math.max(0.001, alpha * outerRadius - offset / (0, _helpersSegmentJs.P)) / outerRadius;
    const angleOffset = (alpha - beta) / 2;
    const startAngle = start + angleOffset + spacingOffset;
    const endAngle = end - angleOffset - spacingOffset;
    const { outerStart, outerEnd, innerStart, innerEnd } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);
    const outerStartAdjustedRadius = outerRadius - outerStart;
    const outerEndAdjustedRadius = outerRadius - outerEnd;
    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
    const innerStartAdjustedRadius = innerRadius + innerStart;
    const innerEndAdjustedRadius = innerRadius + innerEnd;
    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
    ctx.beginPath();
    if (circular) {
        // The first arc segments from point 1 to point a to point 2
        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;
        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);
        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);
        // The corner segment from point 2 to point 3
        if (outerEnd > 0) {
            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + (0, _helpersSegmentJs.H));
        }
        // The line from point 3 to point 4
        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);
        ctx.lineTo(p4.x, p4.y);
        // The corner segment from point 4 to point 5
        if (innerEnd > 0) {
            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + (0, _helpersSegmentJs.H), innerEndAdjustedAngle + Math.PI);
        }
        // The inner arc from point 5 to point b to point 6
        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;
        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);
        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);
        // The corner segment from point 6 to point 7
        if (innerStart > 0) {
            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - (0, _helpersSegmentJs.H));
        }
        // The line from point 7 to point 8
        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);
        ctx.lineTo(p8.x, p8.y);
        // The corner segment from point 8 to point 1
        if (outerStart > 0) {
            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - (0, _helpersSegmentJs.H), outerStartAdjustedAngle);
        }
    } else {
        ctx.moveTo(x, y);
        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;
        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;
        ctx.lineTo(outerStartX, outerStartY);
        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;
        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;
        ctx.lineTo(outerEndX, outerEndY);
    }
    ctx.closePath();
}
function drawArc(ctx, element, offset, spacing, circular) {
    const { fullCircles, startAngle, circumference } = element;
    let endAngle = element.endAngle;
    if (fullCircles) {
        pathArc(ctx, element, offset, spacing, endAngle, circular);
        for(let i = 0; i < fullCircles; ++i)ctx.fill();
        if (!isNaN(circumference)) endAngle = startAngle + (circumference % (0, _helpersSegmentJs.T) || (0, _helpersSegmentJs.T));
    }
    pathArc(ctx, element, offset, spacing, endAngle, circular);
    ctx.fill();
    return endAngle;
}
function drawBorder(ctx, element, offset, spacing, circular) {
    const { fullCircles, startAngle, circumference, options } = element;
    const { borderWidth, borderJoinStyle, borderDash, borderDashOffset } = options;
    const inner = options.borderAlign === "inner";
    if (!borderWidth) return;
    ctx.setLineDash(borderDash || []);
    ctx.lineDashOffset = borderDashOffset;
    if (inner) {
        ctx.lineWidth = borderWidth * 2;
        ctx.lineJoin = borderJoinStyle || "round";
    } else {
        ctx.lineWidth = borderWidth;
        ctx.lineJoin = borderJoinStyle || "bevel";
    }
    let endAngle = element.endAngle;
    if (fullCircles) {
        pathArc(ctx, element, offset, spacing, endAngle, circular);
        for(let i = 0; i < fullCircles; ++i)ctx.stroke();
        if (!isNaN(circumference)) endAngle = startAngle + (circumference % (0, _helpersSegmentJs.T) || (0, _helpersSegmentJs.T));
    }
    if (inner) clipArc(ctx, element, endAngle);
    if (!fullCircles) {
        pathArc(ctx, element, offset, spacing, endAngle, circular);
        ctx.stroke();
    }
}
class ArcElement extends Element {
    static id = "arc";
    static defaults = {
        borderAlign: "center",
        borderColor: "#fff",
        borderDash: [],
        borderDashOffset: 0,
        borderJoinStyle: undefined,
        borderRadius: 0,
        borderWidth: 2,
        offset: 0,
        spacing: 0,
        angle: undefined,
        circular: true
    };
    static defaultRoutes = {
        backgroundColor: "backgroundColor"
    };
    static descriptors = {
        _scriptable: true,
        _indexable: (name)=>name !== "borderDash"
    };
    circumference;
    endAngle;
    fullCircles;
    innerRadius;
    outerRadius;
    pixelMargin;
    startAngle;
    constructor(cfg){
        super();
        this.options = undefined;
        this.circumference = undefined;
        this.startAngle = undefined;
        this.endAngle = undefined;
        this.innerRadius = undefined;
        this.outerRadius = undefined;
        this.pixelMargin = 0;
        this.fullCircles = 0;
        if (cfg) Object.assign(this, cfg);
    }
    inRange(chartX, chartY, useFinalPosition) {
        const point = this.getProps([
            "x",
            "y"
        ], useFinalPosition);
        const { angle, distance } = (0, _helpersSegmentJs.D)(point, {
            x: chartX,
            y: chartY
        });
        const { startAngle, endAngle, innerRadius, outerRadius, circumference } = this.getProps([
            "startAngle",
            "endAngle",
            "innerRadius",
            "outerRadius",
            "circumference"
        ], useFinalPosition);
        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;
        const _circumference = (0, _helpersSegmentJs.v)(circumference, endAngle - startAngle);
        const nonZeroBetween = (0, _helpersSegmentJs.p)(angle, startAngle, endAngle) && startAngle !== endAngle;
        const betweenAngles = _circumference >= (0, _helpersSegmentJs.T) || nonZeroBetween;
        const withinRadius = (0, _helpersSegmentJs.aj)(distance, innerRadius + rAdjust, outerRadius + rAdjust);
        return betweenAngles && withinRadius;
    }
    getCenterPoint(useFinalPosition) {
        const { x, y, startAngle, endAngle, innerRadius, outerRadius } = this.getProps([
            "x",
            "y",
            "startAngle",
            "endAngle",
            "innerRadius",
            "outerRadius"
        ], useFinalPosition);
        const { offset, spacing } = this.options;
        const halfAngle = (startAngle + endAngle) / 2;
        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
        return {
            x: x + Math.cos(halfAngle) * halfRadius,
            y: y + Math.sin(halfAngle) * halfRadius
        };
    }
    tooltipPosition(useFinalPosition) {
        return this.getCenterPoint(useFinalPosition);
    }
    draw(ctx) {
        const { options, circumference } = this;
        const offset = (options.offset || 0) / 4;
        const spacing = (options.spacing || 0) / 2;
        const circular = options.circular;
        this.pixelMargin = options.borderAlign === "inner" ? 0.33 : 0;
        this.fullCircles = circumference > (0, _helpersSegmentJs.T) ? Math.floor(circumference / (0, _helpersSegmentJs.T)) : 0;
        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) return;
        ctx.save();
        const halfAngle = (this.startAngle + this.endAngle) / 2;
        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);
        const fix = 1 - Math.sin(Math.min((0, _helpersSegmentJs.P), circumference || 0));
        const radiusOffset = offset * fix;
        ctx.fillStyle = options.backgroundColor;
        ctx.strokeStyle = options.borderColor;
        drawArc(ctx, this, radiusOffset, spacing, circular);
        drawBorder(ctx, this, radiusOffset, spacing, circular);
        ctx.restore();
    }
}
function setStyle(ctx, options, style = options) {
    ctx.lineCap = (0, _helpersSegmentJs.v)(style.borderCapStyle, options.borderCapStyle);
    ctx.setLineDash((0, _helpersSegmentJs.v)(style.borderDash, options.borderDash));
    ctx.lineDashOffset = (0, _helpersSegmentJs.v)(style.borderDashOffset, options.borderDashOffset);
    ctx.lineJoin = (0, _helpersSegmentJs.v)(style.borderJoinStyle, options.borderJoinStyle);
    ctx.lineWidth = (0, _helpersSegmentJs.v)(style.borderWidth, options.borderWidth);
    ctx.strokeStyle = (0, _helpersSegmentJs.v)(style.borderColor, options.borderColor);
}
function lineTo(ctx, previous, target) {
    ctx.lineTo(target.x, target.y);
}
function getLineMethod(options) {
    if (options.stepped) return 0, _helpersSegmentJs.ar;
    if (options.tension || options.cubicInterpolationMode === "monotone") return 0, _helpersSegmentJs.as;
    return lineTo;
}
function pathVars(points, segment, params = {}) {
    const count = points.length;
    const { start: paramsStart = 0, end: paramsEnd = count - 1 } = params;
    const { start: segmentStart, end: segmentEnd } = segment;
    const start = Math.max(paramsStart, segmentStart);
    const end = Math.min(paramsEnd, segmentEnd);
    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
    return {
        count,
        start,
        loop: segment.loop,
        ilen: end < start && !outside ? count + end - start : end - start
    };
}
function pathSegment(ctx, line, segment, params) {
    const { points, options } = line;
    const { count, start, loop, ilen } = pathVars(points, segment, params);
    const lineMethod = getLineMethod(options);
    let { move = true, reverse } = params || {};
    let i, point, prev;
    for(i = 0; i <= ilen; ++i){
        point = points[(start + (reverse ? ilen - i : i)) % count];
        if (point.skip) continue;
        else if (move) {
            ctx.moveTo(point.x, point.y);
            move = false;
        } else lineMethod(ctx, prev, point, reverse, options.stepped);
        prev = point;
    }
    if (loop) {
        point = points[(start + (reverse ? ilen : 0)) % count];
        lineMethod(ctx, prev, point, reverse, options.stepped);
    }
    return !!loop;
}
function fastPathSegment(ctx, line, segment, params) {
    const points = line.points;
    const { count, start, ilen } = pathVars(points, segment, params);
    const { move = true, reverse } = params || {};
    let avgX = 0;
    let countX = 0;
    let i, point, prevX, minY, maxY, lastY;
    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;
    const drawX = ()=>{
        if (minY !== maxY) {
            ctx.lineTo(avgX, maxY);
            ctx.lineTo(avgX, minY);
            ctx.lineTo(avgX, lastY);
        }
    };
    if (move) {
        point = points[pointIndex(0)];
        ctx.moveTo(point.x, point.y);
    }
    for(i = 0; i <= ilen; ++i){
        point = points[pointIndex(i)];
        if (point.skip) continue;
        const x = point.x;
        const y = point.y;
        const truncX = x | 0;
        if (truncX === prevX) {
            if (y < minY) minY = y;
            else if (y > maxY) maxY = y;
            avgX = (countX * avgX + x) / ++countX;
        } else {
            drawX();
            ctx.lineTo(x, y);
            prevX = truncX;
            countX = 0;
            minY = maxY = y;
        }
        lastY = y;
    }
    drawX();
}
function _getSegmentMethod(line) {
    const opts = line.options;
    const borderDash = opts.borderDash && opts.borderDash.length;
    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== "monotone" && !opts.stepped && !borderDash;
    return useFastPath ? fastPathSegment : pathSegment;
}
function _getInterpolationMethod(options) {
    if (options.stepped) return 0, _helpersSegmentJs.ao;
    if (options.tension || options.cubicInterpolationMode === "monotone") return 0, _helpersSegmentJs.ap;
    return 0, _helpersSegmentJs.aq;
}
function strokePathWithCache(ctx, line, start, count) {
    let path = line._path;
    if (!path) {
        path = line._path = new Path2D();
        if (line.path(path, start, count)) path.closePath();
    }
    setStyle(ctx, line.options);
    ctx.stroke(path);
}
function strokePathDirect(ctx, line, start, count) {
    const { segments, options } = line;
    const segmentMethod = _getSegmentMethod(line);
    for (const segment of segments){
        setStyle(ctx, options, segment.style);
        ctx.beginPath();
        if (segmentMethod(ctx, line, segment, {
            start,
            end: start + count - 1
        })) ctx.closePath();
        ctx.stroke();
    }
}
const usePath2D = typeof Path2D === "function";
function draw(ctx, line, start, count) {
    if (usePath2D && !line.options.segment) strokePathWithCache(ctx, line, start, count);
    else strokePathDirect(ctx, line, start, count);
}
class LineElement extends Element {
    static id = "line";
    static defaults = {
        borderCapStyle: "butt",
        borderDash: [],
        borderDashOffset: 0,
        borderJoinStyle: "miter",
        borderWidth: 3,
        capBezierPoints: true,
        cubicInterpolationMode: "default",
        fill: false,
        spanGaps: false,
        stepped: false,
        tension: 0
    };
    static defaultRoutes = {
        backgroundColor: "backgroundColor",
        borderColor: "borderColor"
    };
    static descriptors = {
        _scriptable: true,
        _indexable: (name)=>name !== "borderDash" && name !== "fill"
    };
    constructor(cfg){
        super();
        this.animated = true;
        this.options = undefined;
        this._chart = undefined;
        this._loop = undefined;
        this._fullLoop = undefined;
        this._path = undefined;
        this._points = undefined;
        this._segments = undefined;
        this._decimated = false;
        this._pointsUpdated = false;
        this._datasetIndex = undefined;
        if (cfg) Object.assign(this, cfg);
    }
    updateControlPoints(chartArea, indexAxis) {
        const options = this.options;
        if ((options.tension || options.cubicInterpolationMode === "monotone") && !options.stepped && !this._pointsUpdated) {
            const loop = options.spanGaps ? this._loop : this._fullLoop;
            (0, _helpersSegmentJs.al)(this._points, options, chartArea, loop, indexAxis);
            this._pointsUpdated = true;
        }
    }
    set points(points) {
        this._points = points;
        delete this._segments;
        delete this._path;
        this._pointsUpdated = false;
    }
    get points() {
        return this._points;
    }
    get segments() {
        return this._segments || (this._segments = (0, _helpersSegmentJs.am)(this, this.options.segment));
    }
    first() {
        const segments = this.segments;
        const points = this.points;
        return segments.length && points[segments[0].start];
    }
    last() {
        const segments = this.segments;
        const points = this.points;
        const count = segments.length;
        return count && points[segments[count - 1].end];
    }
    interpolate(point, property) {
        const options = this.options;
        const value = point[property];
        const points = this.points;
        const segments = (0, _helpersSegmentJs.an)(this, {
            property,
            start: value,
            end: value
        });
        if (!segments.length) return;
        const result = [];
        const _interpolate = _getInterpolationMethod(options);
        let i, ilen;
        for(i = 0, ilen = segments.length; i < ilen; ++i){
            const { start, end } = segments[i];
            const p1 = points[start];
            const p2 = points[end];
            if (p1 === p2) {
                result.push(p1);
                continue;
            }
            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
            const interpolated = _interpolate(p1, p2, t, options.stepped);
            interpolated[property] = point[property];
            result.push(interpolated);
        }
        return result.length === 1 ? result[0] : result;
    }
    pathSegment(ctx, segment, params) {
        const segmentMethod = _getSegmentMethod(this);
        return segmentMethod(ctx, this, segment, params);
    }
    path(ctx, start, count) {
        const segments = this.segments;
        const segmentMethod = _getSegmentMethod(this);
        let loop = this._loop;
        start = start || 0;
        count = count || this.points.length - start;
        for (const segment of segments)loop &= segmentMethod(ctx, this, segment, {
            start,
            end: start + count - 1
        });
        return !!loop;
    }
    draw(ctx, chartArea, start, count) {
        const options = this.options || {};
        const points = this.points || [];
        if (points.length && options.borderWidth) {
            ctx.save();
            draw(ctx, this, start, count);
            ctx.restore();
        }
        if (this.animated) {
            this._pointsUpdated = false;
            this._path = undefined;
        }
    }
}
function inRange$1(el, pos, axis, useFinalPosition) {
    const options = el.options;
    const { [axis]: value } = el.getProps([
        axis
    ], useFinalPosition);
    return Math.abs(pos - value) < options.radius + options.hitRadius;
}
class PointElement extends Element {
    static id = "point";
    parsed;
    skip;
    stop;
    /**
   * @type {any}
   */ static defaults = {
        borderWidth: 1,
        hitRadius: 1,
        hoverBorderWidth: 1,
        hoverRadius: 4,
        pointStyle: "circle",
        radius: 3,
        rotation: 0
    };
    /**
   * @type {any}
   */ static defaultRoutes = {
        backgroundColor: "backgroundColor",
        borderColor: "borderColor"
    };
    constructor(cfg){
        super();
        this.options = undefined;
        this.parsed = undefined;
        this.skip = undefined;
        this.stop = undefined;
        if (cfg) Object.assign(this, cfg);
    }
    inRange(mouseX, mouseY, useFinalPosition) {
        const options = this.options;
        const { x, y } = this.getProps([
            "x",
            "y"
        ], useFinalPosition);
        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);
    }
    inXRange(mouseX, useFinalPosition) {
        return inRange$1(this, mouseX, "x", useFinalPosition);
    }
    inYRange(mouseY, useFinalPosition) {
        return inRange$1(this, mouseY, "y", useFinalPosition);
    }
    getCenterPoint(useFinalPosition) {
        const { x, y } = this.getProps([
            "x",
            "y"
        ], useFinalPosition);
        return {
            x,
            y
        };
    }
    size(options) {
        options = options || this.options || {};
        let radius = options.radius || 0;
        radius = Math.max(radius, radius && options.hoverRadius || 0);
        const borderWidth = radius && options.borderWidth || 0;
        return (radius + borderWidth) * 2;
    }
    draw(ctx, area) {
        const options = this.options;
        if (this.skip || options.radius < 0.1 || !(0, _helpersSegmentJs.C)(this, area, this.size(options) / 2)) return;
        ctx.strokeStyle = options.borderColor;
        ctx.lineWidth = options.borderWidth;
        ctx.fillStyle = options.backgroundColor;
        (0, _helpersSegmentJs.at)(ctx, options, this.x, this.y);
    }
    getRange() {
        const options = this.options || {};
        // @ts-expect-error Fallbacks should never be hit in practice
        return options.radius + options.hitRadius;
    }
}
function getBarBounds(bar, useFinalPosition) {
    const { x, y, base, width, height } = bar.getProps([
        "x",
        "y",
        "base",
        "width",
        "height"
    ], useFinalPosition);
    let left, right, top, bottom, half;
    if (bar.horizontal) {
        half = height / 2;
        left = Math.min(x, base);
        right = Math.max(x, base);
        top = y - half;
        bottom = y + half;
    } else {
        half = width / 2;
        left = x - half;
        right = x + half;
        top = Math.min(y, base);
        bottom = Math.max(y, base);
    }
    return {
        left,
        top,
        right,
        bottom
    };
}
function skipOrLimit(skip, value, min, max) {
    return skip ? 0 : (0, _helpersSegmentJs.S)(value, min, max);
}
function parseBorderWidth(bar, maxW, maxH) {
    const value = bar.options.borderWidth;
    const skip = bar.borderSkipped;
    const o = (0, _helpersSegmentJs.av)(value);
    return {
        t: skipOrLimit(skip.top, o.top, 0, maxH),
        r: skipOrLimit(skip.right, o.right, 0, maxW),
        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),
        l: skipOrLimit(skip.left, o.left, 0, maxW)
    };
}
function parseBorderRadius(bar, maxW, maxH) {
    const { enableBorderRadius } = bar.getProps([
        "enableBorderRadius"
    ]);
    const value = bar.options.borderRadius;
    const o = (0, _helpersSegmentJs.aw)(value);
    const maxR = Math.min(maxW, maxH);
    const skip = bar.borderSkipped;
    const enableBorder = enableBorderRadius || (0, _helpersSegmentJs.i)(value);
    return {
        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),
        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),
        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),
        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)
    };
}
function boundingRects(bar) {
    const bounds = getBarBounds(bar);
    const width = bounds.right - bounds.left;
    const height = bounds.bottom - bounds.top;
    const border = parseBorderWidth(bar, width / 2, height / 2);
    const radius = parseBorderRadius(bar, width / 2, height / 2);
    return {
        outer: {
            x: bounds.left,
            y: bounds.top,
            w: width,
            h: height,
            radius
        },
        inner: {
            x: bounds.left + border.l,
            y: bounds.top + border.t,
            w: width - border.l - border.r,
            h: height - border.t - border.b,
            radius: {
                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))
            }
        }
    };
}
function inRange(bar, x, y, useFinalPosition) {
    const skipX = x === null;
    const skipY = y === null;
    const skipBoth = skipX && skipY;
    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
    return bounds && (skipX || (0, _helpersSegmentJs.aj)(x, bounds.left, bounds.right)) && (skipY || (0, _helpersSegmentJs.aj)(y, bounds.top, bounds.bottom));
}
function hasRadius(radius) {
    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
}
function addNormalRectPath(ctx, rect) {
    ctx.rect(rect.x, rect.y, rect.w, rect.h);
}
function inflateRect(rect, amount, refRect = {}) {
    const x = rect.x !== refRect.x ? -amount : 0;
    const y = rect.y !== refRect.y ? -amount : 0;
    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;
    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;
    return {
        x: rect.x + x,
        y: rect.y + y,
        w: rect.w + w,
        h: rect.h + h,
        radius: rect.radius
    };
}
class BarElement extends Element {
    static id = "bar";
    static defaults = {
        borderSkipped: "start",
        borderWidth: 0,
        borderRadius: 0,
        inflateAmount: "auto",
        pointStyle: undefined
    };
    static defaultRoutes = {
        backgroundColor: "backgroundColor",
        borderColor: "borderColor"
    };
    constructor(cfg){
        super();
        this.options = undefined;
        this.horizontal = undefined;
        this.base = undefined;
        this.width = undefined;
        this.height = undefined;
        this.inflateAmount = undefined;
        if (cfg) Object.assign(this, cfg);
    }
    draw(ctx) {
        const { inflateAmount, options: { borderColor, backgroundColor } } = this;
        const { inner, outer } = boundingRects(this);
        const addRectPath = hasRadius(outer.radius) ? (0, _helpersSegmentJs.au) : addNormalRectPath;
        ctx.save();
        if (outer.w !== inner.w || outer.h !== inner.h) {
            ctx.beginPath();
            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
            ctx.clip();
            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
            ctx.fillStyle = borderColor;
            ctx.fill("evenodd");
        }
        ctx.beginPath();
        addRectPath(ctx, inflateRect(inner, inflateAmount));
        ctx.fillStyle = backgroundColor;
        ctx.fill();
        ctx.restore();
    }
    inRange(mouseX, mouseY, useFinalPosition) {
        return inRange(this, mouseX, mouseY, useFinalPosition);
    }
    inXRange(mouseX, useFinalPosition) {
        return inRange(this, mouseX, null, useFinalPosition);
    }
    inYRange(mouseY, useFinalPosition) {
        return inRange(this, null, mouseY, useFinalPosition);
    }
    getCenterPoint(useFinalPosition) {
        const { x, y, base, horizontal } = this.getProps([
            "x",
            "y",
            "base",
            "horizontal"
        ], useFinalPosition);
        return {
            x: horizontal ? (x + base) / 2 : x,
            y: horizontal ? y : (y + base) / 2
        };
    }
    getRange(axis) {
        return axis === "x" ? this.width / 2 : this.height / 2;
    }
}
var elements = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    ArcElement: ArcElement,
    BarElement: BarElement,
    LineElement: LineElement,
    PointElement: PointElement
});
const BORDER_COLORS = [
    "rgb(54, 162, 235)",
    "rgb(255, 99, 132)",
    "rgb(255, 159, 64)",
    "rgb(255, 205, 86)",
    "rgb(75, 192, 192)",
    "rgb(153, 102, 255)",
    "rgb(201, 203, 207)" // grey
];
// Border colors with 50% transparency
const BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace("rgb(", "rgba(").replace(")", ", 0.5)"));
function getBorderColor(i) {
    return BORDER_COLORS[i % BORDER_COLORS.length];
}
function getBackgroundColor(i) {
    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];
}
function colorizeDefaultDataset(dataset, i) {
    dataset.borderColor = getBorderColor(i);
    dataset.backgroundColor = getBackgroundColor(i);
    return ++i;
}
function colorizeDoughnutDataset(dataset, i) {
    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));
    return i;
}
function colorizePolarAreaDataset(dataset, i) {
    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));
    return i;
}
function getColorizer(chart) {
    let i = 0;
    return (dataset, datasetIndex)=>{
        const controller = chart.getDatasetMeta(datasetIndex).controller;
        if (controller instanceof DoughnutController) i = colorizeDoughnutDataset(dataset, i);
        else if (controller instanceof PolarAreaController) i = colorizePolarAreaDataset(dataset, i);
        else if (controller) i = colorizeDefaultDataset(dataset, i);
    };
}
function containsColorsDefinitions(descriptors) {
    let k;
    for(k in descriptors){
        if (descriptors[k].borderColor || descriptors[k].backgroundColor) return true;
    }
    return false;
}
function containsColorsDefinition(descriptor) {
    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);
}
var plugin_colors = {
    id: "colors",
    defaults: {
        enabled: true,
        forceOverride: false
    },
    beforeLayout (chart, _args, options) {
        if (!options.enabled) return;
        const { data: { datasets }, options: chartOptions } = chart.config;
        const { elements } = chartOptions;
        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) return;
        const colorizer = getColorizer(chart);
        datasets.forEach(colorizer);
    }
};
function lttbDecimation(data, start, count, availableWidth, options) {
    const samples = options.samples || availableWidth;
    if (samples >= count) return data.slice(start, start + count);
    const decimated = [];
    const bucketWidth = (count - 2) / (samples - 2);
    let sampledIndex = 0;
    const endIndex = start + count - 1;
    let a = start;
    let i, maxAreaPoint, maxArea, area, nextA;
    decimated[sampledIndex++] = data[a];
    for(i = 0; i < samples - 2; i++){
        let avgX = 0;
        let avgY = 0;
        let j;
        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;
        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;
        const avgRangeLength = avgRangeEnd - avgRangeStart;
        for(j = avgRangeStart; j < avgRangeEnd; j++){
            avgX += data[j].x;
            avgY += data[j].y;
        }
        avgX /= avgRangeLength;
        avgY /= avgRangeLength;
        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;
        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;
        const { x: pointAx, y: pointAy } = data[a];
        maxArea = area = -1;
        for(j = rangeOffs; j < rangeTo; j++){
            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));
            if (area > maxArea) {
                maxArea = area;
                maxAreaPoint = data[j];
                nextA = j;
            }
        }
        decimated[sampledIndex++] = maxAreaPoint;
        a = nextA;
    }
    decimated[sampledIndex++] = data[endIndex];
    return decimated;
}
function minMaxDecimation(data, start, count, availableWidth) {
    let avgX = 0;
    let countX = 0;
    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;
    const decimated = [];
    const endIndex = start + count - 1;
    const xMin = data[start].x;
    const xMax = data[endIndex].x;
    const dx = xMax - xMin;
    for(i = start; i < start + count; ++i){
        point = data[i];
        x = (point.x - xMin) / dx * availableWidth;
        y = point.y;
        const truncX = x | 0;
        if (truncX === prevX) {
            if (y < minY) {
                minY = y;
                minIndex = i;
            } else if (y > maxY) {
                maxY = y;
                maxIndex = i;
            }
            avgX = (countX * avgX + point.x) / ++countX;
        } else {
            const lastIndex = i - 1;
            if (!(0, _helpersSegmentJs.k)(minIndex) && !(0, _helpersSegmentJs.k)(maxIndex)) {
                const intermediateIndex1 = Math.min(minIndex, maxIndex);
                const intermediateIndex2 = Math.max(minIndex, maxIndex);
                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) decimated.push({
                    ...data[intermediateIndex1],
                    x: avgX
                });
                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) decimated.push({
                    ...data[intermediateIndex2],
                    x: avgX
                });
            }
            if (i > 0 && lastIndex !== startIndex) decimated.push(data[lastIndex]);
            decimated.push(point);
            prevX = truncX;
            countX = 0;
            minY = maxY = y;
            minIndex = maxIndex = startIndex = i;
        }
    }
    return decimated;
}
function cleanDecimatedDataset(dataset) {
    if (dataset._decimated) {
        const data = dataset._data;
        delete dataset._decimated;
        delete dataset._data;
        Object.defineProperty(dataset, "data", {
            configurable: true,
            enumerable: true,
            writable: true,
            value: data
        });
    }
}
function cleanDecimatedData(chart) {
    chart.data.datasets.forEach((dataset)=>{
        cleanDecimatedDataset(dataset);
    });
}
function getStartAndCountOfVisiblePointsSimplified(meta, points) {
    const pointCount = points.length;
    let start = 0;
    let count;
    const { iScale } = meta;
    const { min, max, minDefined, maxDefined } = iScale.getUserBounds();
    if (minDefined) start = (0, _helpersSegmentJs.S)((0, _helpersSegmentJs.B)(points, iScale.axis, min).lo, 0, pointCount - 1);
    if (maxDefined) count = (0, _helpersSegmentJs.S)((0, _helpersSegmentJs.B)(points, iScale.axis, max).hi + 1, start, pointCount) - start;
    else count = pointCount - start;
    return {
        start,
        count
    };
}
var plugin_decimation = {
    id: "decimation",
    defaults: {
        algorithm: "min-max",
        enabled: false
    },
    beforeElementsUpdate: (chart, args, options)=>{
        if (!options.enabled) {
            cleanDecimatedData(chart);
            return;
        }
        const availableWidth = chart.width;
        chart.data.datasets.forEach((dataset, datasetIndex)=>{
            const { _data, indexAxis } = dataset;
            const meta = chart.getDatasetMeta(datasetIndex);
            const data = _data || dataset.data;
            if ((0, _helpersSegmentJs.a)([
                indexAxis,
                chart.options.indexAxis
            ]) === "y") return;
            if (!meta.controller.supportsDecimation) return;
            const xAxis = chart.scales[meta.xAxisID];
            if (xAxis.type !== "linear" && xAxis.type !== "time") return;
            if (chart.options.parsing) return;
            let { start, count } = getStartAndCountOfVisiblePointsSimplified(meta, data);
            const threshold = options.threshold || 4 * availableWidth;
            if (count <= threshold) {
                cleanDecimatedDataset(dataset);
                return;
            }
            if ((0, _helpersSegmentJs.k)(_data)) {
                dataset._data = data;
                delete dataset.data;
                Object.defineProperty(dataset, "data", {
                    configurable: true,
                    enumerable: true,
                    get: function() {
                        return this._decimated;
                    },
                    set: function(d) {
                        this._data = d;
                    }
                });
            }
            let decimated;
            switch(options.algorithm){
                case "lttb":
                    decimated = lttbDecimation(data, start, count, availableWidth, options);
                    break;
                case "min-max":
                    decimated = minMaxDecimation(data, start, count, availableWidth);
                    break;
                default:
                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);
            }
            dataset._decimated = decimated;
        });
    },
    destroy (chart) {
        cleanDecimatedData(chart);
    }
};
function _segments(line, target, property) {
    const segments = line.segments;
    const points = line.points;
    const tpoints = target.points;
    const parts = [];
    for (const segment of segments){
        let { start, end } = segment;
        end = _findSegmentEnd(start, end, points);
        const bounds = _getBounds(property, points[start], points[end], segment.loop);
        if (!target.segments) {
            parts.push({
                source: segment,
                target: bounds,
                start: points[start],
                end: points[end]
            });
            continue;
        }
        const targetSegments = (0, _helpersSegmentJs.an)(target, bounds);
        for (const tgt of targetSegments){
            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
            const fillSources = (0, _helpersSegmentJs.ax)(segment, points, subBounds);
            for (const fillSource of fillSources)parts.push({
                source: fillSource,
                target: tgt,
                start: {
                    [property]: _getEdge(bounds, subBounds, "start", Math.max)
                },
                end: {
                    [property]: _getEdge(bounds, subBounds, "end", Math.min)
                }
            });
        }
    }
    return parts;
}
function _getBounds(property, first, last, loop) {
    if (loop) return;
    let start = first[property];
    let end = last[property];
    if (property === "angle") {
        start = (0, _helpersSegmentJs.ay)(start);
        end = (0, _helpersSegmentJs.ay)(end);
    }
    return {
        property,
        start,
        end
    };
}
function _pointsFromSegments(boundary, line) {
    const { x = null, y = null } = boundary || {};
    const linePoints = line.points;
    const points = [];
    line.segments.forEach(({ start, end })=>{
        end = _findSegmentEnd(start, end, linePoints);
        const first = linePoints[start];
        const last = linePoints[end];
        if (y !== null) {
            points.push({
                x: first.x,
                y
            });
            points.push({
                x: last.x,
                y
            });
        } else if (x !== null) {
            points.push({
                x,
                y: first.y
            });
            points.push({
                x,
                y: last.y
            });
        }
    });
    return points;
}
function _findSegmentEnd(start, end, points) {
    for(; end > start; end--){
        const point = points[end];
        if (!isNaN(point.x) && !isNaN(point.y)) break;
    }
    return end;
}
function _getEdge(a, b, prop, fn) {
    if (a && b) return fn(a[prop], b[prop]);
    return a ? a[prop] : b ? b[prop] : 0;
}
function _createBoundaryLine(boundary, line) {
    let points = [];
    let _loop = false;
    if ((0, _helpersSegmentJs.b)(boundary)) {
        _loop = true;
        points = boundary;
    } else points = _pointsFromSegments(boundary, line);
    return points.length ? new LineElement({
        points,
        options: {
            tension: 0
        },
        _loop,
        _fullLoop: _loop
    }) : null;
}
function _shouldApplyFill(source) {
    return source && source.fill !== false;
}
function _resolveTarget(sources, index, propagate) {
    const source = sources[index];
    let fill = source.fill;
    const visited = [
        index
    ];
    let target;
    if (!propagate) return fill;
    while(fill !== false && visited.indexOf(fill) === -1){
        if (!(0, _helpersSegmentJs.g)(fill)) return fill;
        target = sources[fill];
        if (!target) return false;
        if (target.visible) return fill;
        visited.push(fill);
        fill = target.fill;
    }
    return false;
}
function _decodeFill(line, index, count) {
    const fill = parseFillOption(line);
    if ((0, _helpersSegmentJs.i)(fill)) return isNaN(fill.value) ? false : fill;
    let target = parseFloat(fill);
    if ((0, _helpersSegmentJs.g)(target) && Math.floor(target) === target) return decodeTargetIndex(fill[0], index, target, count);
    return [
        "origin",
        "start",
        "end",
        "stack",
        "shape"
    ].indexOf(fill) >= 0 && fill;
}
function decodeTargetIndex(firstCh, index, target, count) {
    if (firstCh === "-" || firstCh === "+") target = index + target;
    if (target === index || target < 0 || target >= count) return false;
    return target;
}
function _getTargetPixel(fill, scale) {
    let pixel = null;
    if (fill === "start") pixel = scale.bottom;
    else if (fill === "end") pixel = scale.top;
    else if ((0, _helpersSegmentJs.i)(fill)) pixel = scale.getPixelForValue(fill.value);
    else if (scale.getBasePixel) pixel = scale.getBasePixel();
    return pixel;
}
function _getTargetValue(fill, scale, startValue) {
    let value;
    if (fill === "start") value = startValue;
    else if (fill === "end") value = scale.options.reverse ? scale.min : scale.max;
    else if ((0, _helpersSegmentJs.i)(fill)) value = fill.value;
    else value = scale.getBaseValue();
    return value;
}
function parseFillOption(line) {
    const options = line.options;
    const fillOption = options.fill;
    let fill = (0, _helpersSegmentJs.v)(fillOption && fillOption.target, fillOption);
    if (fill === undefined) fill = !!options.backgroundColor;
    if (fill === false || fill === null) return false;
    if (fill === true) return "origin";
    return fill;
}
function _buildStackLine(source) {
    const { scale, index, line } = source;
    const points = [];
    const segments = line.segments;
    const sourcePoints = line.points;
    const linesBelow = getLinesBelow(scale, index);
    linesBelow.push(_createBoundaryLine({
        x: null,
        y: scale.bottom
    }, line));
    for(let i = 0; i < segments.length; i++){
        const segment = segments[i];
        for(let j = segment.start; j <= segment.end; j++)addPointsBelow(points, sourcePoints[j], linesBelow);
    }
    return new LineElement({
        points,
        options: {}
    });
}
function getLinesBelow(scale, index) {
    const below = [];
    const metas = scale.getMatchingVisibleMetas("line");
    for(let i = 0; i < metas.length; i++){
        const meta = metas[i];
        if (meta.index === index) break;
        if (!meta.hidden) below.unshift(meta.dataset);
    }
    return below;
}
function addPointsBelow(points, sourcePoint, linesBelow) {
    const postponed = [];
    for(let j = 0; j < linesBelow.length; j++){
        const line = linesBelow[j];
        const { first, last, point } = findPoint(line, sourcePoint, "x");
        if (!point || first && last) continue;
        if (first) postponed.unshift(point);
        else {
            points.push(point);
            if (!last) break;
        }
    }
    points.push(...postponed);
}
function findPoint(line, sourcePoint, property) {
    const point = line.interpolate(sourcePoint, property);
    if (!point) return {};
    const pointValue = point[property];
    const segments = line.segments;
    const linePoints = line.points;
    let first = false;
    let last = false;
    for(let i = 0; i < segments.length; i++){
        const segment = segments[i];
        const firstValue = linePoints[segment.start][property];
        const lastValue = linePoints[segment.end][property];
        if ((0, _helpersSegmentJs.aj)(pointValue, firstValue, lastValue)) {
            first = pointValue === firstValue;
            last = pointValue === lastValue;
            break;
        }
    }
    return {
        first,
        last,
        point
    };
}
class simpleArc {
    constructor(opts){
        this.x = opts.x;
        this.y = opts.y;
        this.radius = opts.radius;
    }
    pathSegment(ctx, bounds, opts) {
        const { x, y, radius } = this;
        bounds = bounds || {
            start: 0,
            end: (0, _helpersSegmentJs.T)
        };
        ctx.arc(x, y, radius, bounds.end, bounds.start, true);
        return !opts.bounds;
    }
    interpolate(point) {
        const { x, y, radius } = this;
        const angle = point.angle;
        return {
            x: x + Math.cos(angle) * radius,
            y: y + Math.sin(angle) * radius,
            angle
        };
    }
}
function _getTarget(source) {
    const { chart, fill, line } = source;
    if ((0, _helpersSegmentJs.g)(fill)) return getLineByIndex(chart, fill);
    if (fill === "stack") return _buildStackLine(source);
    if (fill === "shape") return true;
    const boundary = computeBoundary(source);
    if (boundary instanceof simpleArc) return boundary;
    return _createBoundaryLine(boundary, line);
}
function getLineByIndex(chart, index) {
    const meta = chart.getDatasetMeta(index);
    const visible = meta && chart.isDatasetVisible(index);
    return visible ? meta.dataset : null;
}
function computeBoundary(source) {
    const scale = source.scale || {};
    if (scale.getPointPositionForValue) return computeCircularBoundary(source);
    return computeLinearBoundary(source);
}
function computeLinearBoundary(source) {
    const { scale = {}, fill } = source;
    const pixel = _getTargetPixel(fill, scale);
    if ((0, _helpersSegmentJs.g)(pixel)) {
        const horizontal = scale.isHorizontal();
        return {
            x: horizontal ? pixel : null,
            y: horizontal ? null : pixel
        };
    }
    return null;
}
function computeCircularBoundary(source) {
    const { scale, fill } = source;
    const options = scale.options;
    const length = scale.getLabels().length;
    const start = options.reverse ? scale.max : scale.min;
    const value = _getTargetValue(fill, scale, start);
    const target = [];
    if (options.grid.circular) {
        const center = scale.getPointPositionForValue(0, start);
        return new simpleArc({
            x: center.x,
            y: center.y,
            radius: scale.getDistanceFromCenterForValue(value)
        });
    }
    for(let i = 0; i < length; ++i)target.push(scale.getPointPositionForValue(i, value));
    return target;
}
function _drawfill(ctx, source, area) {
    const target = _getTarget(source);
    const { line, scale, axis } = source;
    const lineOpts = line.options;
    const fillOption = lineOpts.fill;
    const color = lineOpts.backgroundColor;
    const { above = color, below = color } = fillOption || {};
    if (target && line.points.length) {
        (0, _helpersSegmentJs.Y)(ctx, area);
        doFill(ctx, {
            line,
            target,
            above,
            below,
            area,
            scale,
            axis
        });
        (0, _helpersSegmentJs.$)(ctx);
    }
}
function doFill(ctx, cfg) {
    const { line, target, above, below, area, scale } = cfg;
    const property = line._loop ? "angle" : cfg.axis;
    ctx.save();
    if (property === "x" && below !== above) {
        clipVertical(ctx, target, area.top);
        fill(ctx, {
            line,
            target,
            color: above,
            scale,
            property
        });
        ctx.restore();
        ctx.save();
        clipVertical(ctx, target, area.bottom);
    }
    fill(ctx, {
        line,
        target,
        color: below,
        scale,
        property
    });
    ctx.restore();
}
function clipVertical(ctx, target, clipY) {
    const { segments, points } = target;
    let first = true;
    let lineLoop = false;
    ctx.beginPath();
    for (const segment of segments){
        const { start, end } = segment;
        const firstPoint = points[start];
        const lastPoint = points[_findSegmentEnd(start, end, points)];
        if (first) {
            ctx.moveTo(firstPoint.x, firstPoint.y);
            first = false;
        } else {
            ctx.lineTo(firstPoint.x, clipY);
            ctx.lineTo(firstPoint.x, firstPoint.y);
        }
        lineLoop = !!target.pathSegment(ctx, segment, {
            move: lineLoop
        });
        if (lineLoop) ctx.closePath();
        else ctx.lineTo(lastPoint.x, clipY);
    }
    ctx.lineTo(target.first().x, clipY);
    ctx.closePath();
    ctx.clip();
}
function fill(ctx, cfg) {
    const { line, target, property, color, scale } = cfg;
    const segments = _segments(line, target, property);
    for (const { source: src, target: tgt, start, end } of segments){
        const { style: { backgroundColor = color } = {} } = src;
        const notShape = target !== true;
        ctx.save();
        ctx.fillStyle = backgroundColor;
        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));
        ctx.beginPath();
        const lineLoop = !!line.pathSegment(ctx, src);
        let loop;
        if (notShape) {
            if (lineLoop) ctx.closePath();
            else interpolatedLineTo(ctx, target, end, property);
            const targetLoop = !!target.pathSegment(ctx, tgt, {
                move: lineLoop,
                reverse: true
            });
            loop = lineLoop && targetLoop;
            if (!loop) interpolatedLineTo(ctx, target, start, property);
        }
        ctx.closePath();
        ctx.fill(loop ? "evenodd" : "nonzero");
        ctx.restore();
    }
}
function clipBounds(ctx, scale, bounds) {
    const { top, bottom } = scale.chart.chartArea;
    const { property, start, end } = bounds || {};
    if (property === "x") {
        ctx.beginPath();
        ctx.rect(start, top, end - start, bottom - top);
        ctx.clip();
    }
}
function interpolatedLineTo(ctx, target, point, property) {
    const interpolatedPoint = target.interpolate(point, property);
    if (interpolatedPoint) ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
}
var index = {
    id: "filler",
    afterDatasetsUpdate (chart, _args, options) {
        const count = (chart.data.datasets || []).length;
        const sources = [];
        let meta, i, line, source;
        for(i = 0; i < count; ++i){
            meta = chart.getDatasetMeta(i);
            line = meta.dataset;
            source = null;
            if (line && line.options && line instanceof LineElement) source = {
                visible: chart.isDatasetVisible(i),
                index: i,
                fill: _decodeFill(line, i, count),
                chart,
                axis: meta.controller.options.indexAxis,
                scale: meta.vScale,
                line
            };
            meta.$filler = source;
            sources.push(source);
        }
        for(i = 0; i < count; ++i){
            source = sources[i];
            if (!source || source.fill === false) continue;
            source.fill = _resolveTarget(sources, i, options.propagate);
        }
    },
    beforeDraw (chart, _args, options) {
        const draw = options.drawTime === "beforeDraw";
        const metasets = chart.getSortedVisibleDatasetMetas();
        const area = chart.chartArea;
        for(let i = metasets.length - 1; i >= 0; --i){
            const source = metasets[i].$filler;
            if (!source) continue;
            source.line.updateControlPoints(area, source.axis);
            if (draw && source.fill) _drawfill(chart.ctx, source, area);
        }
    },
    beforeDatasetsDraw (chart, _args, options) {
        if (options.drawTime !== "beforeDatasetsDraw") return;
        const metasets = chart.getSortedVisibleDatasetMetas();
        for(let i = metasets.length - 1; i >= 0; --i){
            const source = metasets[i].$filler;
            if (_shouldApplyFill(source)) _drawfill(chart.ctx, source, chart.chartArea);
        }
    },
    beforeDatasetDraw (chart, args, options) {
        const source = args.meta.$filler;
        if (!_shouldApplyFill(source) || options.drawTime !== "beforeDatasetDraw") return;
        _drawfill(chart.ctx, source, chart.chartArea);
    },
    defaults: {
        propagate: true,
        drawTime: "beforeDatasetDraw"
    }
};
const getBoxSize = (labelOpts, fontSize)=>{
    let { boxHeight = fontSize, boxWidth = fontSize } = labelOpts;
    if (labelOpts.usePointStyle) {
        boxHeight = Math.min(boxHeight, fontSize);
        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
    }
    return {
        boxWidth,
        boxHeight,
        itemHeight: Math.max(fontSize, boxHeight)
    };
};
const itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;
class Legend extends Element {
    constructor(config){
        super();
        this._added = false;
        this.legendHitBoxes = [];
        this._hoveredItem = null;
        this.doughnutMode = false;
        this.chart = config.chart;
        this.options = config.options;
        this.ctx = config.ctx;
        this.legendItems = undefined;
        this.columnSizes = undefined;
        this.lineWidths = undefined;
        this.maxHeight = undefined;
        this.maxWidth = undefined;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.height = undefined;
        this.width = undefined;
        this._margins = undefined;
        this.position = undefined;
        this.weight = undefined;
        this.fullSize = undefined;
    }
    update(maxWidth, maxHeight, margins) {
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this._margins = margins;
        this.setDimensions();
        this.buildLabels();
        this.fit();
    }
    setDimensions() {
        if (this.isHorizontal()) {
            this.width = this.maxWidth;
            this.left = this._margins.left;
            this.right = this.width;
        } else {
            this.height = this.maxHeight;
            this.top = this._margins.top;
            this.bottom = this.height;
        }
    }
    buildLabels() {
        const labelOpts = this.options.labels || {};
        let legendItems = (0, _helpersSegmentJs.Q)(labelOpts.generateLabels, [
            this.chart
        ], this) || [];
        if (labelOpts.filter) legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));
        if (labelOpts.sort) legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));
        if (this.options.reverse) legendItems.reverse();
        this.legendItems = legendItems;
    }
    fit() {
        const { options, ctx } = this;
        if (!options.display) {
            this.width = this.height = 0;
            return;
        }
        const labelOpts = options.labels;
        const labelFont = (0, _helpersSegmentJs.a0)(labelOpts.font);
        const fontSize = labelFont.size;
        const titleHeight = this._computeTitleHeight();
        const { boxWidth, itemHeight } = getBoxSize(labelOpts, fontSize);
        let width, height;
        ctx.font = labelFont.string;
        if (this.isHorizontal()) {
            width = this.maxWidth;
            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
        } else {
            height = this.maxHeight;
            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;
        }
        this.width = Math.min(width, options.maxWidth || this.maxWidth);
        this.height = Math.min(height, options.maxHeight || this.maxHeight);
    }
    _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
        const { ctx, maxWidth, options: { labels: { padding } } } = this;
        const hitboxes = this.legendHitBoxes = [];
        const lineWidths = this.lineWidths = [
            0
        ];
        const lineHeight = itemHeight + padding;
        let totalHeight = titleHeight;
        ctx.textAlign = "left";
        ctx.textBaseline = "middle";
        let row = -1;
        let top = -lineHeight;
        this.legendItems.forEach((legendItem, i)=>{
            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
                totalHeight += lineHeight;
                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
                top += lineHeight;
                row++;
            }
            hitboxes[i] = {
                left: 0,
                top,
                row,
                width: itemWidth,
                height: itemHeight
            };
            lineWidths[lineWidths.length - 1] += itemWidth + padding;
        });
        return totalHeight;
    }
    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {
        const { ctx, maxHeight, options: { labels: { padding } } } = this;
        const hitboxes = this.legendHitBoxes = [];
        const columnSizes = this.columnSizes = [];
        const heightLimit = maxHeight - titleHeight;
        let totalWidth = padding;
        let currentColWidth = 0;
        let currentColHeight = 0;
        let left = 0;
        let col = 0;
        this.legendItems.forEach((legendItem, i)=>{
            const { itemWidth, itemHeight } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);
            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
                totalWidth += currentColWidth + padding;
                columnSizes.push({
                    width: currentColWidth,
                    height: currentColHeight
                });
                left += currentColWidth + padding;
                col++;
                currentColWidth = currentColHeight = 0;
            }
            hitboxes[i] = {
                left,
                top: currentColHeight,
                col,
                width: itemWidth,
                height: itemHeight
            };
            currentColWidth = Math.max(currentColWidth, itemWidth);
            currentColHeight += itemHeight + padding;
        });
        totalWidth += currentColWidth;
        columnSizes.push({
            width: currentColWidth,
            height: currentColHeight
        });
        return totalWidth;
    }
    adjustHitBoxes() {
        if (!this.options.display) return;
        const titleHeight = this._computeTitleHeight();
        const { legendHitBoxes: hitboxes, options: { align, labels: { padding }, rtl } } = this;
        const rtlHelper = (0, _helpersSegmentJs.az)(rtl, this.left, this.width);
        if (this.isHorizontal()) {
            let row = 0;
            let left = (0, _helpersSegmentJs.a2)(align, this.left + padding, this.right - this.lineWidths[row]);
            for (const hitbox of hitboxes){
                if (row !== hitbox.row) {
                    row = hitbox.row;
                    left = (0, _helpersSegmentJs.a2)(align, this.left + padding, this.right - this.lineWidths[row]);
                }
                hitbox.top += this.top + titleHeight + padding;
                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
                left += hitbox.width + padding;
            }
        } else {
            let col = 0;
            let top = (0, _helpersSegmentJs.a2)(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
            for (const hitbox of hitboxes){
                if (hitbox.col !== col) {
                    col = hitbox.col;
                    top = (0, _helpersSegmentJs.a2)(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
                }
                hitbox.top = top;
                hitbox.left += this.left + padding;
                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
                top += hitbox.height + padding;
            }
        }
    }
    isHorizontal() {
        return this.options.position === "top" || this.options.position === "bottom";
    }
    draw() {
        if (this.options.display) {
            const ctx = this.ctx;
            (0, _helpersSegmentJs.Y)(ctx, this);
            this._draw();
            (0, _helpersSegmentJs.$)(ctx);
        }
    }
    _draw() {
        const { options: opts, columnSizes, lineWidths, ctx } = this;
        const { align, labels: labelOpts } = opts;
        const defaultColor = (0, _helpersSegmentJs.d).color;
        const rtlHelper = (0, _helpersSegmentJs.az)(opts.rtl, this.left, this.width);
        const labelFont = (0, _helpersSegmentJs.a0)(labelOpts.font);
        const { padding } = labelOpts;
        const fontSize = labelFont.size;
        const halfFontSize = fontSize / 2;
        let cursor;
        this.drawTitle();
        ctx.textAlign = rtlHelper.textAlign("left");
        ctx.textBaseline = "middle";
        ctx.lineWidth = 0.5;
        ctx.font = labelFont.string;
        const { boxWidth, boxHeight, itemHeight } = getBoxSize(labelOpts, fontSize);
        const drawLegendBox = function(x, y, legendItem) {
            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) return;
            ctx.save();
            const lineWidth = (0, _helpersSegmentJs.v)(legendItem.lineWidth, 1);
            ctx.fillStyle = (0, _helpersSegmentJs.v)(legendItem.fillStyle, defaultColor);
            ctx.lineCap = (0, _helpersSegmentJs.v)(legendItem.lineCap, "butt");
            ctx.lineDashOffset = (0, _helpersSegmentJs.v)(legendItem.lineDashOffset, 0);
            ctx.lineJoin = (0, _helpersSegmentJs.v)(legendItem.lineJoin, "miter");
            ctx.lineWidth = lineWidth;
            ctx.strokeStyle = (0, _helpersSegmentJs.v)(legendItem.strokeStyle, defaultColor);
            ctx.setLineDash((0, _helpersSegmentJs.v)(legendItem.lineDash, []));
            if (labelOpts.usePointStyle) {
                const drawOptions = {
                    radius: boxHeight * Math.SQRT2 / 2,
                    pointStyle: legendItem.pointStyle,
                    rotation: legendItem.rotation,
                    borderWidth: lineWidth
                };
                const centerX = rtlHelper.xPlus(x, boxWidth / 2);
                const centerY = y + halfFontSize;
                (0, _helpersSegmentJs.aD)(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
            } else {
                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);
                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);
                const borderRadius = (0, _helpersSegmentJs.aw)(legendItem.borderRadius);
                ctx.beginPath();
                if (Object.values(borderRadius).some((v)=>v !== 0)) (0, _helpersSegmentJs.au)(ctx, {
                    x: xBoxLeft,
                    y: yBoxTop,
                    w: boxWidth,
                    h: boxHeight,
                    radius: borderRadius
                });
                else ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
                ctx.fill();
                if (lineWidth !== 0) ctx.stroke();
            }
            ctx.restore();
        };
        const fillText = function(x, y, legendItem) {
            (0, _helpersSegmentJs.Z)(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {
                strikethrough: legendItem.hidden,
                textAlign: rtlHelper.textAlign(legendItem.textAlign)
            });
        };
        const isHorizontal = this.isHorizontal();
        const titleHeight = this._computeTitleHeight();
        if (isHorizontal) cursor = {
            x: (0, _helpersSegmentJs.a2)(align, this.left + padding, this.right - lineWidths[0]),
            y: this.top + padding + titleHeight,
            line: 0
        };
        else cursor = {
            x: this.left + padding,
            y: (0, _helpersSegmentJs.a2)(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
            line: 0
        };
        (0, _helpersSegmentJs.aA)(this.ctx, opts.textDirection);
        const lineHeight = itemHeight + padding;
        this.legendItems.forEach((legendItem, i)=>{
            ctx.strokeStyle = legendItem.fontColor;
            ctx.fillStyle = legendItem.fontColor;
            const textWidth = ctx.measureText(legendItem.text).width;
            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
            const width = boxWidth + halfFontSize + textWidth;
            let x = cursor.x;
            let y = cursor.y;
            rtlHelper.setWidth(this.width);
            if (isHorizontal) {
                if (i > 0 && x + width + padding > this.right) {
                    y = cursor.y += lineHeight;
                    cursor.line++;
                    x = cursor.x = (0, _helpersSegmentJs.a2)(align, this.left + padding, this.right - lineWidths[cursor.line]);
                }
            } else if (i > 0 && y + lineHeight > this.bottom) {
                x = cursor.x = x + columnSizes[cursor.line].width + padding;
                cursor.line++;
                y = cursor.y = (0, _helpersSegmentJs.a2)(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);
            }
            const realX = rtlHelper.x(x);
            drawLegendBox(realX, y, legendItem);
            x = (0, _helpersSegmentJs.aB)(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);
            fillText(rtlHelper.x(x), y, legendItem);
            if (isHorizontal) cursor.x += width + padding;
            else if (typeof legendItem.text !== "string") {
                const fontLineHeight = labelFont.lineHeight;
                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;
            } else cursor.y += lineHeight;
        });
        (0, _helpersSegmentJs.aC)(this.ctx, opts.textDirection);
    }
    drawTitle() {
        const opts = this.options;
        const titleOpts = opts.title;
        const titleFont = (0, _helpersSegmentJs.a0)(titleOpts.font);
        const titlePadding = (0, _helpersSegmentJs.E)(titleOpts.padding);
        if (!titleOpts.display) return;
        const rtlHelper = (0, _helpersSegmentJs.az)(opts.rtl, this.left, this.width);
        const ctx = this.ctx;
        const position = titleOpts.position;
        const halfFontSize = titleFont.size / 2;
        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
        let y;
        let left = this.left;
        let maxWidth = this.width;
        if (this.isHorizontal()) {
            maxWidth = Math.max(...this.lineWidths);
            y = this.top + topPaddingPlusHalfFontSize;
            left = (0, _helpersSegmentJs.a2)(opts.align, left, this.right - maxWidth);
        } else {
            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);
            y = topPaddingPlusHalfFontSize + (0, _helpersSegmentJs.a2)(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
        }
        const x = (0, _helpersSegmentJs.a2)(position, left, left + maxWidth);
        ctx.textAlign = rtlHelper.textAlign((0, _helpersSegmentJs.a1)(position));
        ctx.textBaseline = "middle";
        ctx.strokeStyle = titleOpts.color;
        ctx.fillStyle = titleOpts.color;
        ctx.font = titleFont.string;
        (0, _helpersSegmentJs.Z)(ctx, titleOpts.text, x, y, titleFont);
    }
    _computeTitleHeight() {
        const titleOpts = this.options.title;
        const titleFont = (0, _helpersSegmentJs.a0)(titleOpts.font);
        const titlePadding = (0, _helpersSegmentJs.E)(titleOpts.padding);
        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
    }
    _getLegendItemAt(x, y) {
        let i, hitBox, lh;
        if ((0, _helpersSegmentJs.aj)(x, this.left, this.right) && (0, _helpersSegmentJs.aj)(y, this.top, this.bottom)) {
            lh = this.legendHitBoxes;
            for(i = 0; i < lh.length; ++i){
                hitBox = lh[i];
                if ((0, _helpersSegmentJs.aj)(x, hitBox.left, hitBox.left + hitBox.width) && (0, _helpersSegmentJs.aj)(y, hitBox.top, hitBox.top + hitBox.height)) return this.legendItems[i];
            }
        }
        return null;
    }
    handleEvent(e) {
        const opts = this.options;
        if (!isListened(e.type, opts)) return;
        const hoveredItem = this._getLegendItemAt(e.x, e.y);
        if (e.type === "mousemove" || e.type === "mouseout") {
            const previous = this._hoveredItem;
            const sameItem = itemsEqual(previous, hoveredItem);
            if (previous && !sameItem) (0, _helpersSegmentJs.Q)(opts.onLeave, [
                e,
                previous,
                this
            ], this);
            this._hoveredItem = hoveredItem;
            if (hoveredItem && !sameItem) (0, _helpersSegmentJs.Q)(opts.onHover, [
                e,
                hoveredItem,
                this
            ], this);
        } else if (hoveredItem) (0, _helpersSegmentJs.Q)(opts.onClick, [
            e,
            hoveredItem,
            this
        ], this);
    }
}
function calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {
    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);
    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);
    return {
        itemWidth,
        itemHeight
    };
}
function calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {
    let legendItemText = legendItem.text;
    if (legendItemText && typeof legendItemText !== "string") legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);
    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;
}
function calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {
    let itemHeight = _itemHeight;
    if (typeof legendItem.text !== "string") itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);
    return itemHeight;
}
function calculateLegendItemHeight(legendItem, fontLineHeight) {
    const labelHeight = legendItem.text ? legendItem.text.length : 0;
    return fontLineHeight * labelHeight;
}
function isListened(type, opts) {
    if ((type === "mousemove" || type === "mouseout") && (opts.onHover || opts.onLeave)) return true;
    if (opts.onClick && (type === "click" || type === "mouseup")) return true;
    return false;
}
var plugin_legend = {
    id: "legend",
    _element: Legend,
    start (chart, _args, options) {
        const legend = chart.legend = new Legend({
            ctx: chart.ctx,
            options,
            chart
        });
        layouts.configure(chart, legend, options);
        layouts.addBox(chart, legend);
    },
    stop (chart) {
        layouts.removeBox(chart, chart.legend);
        delete chart.legend;
    },
    beforeUpdate (chart, _args, options) {
        const legend = chart.legend;
        layouts.configure(chart, legend, options);
        legend.options = options;
    },
    afterUpdate (chart) {
        const legend = chart.legend;
        legend.buildLabels();
        legend.adjustHitBoxes();
    },
    afterEvent (chart, args) {
        if (!args.replay) chart.legend.handleEvent(args.event);
    },
    defaults: {
        display: true,
        position: "top",
        align: "center",
        fullSize: true,
        reverse: false,
        weight: 1000,
        onClick (e, legendItem, legend) {
            const index = legendItem.datasetIndex;
            const ci = legend.chart;
            if (ci.isDatasetVisible(index)) {
                ci.hide(index);
                legendItem.hidden = true;
            } else {
                ci.show(index);
                legendItem.hidden = false;
            }
        },
        onHover: null,
        onLeave: null,
        labels: {
            color: (ctx)=>ctx.chart.options.color,
            boxWidth: 40,
            padding: 10,
            generateLabels (chart) {
                const datasets = chart.data.datasets;
                const { labels: { usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius } } = chart.legend.options;
                return chart._getSortedDatasetMetas().map((meta)=>{
                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
                    const borderWidth = (0, _helpersSegmentJs.E)(style.borderWidth);
                    return {
                        text: datasets[meta.index].label,
                        fillStyle: style.backgroundColor,
                        fontColor: color,
                        hidden: !meta.visible,
                        lineCap: style.borderCapStyle,
                        lineDash: style.borderDash,
                        lineDashOffset: style.borderDashOffset,
                        lineJoin: style.borderJoinStyle,
                        lineWidth: (borderWidth.width + borderWidth.height) / 4,
                        strokeStyle: style.borderColor,
                        pointStyle: pointStyle || style.pointStyle,
                        rotation: style.rotation,
                        textAlign: textAlign || style.textAlign,
                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),
                        datasetIndex: meta.index
                    };
                }, this);
            }
        },
        title: {
            color: (ctx)=>ctx.chart.options.color,
            display: false,
            position: "center",
            text: ""
        }
    },
    descriptors: {
        _scriptable: (name)=>!name.startsWith("on"),
        labels: {
            _scriptable: (name)=>![
                    "generateLabels",
                    "filter",
                    "sort"
                ].includes(name)
        }
    }
};
class Title extends Element {
    constructor(config){
        super();
        this.chart = config.chart;
        this.options = config.options;
        this.ctx = config.ctx;
        this._padding = undefined;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.width = undefined;
        this.height = undefined;
        this.position = undefined;
        this.weight = undefined;
        this.fullSize = undefined;
    }
    update(maxWidth, maxHeight) {
        const opts = this.options;
        this.left = 0;
        this.top = 0;
        if (!opts.display) {
            this.width = this.height = this.right = this.bottom = 0;
            return;
        }
        this.width = this.right = maxWidth;
        this.height = this.bottom = maxHeight;
        const lineCount = (0, _helpersSegmentJs.b)(opts.text) ? opts.text.length : 1;
        this._padding = (0, _helpersSegmentJs.E)(opts.padding);
        const textSize = lineCount * (0, _helpersSegmentJs.a0)(opts.font).lineHeight + this._padding.height;
        if (this.isHorizontal()) this.height = textSize;
        else this.width = textSize;
    }
    isHorizontal() {
        const pos = this.options.position;
        return pos === "top" || pos === "bottom";
    }
    _drawArgs(offset) {
        const { top, left, bottom, right, options } = this;
        const align = options.align;
        let rotation = 0;
        let maxWidth, titleX, titleY;
        if (this.isHorizontal()) {
            titleX = (0, _helpersSegmentJs.a2)(align, left, right);
            titleY = top + offset;
            maxWidth = right - left;
        } else {
            if (options.position === "left") {
                titleX = left + offset;
                titleY = (0, _helpersSegmentJs.a2)(align, bottom, top);
                rotation = (0, _helpersSegmentJs.P) * -0.5;
            } else {
                titleX = right - offset;
                titleY = (0, _helpersSegmentJs.a2)(align, top, bottom);
                rotation = (0, _helpersSegmentJs.P) * 0.5;
            }
            maxWidth = bottom - top;
        }
        return {
            titleX,
            titleY,
            maxWidth,
            rotation
        };
    }
    draw() {
        const ctx = this.ctx;
        const opts = this.options;
        if (!opts.display) return;
        const fontOpts = (0, _helpersSegmentJs.a0)(opts.font);
        const lineHeight = fontOpts.lineHeight;
        const offset = lineHeight / 2 + this._padding.top;
        const { titleX, titleY, maxWidth, rotation } = this._drawArgs(offset);
        (0, _helpersSegmentJs.Z)(ctx, opts.text, 0, 0, fontOpts, {
            color: opts.color,
            maxWidth,
            rotation,
            textAlign: (0, _helpersSegmentJs.a1)(opts.align),
            textBaseline: "middle",
            translation: [
                titleX,
                titleY
            ]
        });
    }
}
function createTitle(chart, titleOpts) {
    const title = new Title({
        ctx: chart.ctx,
        options: titleOpts,
        chart
    });
    layouts.configure(chart, title, titleOpts);
    layouts.addBox(chart, title);
    chart.titleBlock = title;
}
var plugin_title = {
    id: "title",
    _element: Title,
    start (chart, _args, options) {
        createTitle(chart, options);
    },
    stop (chart) {
        const titleBlock = chart.titleBlock;
        layouts.removeBox(chart, titleBlock);
        delete chart.titleBlock;
    },
    beforeUpdate (chart, _args, options) {
        const title = chart.titleBlock;
        layouts.configure(chart, title, options);
        title.options = options;
    },
    defaults: {
        align: "center",
        display: false,
        font: {
            weight: "bold"
        },
        fullSize: true,
        padding: 10,
        position: "top",
        text: "",
        weight: 2000
    },
    defaultRoutes: {
        color: "color"
    },
    descriptors: {
        _scriptable: true,
        _indexable: false
    }
};
const map = new WeakMap();
var plugin_subtitle = {
    id: "subtitle",
    start (chart, _args, options) {
        const title = new Title({
            ctx: chart.ctx,
            options,
            chart
        });
        layouts.configure(chart, title, options);
        layouts.addBox(chart, title);
        map.set(chart, title);
    },
    stop (chart) {
        layouts.removeBox(chart, map.get(chart));
        map.delete(chart);
    },
    beforeUpdate (chart, _args, options) {
        const title = map.get(chart);
        layouts.configure(chart, title, options);
        title.options = options;
    },
    defaults: {
        align: "center",
        display: false,
        font: {
            weight: "normal"
        },
        fullSize: true,
        padding: 0,
        position: "top",
        text: "",
        weight: 1500
    },
    defaultRoutes: {
        color: "color"
    },
    descriptors: {
        _scriptable: true,
        _indexable: false
    }
};
const positioners = {
    average (items) {
        if (!items.length) return false;
        let i, len;
        let xSet = new Set();
        let y = 0;
        let count = 0;
        for(i = 0, len = items.length; i < len; ++i){
            const el = items[i].element;
            if (el && el.hasValue()) {
                const pos = el.tooltipPosition();
                xSet.add(pos.x);
                y += pos.y;
                ++count;
            }
        }
        if (count === 0 || xSet.size === 0) return false;
        const xAverage = [
            ...xSet
        ].reduce((a, b)=>a + b) / xSet.size;
        return {
            x: xAverage,
            y: y / count
        };
    },
    nearest (items, eventPosition) {
        if (!items.length) return false;
        let x = eventPosition.x;
        let y = eventPosition.y;
        let minDistance = Number.POSITIVE_INFINITY;
        let i, len, nearestElement;
        for(i = 0, len = items.length; i < len; ++i){
            const el = items[i].element;
            if (el && el.hasValue()) {
                const center = el.getCenterPoint();
                const d = (0, _helpersSegmentJs.aE)(eventPosition, center);
                if (d < minDistance) {
                    minDistance = d;
                    nearestElement = el;
                }
            }
        }
        if (nearestElement) {
            const tp = nearestElement.tooltipPosition();
            x = tp.x;
            y = tp.y;
        }
        return {
            x,
            y
        };
    }
};
function pushOrConcat(base, toPush) {
    if (toPush) {
        if ((0, _helpersSegmentJs.b)(toPush)) Array.prototype.push.apply(base, toPush);
        else base.push(toPush);
    }
    return base;
}
function splitNewlines(str) {
    if ((typeof str === "string" || str instanceof String) && str.indexOf("\n") > -1) return str.split("\n");
    return str;
}
function createTooltipItem(chart, item) {
    const { element, datasetIndex, index } = item;
    const controller = chart.getDatasetMeta(datasetIndex).controller;
    const { label, value } = controller.getLabelAndValue(index);
    return {
        chart,
        label,
        parsed: controller.getParsed(index),
        raw: chart.data.datasets[datasetIndex].data[index],
        formattedValue: value,
        dataset: controller.getDataset(),
        dataIndex: index,
        datasetIndex,
        element
    };
}
function getTooltipSize(tooltip, options) {
    const ctx = tooltip.chart.ctx;
    const { body, footer, title } = tooltip;
    const { boxWidth, boxHeight } = options;
    const bodyFont = (0, _helpersSegmentJs.a0)(options.bodyFont);
    const titleFont = (0, _helpersSegmentJs.a0)(options.titleFont);
    const footerFont = (0, _helpersSegmentJs.a0)(options.footerFont);
    const titleLineCount = title.length;
    const footerLineCount = footer.length;
    const bodyLineItemCount = body.length;
    const padding = (0, _helpersSegmentJs.E)(options.padding);
    let height = padding.height;
    let width = 0;
    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
    if (titleLineCount) height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
    if (combinedBodyLength) {
        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
    }
    if (footerLineCount) height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
    let widthPadding = 0;
    const maxLineWidth = function(line) {
        width = Math.max(width, ctx.measureText(line).width + widthPadding);
    };
    ctx.save();
    ctx.font = titleFont.string;
    (0, _helpersSegmentJs.F)(tooltip.title, maxLineWidth);
    ctx.font = bodyFont.string;
    (0, _helpersSegmentJs.F)(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;
    (0, _helpersSegmentJs.F)(body, (bodyItem)=>{
        (0, _helpersSegmentJs.F)(bodyItem.before, maxLineWidth);
        (0, _helpersSegmentJs.F)(bodyItem.lines, maxLineWidth);
        (0, _helpersSegmentJs.F)(bodyItem.after, maxLineWidth);
    });
    widthPadding = 0;
    ctx.font = footerFont.string;
    (0, _helpersSegmentJs.F)(tooltip.footer, maxLineWidth);
    ctx.restore();
    width += padding.width;
    return {
        width,
        height
    };
}
function determineYAlign(chart, size) {
    const { y, height } = size;
    if (y < height / 2) return "top";
    else if (y > chart.height - height / 2) return "bottom";
    return "center";
}
function doesNotFitWithAlign(xAlign, chart, options, size) {
    const { x, width } = size;
    const caret = options.caretSize + options.caretPadding;
    if (xAlign === "left" && x + width + caret > chart.width) return true;
    if (xAlign === "right" && x - width - caret < 0) return true;
}
function determineXAlign(chart, options, size, yAlign) {
    const { x, width } = size;
    const { width: chartWidth, chartArea: { left, right } } = chart;
    let xAlign = "center";
    if (yAlign === "center") xAlign = x <= (left + right) / 2 ? "left" : "right";
    else if (x <= width / 2) xAlign = "left";
    else if (x >= chartWidth - width / 2) xAlign = "right";
    if (doesNotFitWithAlign(xAlign, chart, options, size)) xAlign = "center";
    return xAlign;
}
function determineAlignment(chart, options, size) {
    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);
    return {
        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),
        yAlign
    };
}
function alignX(size, xAlign) {
    let { x, width } = size;
    if (xAlign === "right") x -= width;
    else if (xAlign === "center") x -= width / 2;
    return x;
}
function alignY(size, yAlign, paddingAndSize) {
    let { y, height } = size;
    if (yAlign === "top") y += paddingAndSize;
    else if (yAlign === "bottom") y -= height + paddingAndSize;
    else y -= height / 2;
    return y;
}
function getBackgroundPoint(options, size, alignment, chart) {
    const { caretSize, caretPadding, cornerRadius } = options;
    const { xAlign, yAlign } = alignment;
    const paddingAndSize = caretSize + caretPadding;
    const { topLeft, topRight, bottomLeft, bottomRight } = (0, _helpersSegmentJs.aw)(cornerRadius);
    let x = alignX(size, xAlign);
    const y = alignY(size, yAlign, paddingAndSize);
    if (yAlign === "center") {
        if (xAlign === "left") x += paddingAndSize;
        else if (xAlign === "right") x -= paddingAndSize;
    } else if (xAlign === "left") x -= Math.max(topLeft, bottomLeft) + caretSize;
    else if (xAlign === "right") x += Math.max(topRight, bottomRight) + caretSize;
    return {
        x: (0, _helpersSegmentJs.S)(x, 0, chart.width - size.width),
        y: (0, _helpersSegmentJs.S)(y, 0, chart.height - size.height)
    };
}
function getAlignedX(tooltip, align, options) {
    const padding = (0, _helpersSegmentJs.E)(options.padding);
    return align === "center" ? tooltip.x + tooltip.width / 2 : align === "right" ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
}
function getBeforeAfterBodyLines(callback) {
    return pushOrConcat([], splitNewlines(callback));
}
function createTooltipContext(parent, tooltip, tooltipItems) {
    return (0, _helpersSegmentJs.j)(parent, {
        tooltip,
        tooltipItems,
        type: "tooltip"
    });
}
function overrideCallbacks(callbacks, context) {
    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
    return override ? callbacks.override(override) : callbacks;
}
const defaultCallbacks = {
    beforeTitle: (0, _helpersSegmentJs.aF),
    title (tooltipItems) {
        if (tooltipItems.length > 0) {
            const item = tooltipItems[0];
            const labels = item.chart.data.labels;
            const labelCount = labels ? labels.length : 0;
            if (this && this.options && this.options.mode === "dataset") return item.dataset.label || "";
            else if (item.label) return item.label;
            else if (labelCount > 0 && item.dataIndex < labelCount) return labels[item.dataIndex];
        }
        return "";
    },
    afterTitle: (0, _helpersSegmentJs.aF),
    beforeBody: (0, _helpersSegmentJs.aF),
    beforeLabel: (0, _helpersSegmentJs.aF),
    label (tooltipItem) {
        if (this && this.options && this.options.mode === "dataset") return tooltipItem.label + ": " + tooltipItem.formattedValue || tooltipItem.formattedValue;
        let label = tooltipItem.dataset.label || "";
        if (label) label += ": ";
        const value = tooltipItem.formattedValue;
        if (!(0, _helpersSegmentJs.k)(value)) label += value;
        return label;
    },
    labelColor (tooltipItem) {
        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
        const options = meta.controller.getStyle(tooltipItem.dataIndex);
        return {
            borderColor: options.borderColor,
            backgroundColor: options.backgroundColor,
            borderWidth: options.borderWidth,
            borderDash: options.borderDash,
            borderDashOffset: options.borderDashOffset,
            borderRadius: 0
        };
    },
    labelTextColor () {
        return this.options.bodyColor;
    },
    labelPointStyle (tooltipItem) {
        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
        const options = meta.controller.getStyle(tooltipItem.dataIndex);
        return {
            pointStyle: options.pointStyle,
            rotation: options.rotation
        };
    },
    afterLabel: (0, _helpersSegmentJs.aF),
    afterBody: (0, _helpersSegmentJs.aF),
    beforeFooter: (0, _helpersSegmentJs.aF),
    footer: (0, _helpersSegmentJs.aF),
    afterFooter: (0, _helpersSegmentJs.aF)
};
function invokeCallbackWithFallback(callbacks, name, ctx, arg) {
    const result = callbacks[name].call(ctx, arg);
    if (typeof result === "undefined") return defaultCallbacks[name].call(ctx, arg);
    return result;
}
class Tooltip extends Element {
    static positioners = positioners;
    constructor(config){
        super();
        this.opacity = 0;
        this._active = [];
        this._eventPosition = undefined;
        this._size = undefined;
        this._cachedAnimations = undefined;
        this._tooltipItems = [];
        this.$animations = undefined;
        this.$context = undefined;
        this.chart = config.chart;
        this.options = config.options;
        this.dataPoints = undefined;
        this.title = undefined;
        this.beforeBody = undefined;
        this.body = undefined;
        this.afterBody = undefined;
        this.footer = undefined;
        this.xAlign = undefined;
        this.yAlign = undefined;
        this.x = undefined;
        this.y = undefined;
        this.height = undefined;
        this.width = undefined;
        this.caretX = undefined;
        this.caretY = undefined;
        this.labelColors = undefined;
        this.labelPointStyles = undefined;
        this.labelTextColors = undefined;
    }
    initialize(options) {
        this.options = options;
        this._cachedAnimations = undefined;
        this.$context = undefined;
    }
    _resolveAnimations() {
        const cached = this._cachedAnimations;
        if (cached) return cached;
        const chart = this.chart;
        const options = this.options.setContext(this.getContext());
        const opts = options.enabled && chart.options.animation && options.animations;
        const animations = new Animations(this.chart, opts);
        if (opts._cacheable) this._cachedAnimations = Object.freeze(animations);
        return animations;
    }
    getContext() {
        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
    }
    getTitle(context, options) {
        const { callbacks } = options;
        const beforeTitle = invokeCallbackWithFallback(callbacks, "beforeTitle", this, context);
        const title = invokeCallbackWithFallback(callbacks, "title", this, context);
        const afterTitle = invokeCallbackWithFallback(callbacks, "afterTitle", this, context);
        let lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeTitle));
        lines = pushOrConcat(lines, splitNewlines(title));
        lines = pushOrConcat(lines, splitNewlines(afterTitle));
        return lines;
    }
    getBeforeBody(tooltipItems, options) {
        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, "beforeBody", this, tooltipItems));
    }
    getBody(tooltipItems, options) {
        const { callbacks } = options;
        const bodyItems = [];
        (0, _helpersSegmentJs.F)(tooltipItems, (context)=>{
            const bodyItem = {
                before: [],
                lines: [],
                after: []
            };
            const scoped = overrideCallbacks(callbacks, context);
            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, "beforeLabel", this, context)));
            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, "label", this, context));
            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, "afterLabel", this, context)));
            bodyItems.push(bodyItem);
        });
        return bodyItems;
    }
    getAfterBody(tooltipItems, options) {
        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, "afterBody", this, tooltipItems));
    }
    getFooter(tooltipItems, options) {
        const { callbacks } = options;
        const beforeFooter = invokeCallbackWithFallback(callbacks, "beforeFooter", this, tooltipItems);
        const footer = invokeCallbackWithFallback(callbacks, "footer", this, tooltipItems);
        const afterFooter = invokeCallbackWithFallback(callbacks, "afterFooter", this, tooltipItems);
        let lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeFooter));
        lines = pushOrConcat(lines, splitNewlines(footer));
        lines = pushOrConcat(lines, splitNewlines(afterFooter));
        return lines;
    }
    _createItems(options) {
        const active = this._active;
        const data = this.chart.data;
        const labelColors = [];
        const labelPointStyles = [];
        const labelTextColors = [];
        let tooltipItems = [];
        let i, len;
        for(i = 0, len = active.length; i < len; ++i)tooltipItems.push(createTooltipItem(this.chart, active[i]));
        if (options.filter) tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));
        if (options.itemSort) tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));
        (0, _helpersSegmentJs.F)(tooltipItems, (context)=>{
            const scoped = overrideCallbacks(options.callbacks, context);
            labelColors.push(invokeCallbackWithFallback(scoped, "labelColor", this, context));
            labelPointStyles.push(invokeCallbackWithFallback(scoped, "labelPointStyle", this, context));
            labelTextColors.push(invokeCallbackWithFallback(scoped, "labelTextColor", this, context));
        });
        this.labelColors = labelColors;
        this.labelPointStyles = labelPointStyles;
        this.labelTextColors = labelTextColors;
        this.dataPoints = tooltipItems;
        return tooltipItems;
    }
    update(changed, replay) {
        const options = this.options.setContext(this.getContext());
        const active = this._active;
        let properties;
        let tooltipItems = [];
        if (!active.length) {
            if (this.opacity !== 0) properties = {
                opacity: 0
            };
        } else {
            const position = positioners[options.position].call(this, active, this._eventPosition);
            tooltipItems = this._createItems(options);
            this.title = this.getTitle(tooltipItems, options);
            this.beforeBody = this.getBeforeBody(tooltipItems, options);
            this.body = this.getBody(tooltipItems, options);
            this.afterBody = this.getAfterBody(tooltipItems, options);
            this.footer = this.getFooter(tooltipItems, options);
            const size = this._size = getTooltipSize(this, options);
            const positionAndSize = Object.assign({}, position, size);
            const alignment = determineAlignment(this.chart, options, positionAndSize);
            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);
            this.xAlign = alignment.xAlign;
            this.yAlign = alignment.yAlign;
            properties = {
                opacity: 1,
                x: backgroundPoint.x,
                y: backgroundPoint.y,
                width: size.width,
                height: size.height,
                caretX: position.x,
                caretY: position.y
            };
        }
        this._tooltipItems = tooltipItems;
        this.$context = undefined;
        if (properties) this._resolveAnimations().update(this, properties);
        if (changed && options.external) options.external.call(this, {
            chart: this.chart,
            tooltip: this,
            replay
        });
    }
    drawCaret(tooltipPoint, ctx, size, options) {
        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
        ctx.lineTo(caretPosition.x1, caretPosition.y1);
        ctx.lineTo(caretPosition.x2, caretPosition.y2);
        ctx.lineTo(caretPosition.x3, caretPosition.y3);
    }
    getCaretPosition(tooltipPoint, size, options) {
        const { xAlign, yAlign } = this;
        const { caretSize, cornerRadius } = options;
        const { topLeft, topRight, bottomLeft, bottomRight } = (0, _helpersSegmentJs.aw)(cornerRadius);
        const { x: ptX, y: ptY } = tooltipPoint;
        const { width, height } = size;
        let x1, x2, x3, y1, y2, y3;
        if (yAlign === "center") {
            y2 = ptY + height / 2;
            if (xAlign === "left") {
                x1 = ptX;
                x2 = x1 - caretSize;
                y1 = y2 + caretSize;
                y3 = y2 - caretSize;
            } else {
                x1 = ptX + width;
                x2 = x1 + caretSize;
                y1 = y2 - caretSize;
                y3 = y2 + caretSize;
            }
            x3 = x1;
        } else {
            if (xAlign === "left") x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
            else if (xAlign === "right") x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
            else x2 = this.caretX;
            if (yAlign === "top") {
                y1 = ptY;
                y2 = y1 - caretSize;
                x1 = x2 - caretSize;
                x3 = x2 + caretSize;
            } else {
                y1 = ptY + height;
                y2 = y1 + caretSize;
                x1 = x2 + caretSize;
                x3 = x2 - caretSize;
            }
            y3 = y1;
        }
        return {
            x1,
            x2,
            x3,
            y1,
            y2,
            y3
        };
    }
    drawTitle(pt, ctx, options) {
        const title = this.title;
        const length = title.length;
        let titleFont, titleSpacing, i;
        if (length) {
            const rtlHelper = (0, _helpersSegmentJs.az)(options.rtl, this.x, this.width);
            pt.x = getAlignedX(this, options.titleAlign, options);
            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
            ctx.textBaseline = "middle";
            titleFont = (0, _helpersSegmentJs.a0)(options.titleFont);
            titleSpacing = options.titleSpacing;
            ctx.fillStyle = options.titleColor;
            ctx.font = titleFont.string;
            for(i = 0; i < length; ++i){
                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
                pt.y += titleFont.lineHeight + titleSpacing;
                if (i + 1 === length) pt.y += options.titleMarginBottom - titleSpacing;
            }
        }
    }
    _drawColorBox(ctx, pt, i, rtlHelper, options) {
        const labelColor = this.labelColors[i];
        const labelPointStyle = this.labelPointStyles[i];
        const { boxHeight, boxWidth } = options;
        const bodyFont = (0, _helpersSegmentJs.a0)(options.bodyFont);
        const colorX = getAlignedX(this, "left", options);
        const rtlColorX = rtlHelper.x(colorX);
        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
        const colorY = pt.y + yOffSet;
        if (options.usePointStyle) {
            const drawOptions = {
                radius: Math.min(boxWidth, boxHeight) / 2,
                pointStyle: labelPointStyle.pointStyle,
                rotation: labelPointStyle.rotation,
                borderWidth: 1
            };
            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
            const centerY = colorY + boxHeight / 2;
            ctx.strokeStyle = options.multiKeyBackground;
            ctx.fillStyle = options.multiKeyBackground;
            (0, _helpersSegmentJs.at)(ctx, drawOptions, centerX, centerY);
            ctx.strokeStyle = labelColor.borderColor;
            ctx.fillStyle = labelColor.backgroundColor;
            (0, _helpersSegmentJs.at)(ctx, drawOptions, centerX, centerY);
        } else {
            ctx.lineWidth = (0, _helpersSegmentJs.i)(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;
            ctx.strokeStyle = labelColor.borderColor;
            ctx.setLineDash(labelColor.borderDash || []);
            ctx.lineDashOffset = labelColor.borderDashOffset || 0;
            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);
            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);
            const borderRadius = (0, _helpersSegmentJs.aw)(labelColor.borderRadius);
            if (Object.values(borderRadius).some((v)=>v !== 0)) {
                ctx.beginPath();
                ctx.fillStyle = options.multiKeyBackground;
                (0, _helpersSegmentJs.au)(ctx, {
                    x: outerX,
                    y: colorY,
                    w: boxWidth,
                    h: boxHeight,
                    radius: borderRadius
                });
                ctx.fill();
                ctx.stroke();
                ctx.fillStyle = labelColor.backgroundColor;
                ctx.beginPath();
                (0, _helpersSegmentJs.au)(ctx, {
                    x: innerX,
                    y: colorY + 1,
                    w: boxWidth - 2,
                    h: boxHeight - 2,
                    radius: borderRadius
                });
                ctx.fill();
            } else {
                ctx.fillStyle = options.multiKeyBackground;
                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
                ctx.fillStyle = labelColor.backgroundColor;
                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
            }
        }
        ctx.fillStyle = this.labelTextColors[i];
    }
    drawBody(pt, ctx, options) {
        const { body } = this;
        const { bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding } = options;
        const bodyFont = (0, _helpersSegmentJs.a0)(options.bodyFont);
        let bodyLineHeight = bodyFont.lineHeight;
        let xLinePadding = 0;
        const rtlHelper = (0, _helpersSegmentJs.az)(options.rtl, this.x, this.width);
        const fillLineOfText = function(line) {
            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
            pt.y += bodyLineHeight + bodySpacing;
        };
        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
        let bodyItem, textColor, lines, i, j, ilen, jlen;
        ctx.textAlign = bodyAlign;
        ctx.textBaseline = "middle";
        ctx.font = bodyFont.string;
        pt.x = getAlignedX(this, bodyAlignForCalculation, options);
        ctx.fillStyle = options.bodyColor;
        (0, _helpersSegmentJs.F)(this.beforeBody, fillLineOfText);
        xLinePadding = displayColors && bodyAlignForCalculation !== "right" ? bodyAlign === "center" ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
        for(i = 0, ilen = body.length; i < ilen; ++i){
            bodyItem = body[i];
            textColor = this.labelTextColors[i];
            ctx.fillStyle = textColor;
            (0, _helpersSegmentJs.F)(bodyItem.before, fillLineOfText);
            lines = bodyItem.lines;
            if (displayColors && lines.length) {
                this._drawColorBox(ctx, pt, i, rtlHelper, options);
                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
            }
            for(j = 0, jlen = lines.length; j < jlen; ++j){
                fillLineOfText(lines[j]);
                bodyLineHeight = bodyFont.lineHeight;
            }
            (0, _helpersSegmentJs.F)(bodyItem.after, fillLineOfText);
        }
        xLinePadding = 0;
        bodyLineHeight = bodyFont.lineHeight;
        (0, _helpersSegmentJs.F)(this.afterBody, fillLineOfText);
        pt.y -= bodySpacing;
    }
    drawFooter(pt, ctx, options) {
        const footer = this.footer;
        const length = footer.length;
        let footerFont, i;
        if (length) {
            const rtlHelper = (0, _helpersSegmentJs.az)(options.rtl, this.x, this.width);
            pt.x = getAlignedX(this, options.footerAlign, options);
            pt.y += options.footerMarginTop;
            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
            ctx.textBaseline = "middle";
            footerFont = (0, _helpersSegmentJs.a0)(options.footerFont);
            ctx.fillStyle = options.footerColor;
            ctx.font = footerFont.string;
            for(i = 0; i < length; ++i){
                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
                pt.y += footerFont.lineHeight + options.footerSpacing;
            }
        }
    }
    drawBackground(pt, ctx, tooltipSize, options) {
        const { xAlign, yAlign } = this;
        const { x, y } = pt;
        const { width, height } = tooltipSize;
        const { topLeft, topRight, bottomLeft, bottomRight } = (0, _helpersSegmentJs.aw)(options.cornerRadius);
        ctx.fillStyle = options.backgroundColor;
        ctx.strokeStyle = options.borderColor;
        ctx.lineWidth = options.borderWidth;
        ctx.beginPath();
        ctx.moveTo(x + topLeft, y);
        if (yAlign === "top") this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x + width - topRight, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);
        if (yAlign === "center" && xAlign === "right") this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x + width, y + height - bottomRight);
        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);
        if (yAlign === "bottom") this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x + bottomLeft, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);
        if (yAlign === "center" && xAlign === "left") this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x, y + topLeft);
        ctx.quadraticCurveTo(x, y, x + topLeft, y);
        ctx.closePath();
        ctx.fill();
        if (options.borderWidth > 0) ctx.stroke();
    }
    _updateAnimationTarget(options) {
        const chart = this.chart;
        const anims = this.$animations;
        const animX = anims && anims.x;
        const animY = anims && anims.y;
        if (animX || animY) {
            const position = positioners[options.position].call(this, this._active, this._eventPosition);
            if (!position) return;
            const size = this._size = getTooltipSize(this, options);
            const positionAndSize = Object.assign({}, position, this._size);
            const alignment = determineAlignment(chart, options, positionAndSize);
            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);
            if (animX._to !== point.x || animY._to !== point.y) {
                this.xAlign = alignment.xAlign;
                this.yAlign = alignment.yAlign;
                this.width = size.width;
                this.height = size.height;
                this.caretX = position.x;
                this.caretY = position.y;
                this._resolveAnimations().update(this, point);
            }
        }
    }
    _willRender() {
        return !!this.opacity;
    }
    draw(ctx) {
        const options = this.options.setContext(this.getContext());
        let opacity = this.opacity;
        if (!opacity) return;
        this._updateAnimationTarget(options);
        const tooltipSize = {
            width: this.width,
            height: this.height
        };
        const pt = {
            x: this.x,
            y: this.y
        };
        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
        const padding = (0, _helpersSegmentJs.E)(options.padding);
        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
        if (options.enabled && hasTooltipContent) {
            ctx.save();
            ctx.globalAlpha = opacity;
            this.drawBackground(pt, ctx, tooltipSize, options);
            (0, _helpersSegmentJs.aA)(ctx, options.textDirection);
            pt.y += padding.top;
            this.drawTitle(pt, ctx, options);
            this.drawBody(pt, ctx, options);
            this.drawFooter(pt, ctx, options);
            (0, _helpersSegmentJs.aC)(ctx, options.textDirection);
            ctx.restore();
        }
    }
    getActiveElements() {
        return this._active || [];
    }
    setActiveElements(activeElements, eventPosition) {
        const lastActive = this._active;
        const active = activeElements.map(({ datasetIndex, index })=>{
            const meta = this.chart.getDatasetMeta(datasetIndex);
            if (!meta) throw new Error("Cannot find a dataset at index " + datasetIndex);
            return {
                datasetIndex,
                element: meta.data[index],
                index
            };
        });
        const changed = !(0, _helpersSegmentJs.ah)(lastActive, active);
        const positionChanged = this._positionChanged(active, eventPosition);
        if (changed || positionChanged) {
            this._active = active;
            this._eventPosition = eventPosition;
            this._ignoreReplayEvents = true;
            this.update(true);
        }
    }
    handleEvent(e, replay, inChartArea = true) {
        if (replay && this._ignoreReplayEvents) return false;
        this._ignoreReplayEvents = false;
        const options = this.options;
        const lastActive = this._active || [];
        const active = this._getActiveElements(e, lastActive, replay, inChartArea);
        const positionChanged = this._positionChanged(active, e);
        const changed = replay || !(0, _helpersSegmentJs.ah)(active, lastActive) || positionChanged;
        if (changed) {
            this._active = active;
            if (options.enabled || options.external) {
                this._eventPosition = {
                    x: e.x,
                    y: e.y
                };
                this.update(true, replay);
            }
        }
        return changed;
    }
    _getActiveElements(e, lastActive, replay, inChartArea) {
        const options = this.options;
        if (e.type === "mouseout") return [];
        if (!inChartArea) return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);
        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);
        if (options.reverse) active.reverse();
        return active;
    }
    _positionChanged(active, e) {
        const { caretX, caretY, options } = this;
        const position = positioners[options.position].call(this, active, e);
        return position !== false && (caretX !== position.x || caretY !== position.y);
    }
}
var plugin_tooltip = {
    id: "tooltip",
    _element: Tooltip,
    positioners,
    afterInit (chart, _args, options) {
        if (options) chart.tooltip = new Tooltip({
            chart,
            options
        });
    },
    beforeUpdate (chart, _args, options) {
        if (chart.tooltip) chart.tooltip.initialize(options);
    },
    reset (chart, _args, options) {
        if (chart.tooltip) chart.tooltip.initialize(options);
    },
    afterDraw (chart) {
        const tooltip = chart.tooltip;
        if (tooltip && tooltip._willRender()) {
            const args = {
                tooltip
            };
            if (chart.notifyPlugins("beforeTooltipDraw", {
                ...args,
                cancelable: true
            }) === false) return;
            tooltip.draw(chart.ctx);
            chart.notifyPlugins("afterTooltipDraw", args);
        }
    },
    afterEvent (chart, args) {
        if (chart.tooltip) {
            const useFinalPosition = args.replay;
            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) args.changed = true;
        }
    },
    defaults: {
        enabled: true,
        external: null,
        position: "average",
        backgroundColor: "rgba(0,0,0,0.8)",
        titleColor: "#fff",
        titleFont: {
            weight: "bold"
        },
        titleSpacing: 2,
        titleMarginBottom: 6,
        titleAlign: "left",
        bodyColor: "#fff",
        bodySpacing: 2,
        bodyFont: {},
        bodyAlign: "left",
        footerColor: "#fff",
        footerSpacing: 2,
        footerMarginTop: 6,
        footerFont: {
            weight: "bold"
        },
        footerAlign: "left",
        padding: 6,
        caretPadding: 2,
        caretSize: 5,
        cornerRadius: 6,
        boxHeight: (ctx, opts)=>opts.bodyFont.size,
        boxWidth: (ctx, opts)=>opts.bodyFont.size,
        multiKeyBackground: "#fff",
        displayColors: true,
        boxPadding: 0,
        borderColor: "rgba(0,0,0,0)",
        borderWidth: 0,
        animation: {
            duration: 400,
            easing: "easeOutQuart"
        },
        animations: {
            numbers: {
                type: "number",
                properties: [
                    "x",
                    "y",
                    "width",
                    "height",
                    "caretX",
                    "caretY"
                ]
            },
            opacity: {
                easing: "linear",
                duration: 200
            }
        },
        callbacks: defaultCallbacks
    },
    defaultRoutes: {
        bodyFont: "font",
        footerFont: "font",
        titleFont: "font"
    },
    descriptors: {
        _scriptable: (name)=>name !== "filter" && name !== "itemSort" && name !== "external",
        _indexable: false,
        callbacks: {
            _scriptable: false,
            _indexable: false
        },
        animation: {
            _fallback: false
        },
        animations: {
            _fallback: "animation"
        }
    },
    additionalOptionScopes: [
        "interaction"
    ]
};
var plugins = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    Colors: plugin_colors,
    Decimation: plugin_decimation,
    Filler: index,
    Legend: plugin_legend,
    SubTitle: plugin_subtitle,
    Title: plugin_title,
    Tooltip: plugin_tooltip
});
const addIfString = (labels, raw, index, addedLabels)=>{
    if (typeof raw === "string") {
        index = labels.push(raw) - 1;
        addedLabels.unshift({
            index,
            label: raw
        });
    } else if (isNaN(raw)) index = null;
    return index;
};
function findOrAddLabel(labels, raw, index, addedLabels) {
    const first = labels.indexOf(raw);
    if (first === -1) return addIfString(labels, raw, index, addedLabels);
    const last = labels.lastIndexOf(raw);
    return first !== last ? index : first;
}
const validIndex = (index, max)=>index === null ? null : (0, _helpersSegmentJs.S)(Math.round(index), 0, max);
function _getLabelForValue(value) {
    const labels = this.getLabels();
    if (value >= 0 && value < labels.length) return labels[value];
    return value;
}
class CategoryScale extends Scale {
    static id = "category";
    static defaults = {
        ticks: {
            callback: _getLabelForValue
        }
    };
    constructor(cfg){
        super(cfg);
        this._startValue = undefined;
        this._valueRange = 0;
        this._addedLabels = [];
    }
    init(scaleOptions) {
        const added = this._addedLabels;
        if (added.length) {
            const labels = this.getLabels();
            for (const { index, label } of added)if (labels[index] === label) labels.splice(index, 1);
            this._addedLabels = [];
        }
        super.init(scaleOptions);
    }
    parse(raw, index) {
        if ((0, _helpersSegmentJs.k)(raw)) return null;
        const labels = this.getLabels();
        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, (0, _helpersSegmentJs.v)(index, raw), this._addedLabels);
        return validIndex(index, labels.length - 1);
    }
    determineDataLimits() {
        const { minDefined, maxDefined } = this.getUserBounds();
        let { min, max } = this.getMinMax(true);
        if (this.options.bounds === "ticks") {
            if (!minDefined) min = 0;
            if (!maxDefined) max = this.getLabels().length - 1;
        }
        this.min = min;
        this.max = max;
    }
    buildTicks() {
        const min = this.min;
        const max = this.max;
        const offset = this.options.offset;
        const ticks = [];
        let labels = this.getLabels();
        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
        this._startValue = this.min - (offset ? 0.5 : 0);
        for(let value = min; value <= max; value++)ticks.push({
            value
        });
        return ticks;
    }
    getLabelForValue(value) {
        return _getLabelForValue.call(this, value);
    }
    configure() {
        super.configure();
        if (!this.isHorizontal()) this._reversePixels = !this._reversePixels;
    }
    getPixelForValue(value) {
        if (typeof value !== "number") value = this.parse(value);
        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
    }
    getPixelForTick(index) {
        const ticks = this.ticks;
        if (index < 0 || index > ticks.length - 1) return null;
        return this.getPixelForValue(ticks[index].value);
    }
    getValueForPixel(pixel) {
        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
    }
    getBasePixel() {
        return this.bottom;
    }
}
function generateTicks$1(generationOptions, dataRange) {
    const ticks = [];
    const MIN_SPACING = 1e-14;
    const { bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds } = generationOptions;
    const unit = step || 1;
    const maxSpaces = maxTicks - 1;
    const { min: rmin, max: rmax } = dataRange;
    const minDefined = !(0, _helpersSegmentJs.k)(min);
    const maxDefined = !(0, _helpersSegmentJs.k)(max);
    const countDefined = !(0, _helpersSegmentJs.k)(count);
    const minSpacing = (rmax - rmin) / (maxDigits + 1);
    let spacing = (0, _helpersSegmentJs.aH)((rmax - rmin) / maxSpaces / unit) * unit;
    let factor, niceMin, niceMax, numSpaces;
    if (spacing < MIN_SPACING && !minDefined && !maxDefined) return [
        {
            value: rmin
        },
        {
            value: rmax
        }
    ];
    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
    if (numSpaces > maxSpaces) spacing = (0, _helpersSegmentJs.aH)(numSpaces * spacing / maxSpaces / unit) * unit;
    if (!(0, _helpersSegmentJs.k)(precision)) {
        factor = Math.pow(10, precision);
        spacing = Math.ceil(spacing * factor) / factor;
    }
    if (bounds === "ticks") {
        niceMin = Math.floor(rmin / spacing) * spacing;
        niceMax = Math.ceil(rmax / spacing) * spacing;
    } else {
        niceMin = rmin;
        niceMax = rmax;
    }
    if (minDefined && maxDefined && step && (0, _helpersSegmentJs.aI)((max - min) / step, spacing / 1000)) {
        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
        spacing = (max - min) / numSpaces;
        niceMin = min;
        niceMax = max;
    } else if (countDefined) {
        niceMin = minDefined ? min : niceMin;
        niceMax = maxDefined ? max : niceMax;
        numSpaces = count - 1;
        spacing = (niceMax - niceMin) / numSpaces;
    } else {
        numSpaces = (niceMax - niceMin) / spacing;
        if ((0, _helpersSegmentJs.aJ)(numSpaces, Math.round(numSpaces), spacing / 1000)) numSpaces = Math.round(numSpaces);
        else numSpaces = Math.ceil(numSpaces);
    }
    const decimalPlaces = Math.max((0, _helpersSegmentJs.aK)(spacing), (0, _helpersSegmentJs.aK)(niceMin));
    factor = Math.pow(10, (0, _helpersSegmentJs.k)(precision) ? decimalPlaces : precision);
    niceMin = Math.round(niceMin * factor) / factor;
    niceMax = Math.round(niceMax * factor) / factor;
    let j = 0;
    if (minDefined) {
        if (includeBounds && niceMin !== min) {
            ticks.push({
                value: min
            });
            if (niceMin < min) j++;
            if ((0, _helpersSegmentJs.aJ)(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) j++;
        } else if (niceMin < min) j++;
    }
    for(; j < numSpaces; ++j){
        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;
        if (maxDefined && tickValue > max) break;
        ticks.push({
            value: tickValue
        });
    }
    if (maxDefined && includeBounds && niceMax !== max) {
        if (ticks.length && (0, _helpersSegmentJs.aJ)(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) ticks[ticks.length - 1].value = max;
        else ticks.push({
            value: max
        });
    } else if (!maxDefined || niceMax === max) ticks.push({
        value: niceMax
    });
    return ticks;
}
function relativeLabelSize(value, minSpacing, { horizontal, minRotation }) {
    const rad = (0, _helpersSegmentJs.t)(minRotation);
    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;
    const length = 0.75 * minSpacing * ("" + value).length;
    return Math.min(minSpacing / ratio, length);
}
class LinearScaleBase extends Scale {
    constructor(cfg){
        super(cfg);
        this.start = undefined;
        this.end = undefined;
        this._startValue = undefined;
        this._endValue = undefined;
        this._valueRange = 0;
    }
    parse(raw, index) {
        if ((0, _helpersSegmentJs.k)(raw)) return null;
        if ((typeof raw === "number" || raw instanceof Number) && !isFinite(+raw)) return null;
        return +raw;
    }
    handleTickRangeOptions() {
        const { beginAtZero } = this.options;
        const { minDefined, maxDefined } = this.getUserBounds();
        let { min, max } = this;
        const setMin = (v)=>min = minDefined ? min : v;
        const setMax = (v)=>max = maxDefined ? max : v;
        if (beginAtZero) {
            const minSign = (0, _helpersSegmentJs.s)(min);
            const maxSign = (0, _helpersSegmentJs.s)(max);
            if (minSign < 0 && maxSign < 0) setMax(0);
            else if (minSign > 0 && maxSign > 0) setMin(0);
        }
        if (min === max) {
            let offset = max === 0 ? 1 : Math.abs(max * 0.05);
            setMax(max + offset);
            if (!beginAtZero) setMin(min - offset);
        }
        this.min = min;
        this.max = max;
    }
    getTickLimit() {
        const tickOpts = this.options.ticks;
        let { maxTicksLimit, stepSize } = tickOpts;
        let maxTicks;
        if (stepSize) {
            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
            if (maxTicks > 1000) {
                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
                maxTicks = 1000;
            }
        } else {
            maxTicks = this.computeTickLimit();
            maxTicksLimit = maxTicksLimit || 11;
        }
        if (maxTicksLimit) maxTicks = Math.min(maxTicksLimit, maxTicks);
        return maxTicks;
    }
    computeTickLimit() {
        return Number.POSITIVE_INFINITY;
    }
    buildTicks() {
        const opts = this.options;
        const tickOpts = opts.ticks;
        let maxTicks = this.getTickLimit();
        maxTicks = Math.max(2, maxTicks);
        const numericGeneratorOptions = {
            maxTicks,
            bounds: opts.bounds,
            min: opts.min,
            max: opts.max,
            precision: tickOpts.precision,
            step: tickOpts.stepSize,
            count: tickOpts.count,
            maxDigits: this._maxDigits(),
            horizontal: this.isHorizontal(),
            minRotation: tickOpts.minRotation || 0,
            includeBounds: tickOpts.includeBounds !== false
        };
        const dataRange = this._range || this;
        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
        if (opts.bounds === "ticks") (0, _helpersSegmentJs.aG)(ticks, this, "value");
        if (opts.reverse) {
            ticks.reverse();
            this.start = this.max;
            this.end = this.min;
        } else {
            this.start = this.min;
            this.end = this.max;
        }
        return ticks;
    }
    configure() {
        const ticks = this.ticks;
        let start = this.min;
        let end = this.max;
        super.configure();
        if (this.options.offset && ticks.length) {
            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
            start -= offset;
            end += offset;
        }
        this._startValue = start;
        this._endValue = end;
        this._valueRange = end - start;
    }
    getLabelForValue(value) {
        return (0, _helpersSegmentJs.o)(value, this.chart.options.locale, this.options.ticks.format);
    }
}
class LinearScale extends LinearScaleBase {
    static id = "linear";
    static defaults = {
        ticks: {
            callback: (0, _helpersSegmentJs.aL).formatters.numeric
        }
    };
    determineDataLimits() {
        const { min, max } = this.getMinMax(true);
        this.min = (0, _helpersSegmentJs.g)(min) ? min : 0;
        this.max = (0, _helpersSegmentJs.g)(max) ? max : 1;
        this.handleTickRangeOptions();
    }
    computeTickLimit() {
        const horizontal = this.isHorizontal();
        const length = horizontal ? this.width : this.height;
        const minRotation = (0, _helpersSegmentJs.t)(this.options.ticks.minRotation);
        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;
        const tickFont = this._resolveTickFontOptions(0);
        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
    }
    getPixelForValue(value) {
        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
    }
    getValueForPixel(pixel) {
        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
    }
}
const log10Floor = (v)=>Math.floor((0, _helpersSegmentJs.aM)(v));
const changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);
function isMajor(tickVal) {
    const remain = tickVal / Math.pow(10, log10Floor(tickVal));
    return remain === 1;
}
function steps(min, max, rangeExp) {
    const rangeStep = Math.pow(10, rangeExp);
    const start = Math.floor(min / rangeStep);
    const end = Math.ceil(max / rangeStep);
    return end - start;
}
function startExp(min, max) {
    const range = max - min;
    let rangeExp = log10Floor(range);
    while(steps(min, max, rangeExp) > 10)rangeExp++;
    while(steps(min, max, rangeExp) < 10)rangeExp--;
    return Math.min(rangeExp, log10Floor(min));
}
function generateTicks(generationOptions, { min, max }) {
    min = (0, _helpersSegmentJs.O)(generationOptions.min, min);
    const ticks = [];
    const minExp = log10Floor(min);
    let exp = startExp(min, max);
    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
    const stepSize = Math.pow(10, exp);
    const base = minExp > exp ? Math.pow(10, minExp) : 0;
    const start = Math.round((min - base) * precision) / precision;
    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;
    let significand = Math.floor((start - offset) / Math.pow(10, exp));
    let value = (0, _helpersSegmentJs.O)(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);
    while(value < max){
        ticks.push({
            value,
            major: isMajor(value),
            significand
        });
        if (significand >= 10) significand = significand < 15 ? 15 : 20;
        else significand++;
        if (significand >= 20) {
            exp++;
            significand = 2;
            precision = exp >= 0 ? 1 : precision;
        }
        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;
    }
    const lastTick = (0, _helpersSegmentJs.O)(generationOptions.max, value);
    ticks.push({
        value: lastTick,
        major: isMajor(lastTick),
        significand
    });
    return ticks;
}
class LogarithmicScale extends Scale {
    static id = "logarithmic";
    static defaults = {
        ticks: {
            callback: (0, _helpersSegmentJs.aL).formatters.logarithmic,
            major: {
                enabled: true
            }
        }
    };
    constructor(cfg){
        super(cfg);
        this.start = undefined;
        this.end = undefined;
        this._startValue = undefined;
        this._valueRange = 0;
    }
    parse(raw, index) {
        const value = LinearScaleBase.prototype.parse.apply(this, [
            raw,
            index
        ]);
        if (value === 0) {
            this._zero = true;
            return undefined;
        }
        return (0, _helpersSegmentJs.g)(value) && value > 0 ? value : null;
    }
    determineDataLimits() {
        const { min, max } = this.getMinMax(true);
        this.min = (0, _helpersSegmentJs.g)(min) ? Math.max(0, min) : null;
        this.max = (0, _helpersSegmentJs.g)(max) ? Math.max(0, max) : null;
        if (this.options.beginAtZero) this._zero = true;
        if (this._zero && this.min !== this._suggestedMin && !(0, _helpersSegmentJs.g)(this._userMin)) this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);
        this.handleTickRangeOptions();
    }
    handleTickRangeOptions() {
        const { minDefined, maxDefined } = this.getUserBounds();
        let min = this.min;
        let max = this.max;
        const setMin = (v)=>min = minDefined ? min : v;
        const setMax = (v)=>max = maxDefined ? max : v;
        if (min === max) {
            if (min <= 0) {
                setMin(1);
                setMax(10);
            } else {
                setMin(changeExponent(min, -1));
                setMax(changeExponent(max, 1));
            }
        }
        if (min <= 0) setMin(changeExponent(max, -1));
        if (max <= 0) setMax(changeExponent(min, 1));
        this.min = min;
        this.max = max;
    }
    buildTicks() {
        const opts = this.options;
        const generationOptions = {
            min: this._userMin,
            max: this._userMax
        };
        const ticks = generateTicks(generationOptions, this);
        if (opts.bounds === "ticks") (0, _helpersSegmentJs.aG)(ticks, this, "value");
        if (opts.reverse) {
            ticks.reverse();
            this.start = this.max;
            this.end = this.min;
        } else {
            this.start = this.min;
            this.end = this.max;
        }
        return ticks;
    }
    getLabelForValue(value) {
        return value === undefined ? "0" : (0, _helpersSegmentJs.o)(value, this.chart.options.locale, this.options.ticks.format);
    }
    configure() {
        const start = this.min;
        super.configure();
        this._startValue = (0, _helpersSegmentJs.aM)(start);
        this._valueRange = (0, _helpersSegmentJs.aM)(this.max) - (0, _helpersSegmentJs.aM)(start);
    }
    getPixelForValue(value) {
        if (value === undefined || value === 0) value = this.min;
        if (value === null || isNaN(value)) return NaN;
        return this.getPixelForDecimal(value === this.min ? 0 : ((0, _helpersSegmentJs.aM)(value) - this._startValue) / this._valueRange);
    }
    getValueForPixel(pixel) {
        const decimal = this.getDecimalForPixel(pixel);
        return Math.pow(10, this._startValue + decimal * this._valueRange);
    }
}
function getTickBackdropHeight(opts) {
    const tickOpts = opts.ticks;
    if (tickOpts.display && opts.display) {
        const padding = (0, _helpersSegmentJs.E)(tickOpts.backdropPadding);
        return (0, _helpersSegmentJs.v)(tickOpts.font && tickOpts.font.size, (0, _helpersSegmentJs.d).font.size) + padding.height;
    }
    return 0;
}
function measureLabelSize(ctx, font, label) {
    label = (0, _helpersSegmentJs.b)(label) ? label : [
        label
    ];
    return {
        w: (0, _helpersSegmentJs.aN)(ctx, font.string, label),
        h: label.length * font.lineHeight
    };
}
function determineLimits(angle, pos, size, min, max) {
    if (angle === min || angle === max) return {
        start: pos - size / 2,
        end: pos + size / 2
    };
    else if (angle < min || angle > max) return {
        start: pos - size,
        end: pos
    };
    return {
        start: pos,
        end: pos + size
    };
}
function fitWithPointLabels(scale) {
    const orig = {
        l: scale.left + scale._padding.left,
        r: scale.right - scale._padding.right,
        t: scale.top + scale._padding.top,
        b: scale.bottom - scale._padding.bottom
    };
    const limits = Object.assign({}, orig);
    const labelSizes = [];
    const padding = [];
    const valueCount = scale._pointLabels.length;
    const pointLabelOpts = scale.options.pointLabels;
    const additionalAngle = pointLabelOpts.centerPointLabels ? (0, _helpersSegmentJs.P) / valueCount : 0;
    for(let i = 0; i < valueCount; i++){
        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));
        padding[i] = opts.padding;
        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);
        const plFont = (0, _helpersSegmentJs.a0)(opts.font);
        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);
        labelSizes[i] = textSize;
        const angleRadians = (0, _helpersSegmentJs.ay)(scale.getIndexAngle(i) + additionalAngle);
        const angle = Math.round((0, _helpersSegmentJs.U)(angleRadians));
        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
        updateLimits(limits, orig, angleRadians, hLimits, vLimits);
    }
    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);
    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);
}
function updateLimits(limits, orig, angle, hLimits, vLimits) {
    const sin = Math.abs(Math.sin(angle));
    const cos = Math.abs(Math.cos(angle));
    let x = 0;
    let y = 0;
    if (hLimits.start < orig.l) {
        x = (orig.l - hLimits.start) / sin;
        limits.l = Math.min(limits.l, orig.l - x);
    } else if (hLimits.end > orig.r) {
        x = (hLimits.end - orig.r) / sin;
        limits.r = Math.max(limits.r, orig.r + x);
    }
    if (vLimits.start < orig.t) {
        y = (orig.t - vLimits.start) / cos;
        limits.t = Math.min(limits.t, orig.t - y);
    } else if (vLimits.end > orig.b) {
        y = (vLimits.end - orig.b) / cos;
        limits.b = Math.max(limits.b, orig.b + y);
    }
}
function createPointLabelItem(scale, index, itemOpts) {
    const outerDistance = scale.drawingArea;
    const { extra, additionalAngle, padding, size } = itemOpts;
    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);
    const angle = Math.round((0, _helpersSegmentJs.U)((0, _helpersSegmentJs.ay)(pointLabelPosition.angle + (0, _helpersSegmentJs.H))));
    const y = yForAngle(pointLabelPosition.y, size.h, angle);
    const textAlign = getTextAlignForAngle(angle);
    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
    return {
        visible: true,
        x: pointLabelPosition.x,
        y,
        textAlign,
        left,
        top: y,
        right: left + size.w,
        bottom: y + size.h
    };
}
function isNotOverlapped(item, area) {
    if (!area) return true;
    const { left, top, right, bottom } = item;
    const apexesInArea = (0, _helpersSegmentJs.C)({
        x: left,
        y: top
    }, area) || (0, _helpersSegmentJs.C)({
        x: left,
        y: bottom
    }, area) || (0, _helpersSegmentJs.C)({
        x: right,
        y: top
    }, area) || (0, _helpersSegmentJs.C)({
        x: right,
        y: bottom
    }, area);
    return !apexesInArea;
}
function buildPointLabelItems(scale, labelSizes, padding) {
    const items = [];
    const valueCount = scale._pointLabels.length;
    const opts = scale.options;
    const { centerPointLabels, display } = opts.pointLabels;
    const itemOpts = {
        extra: getTickBackdropHeight(opts) / 2,
        additionalAngle: centerPointLabels ? (0, _helpersSegmentJs.P) / valueCount : 0
    };
    let area;
    for(let i = 0; i < valueCount; i++){
        itemOpts.padding = padding[i];
        itemOpts.size = labelSizes[i];
        const item = createPointLabelItem(scale, i, itemOpts);
        items.push(item);
        if (display === "auto") {
            item.visible = isNotOverlapped(item, area);
            if (item.visible) area = item;
        }
    }
    return items;
}
function getTextAlignForAngle(angle) {
    if (angle === 0 || angle === 180) return "center";
    else if (angle < 180) return "left";
    return "right";
}
function leftForTextAlign(x, w, align) {
    if (align === "right") x -= w;
    else if (align === "center") x -= w / 2;
    return x;
}
function yForAngle(y, h, angle) {
    if (angle === 90 || angle === 270) y -= h / 2;
    else if (angle > 270 || angle < 90) y -= h;
    return y;
}
function drawPointLabelBox(ctx, opts, item) {
    const { left, top, right, bottom } = item;
    const { backdropColor } = opts;
    if (!(0, _helpersSegmentJs.k)(backdropColor)) {
        const borderRadius = (0, _helpersSegmentJs.aw)(opts.borderRadius);
        const padding = (0, _helpersSegmentJs.E)(opts.backdropPadding);
        ctx.fillStyle = backdropColor;
        const backdropLeft = left - padding.left;
        const backdropTop = top - padding.top;
        const backdropWidth = right - left + padding.width;
        const backdropHeight = bottom - top + padding.height;
        if (Object.values(borderRadius).some((v)=>v !== 0)) {
            ctx.beginPath();
            (0, _helpersSegmentJs.au)(ctx, {
                x: backdropLeft,
                y: backdropTop,
                w: backdropWidth,
                h: backdropHeight,
                radius: borderRadius
            });
            ctx.fill();
        } else ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
    }
}
function drawPointLabels(scale, labelCount) {
    const { ctx, options: { pointLabels } } = scale;
    for(let i = labelCount - 1; i >= 0; i--){
        const item = scale._pointLabelItems[i];
        if (!item.visible) continue;
        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));
        drawPointLabelBox(ctx, optsAtIndex, item);
        const plFont = (0, _helpersSegmentJs.a0)(optsAtIndex.font);
        const { x, y, textAlign } = item;
        (0, _helpersSegmentJs.Z)(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {
            color: optsAtIndex.color,
            textAlign: textAlign,
            textBaseline: "middle"
        });
    }
}
function pathRadiusLine(scale, radius, circular, labelCount) {
    const { ctx } = scale;
    if (circular) ctx.arc(scale.xCenter, scale.yCenter, radius, 0, (0, _helpersSegmentJs.T));
    else {
        let pointPosition = scale.getPointPosition(0, radius);
        ctx.moveTo(pointPosition.x, pointPosition.y);
        for(let i = 1; i < labelCount; i++){
            pointPosition = scale.getPointPosition(i, radius);
            ctx.lineTo(pointPosition.x, pointPosition.y);
        }
    }
}
function drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {
    const ctx = scale.ctx;
    const circular = gridLineOpts.circular;
    const { color, lineWidth } = gridLineOpts;
    if (!circular && !labelCount || !color || !lineWidth || radius < 0) return;
    ctx.save();
    ctx.strokeStyle = color;
    ctx.lineWidth = lineWidth;
    ctx.setLineDash(borderOpts.dash);
    ctx.lineDashOffset = borderOpts.dashOffset;
    ctx.beginPath();
    pathRadiusLine(scale, radius, circular, labelCount);
    ctx.closePath();
    ctx.stroke();
    ctx.restore();
}
function createPointLabelContext(parent, index, label) {
    return (0, _helpersSegmentJs.j)(parent, {
        label,
        index,
        type: "pointLabel"
    });
}
class RadialLinearScale extends LinearScaleBase {
    static id = "radialLinear";
    static defaults = {
        display: true,
        animate: true,
        position: "chartArea",
        angleLines: {
            display: true,
            lineWidth: 1,
            borderDash: [],
            borderDashOffset: 0.0
        },
        grid: {
            circular: false
        },
        startAngle: 0,
        ticks: {
            showLabelBackdrop: true,
            callback: (0, _helpersSegmentJs.aL).formatters.numeric
        },
        pointLabels: {
            backdropColor: undefined,
            backdropPadding: 2,
            display: true,
            font: {
                size: 10
            },
            callback (label) {
                return label;
            },
            padding: 5,
            centerPointLabels: false
        }
    };
    static defaultRoutes = {
        "angleLines.color": "borderColor",
        "pointLabels.color": "color",
        "ticks.color": "color"
    };
    static descriptors = {
        angleLines: {
            _fallback: "grid"
        }
    };
    constructor(cfg){
        super(cfg);
        this.xCenter = undefined;
        this.yCenter = undefined;
        this.drawingArea = undefined;
        this._pointLabels = [];
        this._pointLabelItems = [];
    }
    setDimensions() {
        const padding = this._padding = (0, _helpersSegmentJs.E)(getTickBackdropHeight(this.options) / 2);
        const w = this.width = this.maxWidth - padding.width;
        const h = this.height = this.maxHeight - padding.height;
        this.xCenter = Math.floor(this.left + w / 2 + padding.left);
        this.yCenter = Math.floor(this.top + h / 2 + padding.top);
        this.drawingArea = Math.floor(Math.min(w, h) / 2);
    }
    determineDataLimits() {
        const { min, max } = this.getMinMax(false);
        this.min = (0, _helpersSegmentJs.g)(min) && !isNaN(min) ? min : 0;
        this.max = (0, _helpersSegmentJs.g)(max) && !isNaN(max) ? max : 0;
        this.handleTickRangeOptions();
    }
    computeTickLimit() {
        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
    }
    generateTickLabels(ticks) {
        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
        this._pointLabels = this.getLabels().map((value, index)=>{
            const label = (0, _helpersSegmentJs.Q)(this.options.pointLabels.callback, [
                value,
                index
            ], this);
            return label || label === 0 ? label : "";
        }).filter((v, i)=>this.chart.getDataVisibility(i));
    }
    fit() {
        const opts = this.options;
        if (opts.display && opts.pointLabels.display) fitWithPointLabels(this);
        else this.setCenterPoint(0, 0, 0, 0);
    }
    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
    }
    getIndexAngle(index) {
        const angleMultiplier = (0, _helpersSegmentJs.T) / (this._pointLabels.length || 1);
        const startAngle = this.options.startAngle || 0;
        return (0, _helpersSegmentJs.ay)(index * angleMultiplier + (0, _helpersSegmentJs.t)(startAngle));
    }
    getDistanceFromCenterForValue(value) {
        if ((0, _helpersSegmentJs.k)(value)) return NaN;
        const scalingFactor = this.drawingArea / (this.max - this.min);
        if (this.options.reverse) return (this.max - value) * scalingFactor;
        return (value - this.min) * scalingFactor;
    }
    getValueForDistanceFromCenter(distance) {
        if ((0, _helpersSegmentJs.k)(distance)) return NaN;
        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));
        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
    }
    getPointLabelContext(index) {
        const pointLabels = this._pointLabels || [];
        if (index >= 0 && index < pointLabels.length) {
            const pointLabel = pointLabels[index];
            return createPointLabelContext(this.getContext(), index, pointLabel);
        }
    }
    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {
        const angle = this.getIndexAngle(index) - (0, _helpersSegmentJs.H) + additionalAngle;
        return {
            x: Math.cos(angle) * distanceFromCenter + this.xCenter,
            y: Math.sin(angle) * distanceFromCenter + this.yCenter,
            angle
        };
    }
    getPointPositionForValue(index, value) {
        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
    }
    getBasePosition(index) {
        return this.getPointPositionForValue(index || 0, this.getBaseValue());
    }
    getPointLabelPosition(index) {
        const { left, top, right, bottom } = this._pointLabelItems[index];
        return {
            left,
            top,
            right,
            bottom
        };
    }
    drawBackground() {
        const { backgroundColor, grid: { circular } } = this.options;
        if (backgroundColor) {
            const ctx = this.ctx;
            ctx.save();
            ctx.beginPath();
            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
            ctx.closePath();
            ctx.fillStyle = backgroundColor;
            ctx.fill();
            ctx.restore();
        }
    }
    drawGrid() {
        const ctx = this.ctx;
        const opts = this.options;
        const { angleLines, grid, border } = opts;
        const labelCount = this._pointLabels.length;
        let i, offset, position;
        if (opts.pointLabels.display) drawPointLabels(this, labelCount);
        if (grid.display) this.ticks.forEach((tick, index)=>{
            if (index !== 0 || index === 0 && this.min < 0) {
                offset = this.getDistanceFromCenterForValue(tick.value);
                const context = this.getContext(index);
                const optsAtIndex = grid.setContext(context);
                const optsAtIndexBorder = border.setContext(context);
                drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);
            }
        });
        if (angleLines.display) {
            ctx.save();
            for(i = labelCount - 1; i >= 0; i--){
                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));
                const { color, lineWidth } = optsAtIndex;
                if (!lineWidth || !color) continue;
                ctx.lineWidth = lineWidth;
                ctx.strokeStyle = color;
                ctx.setLineDash(optsAtIndex.borderDash);
                ctx.lineDashOffset = optsAtIndex.borderDashOffset;
                offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);
                position = this.getPointPosition(i, offset);
                ctx.beginPath();
                ctx.moveTo(this.xCenter, this.yCenter);
                ctx.lineTo(position.x, position.y);
                ctx.stroke();
            }
            ctx.restore();
        }
    }
    drawBorder() {}
    drawLabels() {
        const ctx = this.ctx;
        const opts = this.options;
        const tickOpts = opts.ticks;
        if (!tickOpts.display) return;
        const startAngle = this.getIndexAngle(0);
        let offset, width;
        ctx.save();
        ctx.translate(this.xCenter, this.yCenter);
        ctx.rotate(startAngle);
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        this.ticks.forEach((tick, index)=>{
            if (index === 0 && this.min >= 0 && !opts.reverse) return;
            const optsAtIndex = tickOpts.setContext(this.getContext(index));
            const tickFont = (0, _helpersSegmentJs.a0)(optsAtIndex.font);
            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);
            if (optsAtIndex.showLabelBackdrop) {
                ctx.font = tickFont.string;
                width = ctx.measureText(tick.label).width;
                ctx.fillStyle = optsAtIndex.backdropColor;
                const padding = (0, _helpersSegmentJs.E)(optsAtIndex.backdropPadding);
                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);
            }
            (0, _helpersSegmentJs.Z)(ctx, tick.label, 0, -offset, tickFont, {
                color: optsAtIndex.color,
                strokeColor: optsAtIndex.textStrokeColor,
                strokeWidth: optsAtIndex.textStrokeWidth
            });
        });
        ctx.restore();
    }
    drawTitle() {}
}
const INTERVALS = {
    millisecond: {
        common: true,
        size: 1,
        steps: 1000
    },
    second: {
        common: true,
        size: 1000,
        steps: 60
    },
    minute: {
        common: true,
        size: 60000,
        steps: 60
    },
    hour: {
        common: true,
        size: 3600000,
        steps: 24
    },
    day: {
        common: true,
        size: 86400000,
        steps: 30
    },
    week: {
        common: false,
        size: 604800000,
        steps: 4
    },
    month: {
        common: true,
        size: 2.628e9,
        steps: 12
    },
    quarter: {
        common: false,
        size: 7.884e9,
        steps: 4
    },
    year: {
        common: true,
        size: 3.154e10
    }
};
const UNITS = /* #__PURE__ */ Object.keys(INTERVALS);
function sorter(a, b) {
    return a - b;
}
function parse(scale, input) {
    if ((0, _helpersSegmentJs.k)(input)) return null;
    const adapter = scale._adapter;
    const { parser, round, isoWeekday } = scale._parseOpts;
    let value = input;
    if (typeof parser === "function") value = parser(value);
    if (!(0, _helpersSegmentJs.g)(value)) value = typeof parser === "string" ? adapter.parse(value, parser) : adapter.parse(value);
    if (value === null) return null;
    if (round) value = round === "week" && ((0, _helpersSegmentJs.x)(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, "isoWeek", isoWeekday) : adapter.startOf(value, round);
    return +value;
}
function determineUnitForAutoTicks(minUnit, min, max, capacity) {
    const ilen = UNITS.length;
    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){
        const interval = INTERVALS[UNITS[i]];
        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) return UNITS[i];
    }
    return UNITS[ilen - 1];
}
function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){
        const unit = UNITS[i];
        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) return unit;
    }
    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}
function determineMajorUnit(unit) {
    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){
        if (INTERVALS[UNITS[i]].common) return UNITS[i];
    }
}
function addTick(ticks, time, timestamps) {
    if (!timestamps) ticks[time] = true;
    else if (timestamps.length) {
        const { lo, hi } = (0, _helpersSegmentJs.aP)(timestamps, time);
        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
        ticks[timestamp] = true;
    }
}
function setMajorTicks(scale, ticks, map, majorUnit) {
    const adapter = scale._adapter;
    const first = +adapter.startOf(ticks[0].value, majorUnit);
    const last = ticks[ticks.length - 1].value;
    let major, index;
    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){
        index = map[major];
        if (index >= 0) ticks[index].major = true;
    }
    return ticks;
}
function ticksFromTimestamps(scale, values, majorUnit) {
    const ticks = [];
    const map = {};
    const ilen = values.length;
    let i, value;
    for(i = 0; i < ilen; ++i){
        value = values[i];
        map[value] = i;
        ticks.push({
            value,
            major: false
        });
    }
    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
}
class TimeScale extends Scale {
    static id = "time";
    static defaults = {
        bounds: "data",
        adapters: {},
        time: {
            parser: false,
            unit: false,
            round: false,
            isoWeekday: false,
            minUnit: "millisecond",
            displayFormats: {}
        },
        ticks: {
            source: "auto",
            callback: false,
            major: {
                enabled: false
            }
        }
    };
    constructor(props){
        super(props);
        this._cache = {
            data: [],
            labels: [],
            all: []
        };
        this._unit = "day";
        this._majorUnit = undefined;
        this._offsets = {};
        this._normalized = false;
        this._parseOpts = undefined;
    }
    init(scaleOpts, opts = {}) {
        const time = scaleOpts.time || (scaleOpts.time = {});
        const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
        adapter.init(opts);
        (0, _helpersSegmentJs.ab)(time.displayFormats, adapter.formats());
        this._parseOpts = {
            parser: time.parser,
            round: time.round,
            isoWeekday: time.isoWeekday
        };
        super.init(scaleOpts);
        this._normalized = opts.normalized;
    }
    parse(raw, index) {
        if (raw === undefined) return null;
        return parse(this, raw);
    }
    beforeLayout() {
        super.beforeLayout();
        this._cache = {
            data: [],
            labels: [],
            all: []
        };
    }
    determineDataLimits() {
        const options = this.options;
        const adapter = this._adapter;
        const unit = options.time.unit || "day";
        let { min, max, minDefined, maxDefined } = this.getUserBounds();
        function _applyBounds(bounds) {
            if (!minDefined && !isNaN(bounds.min)) min = Math.min(min, bounds.min);
            if (!maxDefined && !isNaN(bounds.max)) max = Math.max(max, bounds.max);
        }
        if (!minDefined || !maxDefined) {
            _applyBounds(this._getLabelBounds());
            if (options.bounds !== "ticks" || options.ticks.source !== "labels") _applyBounds(this.getMinMax(false));
        }
        min = (0, _helpersSegmentJs.g)(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
        max = (0, _helpersSegmentJs.g)(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
        this.min = Math.min(min, max - 1);
        this.max = Math.max(min + 1, max);
    }
    _getLabelBounds() {
        const arr = this.getLabelTimestamps();
        let min = Number.POSITIVE_INFINITY;
        let max = Number.NEGATIVE_INFINITY;
        if (arr.length) {
            min = arr[0];
            max = arr[arr.length - 1];
        }
        return {
            min,
            max
        };
    }
    buildTicks() {
        const options = this.options;
        const timeOpts = options.time;
        const tickOpts = options.ticks;
        const timestamps = tickOpts.source === "labels" ? this.getLabelTimestamps() : this._generate();
        if (options.bounds === "ticks" && timestamps.length) {
            this.min = this._userMin || timestamps[0];
            this.max = this._userMax || timestamps[timestamps.length - 1];
        }
        const min = this.min;
        const max = this.max;
        const ticks = (0, _helpersSegmentJs.aO)(timestamps, min, max);
        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
        this._majorUnit = !tickOpts.major.enabled || this._unit === "year" ? undefined : determineMajorUnit(this._unit);
        this.initOffsets(timestamps);
        if (options.reverse) ticks.reverse();
        return ticksFromTimestamps(this, ticks, this._majorUnit);
    }
    afterAutoSkip() {
        if (this.options.offsetAfterAutoskip) this.initOffsets(this.ticks.map((tick)=>+tick.value));
    }
    initOffsets(timestamps = []) {
        let start = 0;
        let end = 0;
        let first, last;
        if (this.options.offset && timestamps.length) {
            first = this.getDecimalForValue(timestamps[0]);
            if (timestamps.length === 1) start = 1 - first;
            else start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
            if (timestamps.length === 1) end = last;
            else end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
        }
        const limit = timestamps.length < 3 ? 0.5 : 0.25;
        start = (0, _helpersSegmentJs.S)(start, 0, limit);
        end = (0, _helpersSegmentJs.S)(end, 0, limit);
        this._offsets = {
            start,
            end,
            factor: 1 / (start + 1 + end)
        };
    }
    _generate() {
        const adapter = this._adapter;
        const min = this.min;
        const max = this.max;
        const options = this.options;
        const timeOpts = options.time;
        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
        const stepSize = (0, _helpersSegmentJs.v)(options.ticks.stepSize, 1);
        const weekday = minor === "week" ? timeOpts.isoWeekday : false;
        const hasWeekday = (0, _helpersSegmentJs.x)(weekday) || weekday === true;
        const ticks = {};
        let first = min;
        let time, count;
        if (hasWeekday) first = +adapter.startOf(first, "isoWeek", weekday);
        first = +adapter.startOf(first, hasWeekday ? "day" : minor);
        if (adapter.diff(max, min, minor) > 100000 * stepSize) throw new Error(min + " and " + max + " are too far apart with stepSize of " + stepSize + " " + minor);
        const timestamps = options.ticks.source === "data" && this.getDataTimestamps();
        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++)addTick(ticks, time, timestamps);
        if (time === max || options.bounds === "ticks" || count === 1) addTick(ticks, time, timestamps);
        return Object.keys(ticks).sort(sorter).map((x)=>+x);
    }
    getLabelForValue(value) {
        const adapter = this._adapter;
        const timeOpts = this.options.time;
        if (timeOpts.tooltipFormat) return adapter.format(value, timeOpts.tooltipFormat);
        return adapter.format(value, timeOpts.displayFormats.datetime);
    }
    format(value, format) {
        const options = this.options;
        const formats = options.time.displayFormats;
        const unit = this._unit;
        const fmt = format || formats[unit];
        return this._adapter.format(value, fmt);
    }
    _tickFormatFunction(time, index, ticks, format) {
        const options = this.options;
        const formatter = options.ticks.callback;
        if (formatter) return (0, _helpersSegmentJs.Q)(formatter, [
            time,
            index,
            ticks
        ], this);
        const formats = options.time.displayFormats;
        const unit = this._unit;
        const majorUnit = this._majorUnit;
        const minorFormat = unit && formats[unit];
        const majorFormat = majorUnit && formats[majorUnit];
        const tick = ticks[index];
        const major = majorUnit && majorFormat && tick && tick.major;
        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));
    }
    generateTickLabels(ticks) {
        let i, ilen, tick;
        for(i = 0, ilen = ticks.length; i < ilen; ++i){
            tick = ticks[i];
            tick.label = this._tickFormatFunction(tick.value, i, ticks);
        }
    }
    getDecimalForValue(value) {
        return value === null ? NaN : (value - this.min) / (this.max - this.min);
    }
    getPixelForValue(value) {
        const offsets = this._offsets;
        const pos = this.getDecimalForValue(value);
        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
    }
    getValueForPixel(pixel) {
        const offsets = this._offsets;
        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
        return this.min + pos * (this.max - this.min);
    }
    _getLabelSize(label) {
        const ticksOpts = this.options.ticks;
        const tickLabelWidth = this.ctx.measureText(label).width;
        const angle = (0, _helpersSegmentJs.t)(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
        const cosRotation = Math.cos(angle);
        const sinRotation = Math.sin(angle);
        const tickFontSize = this._resolveTickFontOptions(0).size;
        return {
            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
        };
    }
    _getLabelCapacity(exampleTime) {
        const timeOpts = this.options.time;
        const displayFormats = timeOpts.displayFormats;
        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [
            exampleTime
        ], this._majorUnit), format);
        const size = this._getLabelSize(exampleLabel);
        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
        return capacity > 0 ? capacity : 1;
    }
    getDataTimestamps() {
        let timestamps = this._cache.data || [];
        let i, ilen;
        if (timestamps.length) return timestamps;
        const metas = this.getMatchingVisibleMetas();
        if (this._normalized && metas.length) return this._cache.data = metas[0].controller.getAllParsedValues(this);
        for(i = 0, ilen = metas.length; i < ilen; ++i)timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));
        return this._cache.data = this.normalize(timestamps);
    }
    getLabelTimestamps() {
        const timestamps = this._cache.labels || [];
        let i, ilen;
        if (timestamps.length) return timestamps;
        const labels = this.getLabels();
        for(i = 0, ilen = labels.length; i < ilen; ++i)timestamps.push(parse(this, labels[i]));
        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
    }
    normalize(values) {
        return (0, _helpersSegmentJs._)(values.sort(sorter));
    }
}
function interpolate(table, val, reverse) {
    let lo = 0;
    let hi = table.length - 1;
    let prevSource, nextSource, prevTarget, nextTarget;
    if (reverse) {
        if (val >= table[lo].pos && val <= table[hi].pos) ({ lo, hi } = (0, _helpersSegmentJs.B)(table, "pos", val));
        ({ pos: prevSource, time: prevTarget } = table[lo]);
        ({ pos: nextSource, time: nextTarget } = table[hi]);
    } else {
        if (val >= table[lo].time && val <= table[hi].time) ({ lo, hi } = (0, _helpersSegmentJs.B)(table, "time", val));
        ({ time: prevSource, pos: prevTarget } = table[lo]);
        ({ time: nextSource, pos: nextTarget } = table[hi]);
    }
    const span = nextSource - prevSource;
    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
}
class TimeSeriesScale extends TimeScale {
    static id = "timeseries";
    static defaults = TimeScale.defaults;
    constructor(props){
        super(props);
        this._table = [];
        this._minPos = undefined;
        this._tableRange = undefined;
    }
    initOffsets() {
        const timestamps = this._getTimestampsForTable();
        const table = this._table = this.buildLookupTable(timestamps);
        this._minPos = interpolate(table, this.min);
        this._tableRange = interpolate(table, this.max) - this._minPos;
        super.initOffsets(timestamps);
    }
    buildLookupTable(timestamps) {
        const { min, max } = this;
        const items = [];
        const table = [];
        let i, ilen, prev, curr, next;
        for(i = 0, ilen = timestamps.length; i < ilen; ++i){
            curr = timestamps[i];
            if (curr >= min && curr <= max) items.push(curr);
        }
        if (items.length < 2) return [
            {
                time: min,
                pos: 0
            },
            {
                time: max,
                pos: 1
            }
        ];
        for(i = 0, ilen = items.length; i < ilen; ++i){
            next = items[i + 1];
            prev = items[i - 1];
            curr = items[i];
            if (Math.round((next + prev) / 2) !== curr) table.push({
                time: curr,
                pos: i / (ilen - 1)
            });
        }
        return table;
    }
    _generate() {
        const min = this.min;
        const max = this.max;
        let timestamps = super.getDataTimestamps();
        if (!timestamps.includes(min) || !timestamps.length) timestamps.splice(0, 0, min);
        if (!timestamps.includes(max) || timestamps.length === 1) timestamps.push(max);
        return timestamps.sort((a, b)=>a - b);
    }
    _getTimestampsForTable() {
        let timestamps = this._cache.all || [];
        if (timestamps.length) return timestamps;
        const data = this.getDataTimestamps();
        const label = this.getLabelTimestamps();
        if (data.length && label.length) timestamps = this.normalize(data.concat(label));
        else timestamps = data.length ? data : label;
        timestamps = this._cache.all = timestamps;
        return timestamps;
    }
    getDecimalForValue(value) {
        return (interpolate(this._table, value) - this._minPos) / this._tableRange;
    }
    getValueForPixel(pixel) {
        const offsets = this._offsets;
        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);
    }
}
var scales = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    CategoryScale: CategoryScale,
    LinearScale: LinearScale,
    LogarithmicScale: LogarithmicScale,
    RadialLinearScale: RadialLinearScale,
    TimeScale: TimeScale,
    TimeSeriesScale: TimeSeriesScale
});
const registerables = [
    controllers,
    elements,
    plugins,
    scales
];

},{"./chunks/helpers.segment.js":"7oQuk","@kurkle/color":"2aojw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7oQuk":[function(require,module,exports) {
/*!
 * Chart.js v4.4.4
 * https://www.chartjs.org
 * (c) 2024 Chart.js Contributors
 * Released under the MIT License
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$", ()=>unclipArea);
parcelHelpers.export(exports, "A", ()=>_rlookupByKey);
parcelHelpers.export(exports, "B", ()=>_lookupByKey);
parcelHelpers.export(exports, "C", ()=>_isPointInArea);
parcelHelpers.export(exports, "D", ()=>getAngleFromPoint);
parcelHelpers.export(exports, "E", ()=>toPadding);
parcelHelpers.export(exports, "F", ()=>each);
parcelHelpers.export(exports, "G", ()=>getMaximumSize);
parcelHelpers.export(exports, "H", ()=>HALF_PI);
parcelHelpers.export(exports, "I", ()=>_getParentNode);
parcelHelpers.export(exports, "J", ()=>readUsedSize);
parcelHelpers.export(exports, "K", ()=>supportsEventListenerOptions);
parcelHelpers.export(exports, "L", ()=>throttled);
parcelHelpers.export(exports, "M", ()=>_isDomSupported);
parcelHelpers.export(exports, "N", ()=>_factorize);
parcelHelpers.export(exports, "O", ()=>finiteOrDefault);
parcelHelpers.export(exports, "P", ()=>PI);
parcelHelpers.export(exports, "Q", ()=>callback);
parcelHelpers.export(exports, "R", ()=>_addGrace);
parcelHelpers.export(exports, "S", ()=>_limitValue);
parcelHelpers.export(exports, "T", ()=>TAU);
parcelHelpers.export(exports, "U", ()=>toDegrees);
parcelHelpers.export(exports, "V", ()=>_measureText);
parcelHelpers.export(exports, "W", ()=>_int16Range);
parcelHelpers.export(exports, "X", ()=>_alignPixel);
parcelHelpers.export(exports, "Y", ()=>clipArea);
parcelHelpers.export(exports, "Z", ()=>renderText);
parcelHelpers.export(exports, "_", ()=>_arrayUnique);
parcelHelpers.export(exports, "a", ()=>resolve);
parcelHelpers.export(exports, "a$", ()=>fontString);
parcelHelpers.export(exports, "a0", ()=>toFont);
parcelHelpers.export(exports, "a1", ()=>_toLeftRightCenter);
parcelHelpers.export(exports, "a2", ()=>_alignStartEnd);
parcelHelpers.export(exports, "a3", ()=>overrides);
parcelHelpers.export(exports, "a4", ()=>merge);
parcelHelpers.export(exports, "a5", ()=>_capitalize);
parcelHelpers.export(exports, "a6", ()=>descriptors);
parcelHelpers.export(exports, "a7", ()=>isFunction);
parcelHelpers.export(exports, "a8", ()=>_attachContext);
parcelHelpers.export(exports, "a9", ()=>_createResolver);
parcelHelpers.export(exports, "aA", ()=>overrideTextDirection);
parcelHelpers.export(exports, "aB", ()=>_textX);
parcelHelpers.export(exports, "aC", ()=>restoreTextDirection);
parcelHelpers.export(exports, "aD", ()=>drawPointLegend);
parcelHelpers.export(exports, "aE", ()=>distanceBetweenPoints);
parcelHelpers.export(exports, "aF", ()=>noop);
parcelHelpers.export(exports, "aG", ()=>_setMinAndMaxByKey);
parcelHelpers.export(exports, "aH", ()=>niceNum);
parcelHelpers.export(exports, "aI", ()=>almostWhole);
parcelHelpers.export(exports, "aJ", ()=>almostEquals);
parcelHelpers.export(exports, "aK", ()=>_decimalPlaces);
parcelHelpers.export(exports, "aL", ()=>Ticks);
parcelHelpers.export(exports, "aM", ()=>log10);
parcelHelpers.export(exports, "aN", ()=>_longestText);
parcelHelpers.export(exports, "aO", ()=>_filterBetween);
parcelHelpers.export(exports, "aP", ()=>_lookup);
parcelHelpers.export(exports, "aQ", ()=>isPatternOrGradient);
parcelHelpers.export(exports, "aR", ()=>getHoverColor);
parcelHelpers.export(exports, "aS", ()=>clone);
parcelHelpers.export(exports, "aT", ()=>_merger);
parcelHelpers.export(exports, "aU", ()=>_mergerIf);
parcelHelpers.export(exports, "aV", ()=>_deprecated);
parcelHelpers.export(exports, "aW", ()=>_splitKey);
parcelHelpers.export(exports, "aX", ()=>toFontString);
parcelHelpers.export(exports, "aY", ()=>splineCurve);
parcelHelpers.export(exports, "aZ", ()=>splineCurveMonotone);
parcelHelpers.export(exports, "a_", ()=>getStyle);
parcelHelpers.export(exports, "aa", ()=>_descriptors);
parcelHelpers.export(exports, "ab", ()=>mergeIf);
parcelHelpers.export(exports, "ac", ()=>uid);
parcelHelpers.export(exports, "ad", ()=>debounce);
parcelHelpers.export(exports, "ae", ()=>retinaScale);
parcelHelpers.export(exports, "af", ()=>clearCanvas);
parcelHelpers.export(exports, "ag", ()=>setsEqual);
parcelHelpers.export(exports, "ah", ()=>_elementsEqual);
parcelHelpers.export(exports, "ai", ()=>_isClickEvent);
parcelHelpers.export(exports, "aj", ()=>_isBetween);
parcelHelpers.export(exports, "ak", ()=>_readValueToProps);
parcelHelpers.export(exports, "al", ()=>_updateBezierControlPoints);
parcelHelpers.export(exports, "am", ()=>_computeSegments);
parcelHelpers.export(exports, "an", ()=>_boundSegments);
parcelHelpers.export(exports, "ao", ()=>_steppedInterpolation);
parcelHelpers.export(exports, "ap", ()=>_bezierInterpolation);
parcelHelpers.export(exports, "aq", ()=>_pointInLine);
parcelHelpers.export(exports, "ar", ()=>_steppedLineTo);
parcelHelpers.export(exports, "as", ()=>_bezierCurveTo);
parcelHelpers.export(exports, "at", ()=>drawPoint);
parcelHelpers.export(exports, "au", ()=>addRoundedRectPath);
parcelHelpers.export(exports, "av", ()=>toTRBL);
parcelHelpers.export(exports, "aw", ()=>toTRBLCorners);
parcelHelpers.export(exports, "ax", ()=>_boundSegment);
parcelHelpers.export(exports, "ay", ()=>_normalizeAngle);
parcelHelpers.export(exports, "az", ()=>getRtlAdapter);
parcelHelpers.export(exports, "b", ()=>isArray);
parcelHelpers.export(exports, "b0", ()=>toLineHeight);
parcelHelpers.export(exports, "b1", ()=>PITAU);
parcelHelpers.export(exports, "b2", ()=>INFINITY);
parcelHelpers.export(exports, "b3", ()=>RAD_PER_DEG);
parcelHelpers.export(exports, "b4", ()=>QUARTER_PI);
parcelHelpers.export(exports, "b5", ()=>TWO_THIRDS_PI);
parcelHelpers.export(exports, "b6", ()=>_angleDiff);
parcelHelpers.export(exports, "c", ()=>color);
parcelHelpers.export(exports, "d", ()=>defaults);
parcelHelpers.export(exports, "e", ()=>effects);
parcelHelpers.export(exports, "f", ()=>resolveObjectKey);
parcelHelpers.export(exports, "g", ()=>isNumberFinite);
parcelHelpers.export(exports, "h", ()=>defined);
parcelHelpers.export(exports, "i", ()=>isObject);
parcelHelpers.export(exports, "j", ()=>createContext);
parcelHelpers.export(exports, "k", ()=>isNullOrUndef);
parcelHelpers.export(exports, "l", ()=>listenArrayEvents);
parcelHelpers.export(exports, "m", ()=>toPercentage);
parcelHelpers.export(exports, "n", ()=>toDimension);
parcelHelpers.export(exports, "o", ()=>formatNumber);
parcelHelpers.export(exports, "p", ()=>_angleBetween);
parcelHelpers.export(exports, "q", ()=>_getStartAndCountOfVisiblePoints);
parcelHelpers.export(exports, "r", ()=>requestAnimFrame);
parcelHelpers.export(exports, "s", ()=>sign);
parcelHelpers.export(exports, "t", ()=>toRadians);
parcelHelpers.export(exports, "u", ()=>unlistenArrayEvents);
parcelHelpers.export(exports, "v", ()=>valueOrDefault);
parcelHelpers.export(exports, "w", ()=>_scaleRangesChanged);
parcelHelpers.export(exports, "x", ()=>isNumber);
parcelHelpers.export(exports, "y", ()=>_parseObjectDataRadialScale);
parcelHelpers.export(exports, "z", ()=>getRelativePosition);
var _color = require("@kurkle/color");
/**
 * @namespace Chart.helpers
 */ /**
 * An empty function that can be used, for example, for optional callback.
 */ function noop() {
/* noop */ }
/**
 * Returns a unique id, sequentially generated from a global variable.
 */ const uid = (()=>{
    let id = 0;
    return ()=>id++;
})();
/**
 * Returns true if `value` is neither null nor undefined, else returns false.
 * @param value - The value to test.
 * @since 2.7.0
 */ function isNullOrUndef(value) {
    return value === null || typeof value === "undefined";
}
/**
 * Returns true if `value` is an array (including typed arrays), else returns false.
 * @param value - The value to test.
 * @function
 */ function isArray(value) {
    if (Array.isArray && Array.isArray(value)) return true;
    const type = Object.prototype.toString.call(value);
    if (type.slice(0, 7) === "[object" && type.slice(-6) === "Array]") return true;
    return false;
}
/**
 * Returns true if `value` is an object (excluding null), else returns false.
 * @param value - The value to test.
 * @since 2.7.0
 */ function isObject(value) {
    return value !== null && Object.prototype.toString.call(value) === "[object Object]";
}
/**
 * Returns true if `value` is a finite number, else returns false
 * @param value  - The value to test.
 */ function isNumberFinite(value) {
    return (typeof value === "number" || value instanceof Number) && isFinite(+value);
}
/**
 * Returns `value` if finite, else returns `defaultValue`.
 * @param value - The value to return if defined.
 * @param defaultValue - The value to return if `value` is not finite.
 */ function finiteOrDefault(value, defaultValue) {
    return isNumberFinite(value) ? value : defaultValue;
}
/**
 * Returns `value` if defined, else returns `defaultValue`.
 * @param value - The value to return if defined.
 * @param defaultValue - The value to return if `value` is undefined.
 */ function valueOrDefault(value, defaultValue) {
    return typeof value === "undefined" ? defaultValue : value;
}
const toPercentage = (value, dimension)=>typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 : +value / dimension;
const toDimension = (value, dimension)=>typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 * dimension : +value;
/**
 * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
 * value returned by `fn`. If `fn` is not a function, this method returns undefined.
 * @param fn - The function to call.
 * @param args - The arguments with which `fn` should be called.
 * @param [thisArg] - The value of `this` provided for the call to `fn`.
 */ function callback(fn, args, thisArg) {
    if (fn && typeof fn.call === "function") return fn.apply(thisArg, args);
}
function each(loopable, fn, thisArg, reverse) {
    let i, len, keys;
    if (isArray(loopable)) {
        len = loopable.length;
        if (reverse) for(i = len - 1; i >= 0; i--)fn.call(thisArg, loopable[i], i);
        else for(i = 0; i < len; i++)fn.call(thisArg, loopable[i], i);
    } else if (isObject(loopable)) {
        keys = Object.keys(loopable);
        len = keys.length;
        for(i = 0; i < len; i++)fn.call(thisArg, loopable[keys[i]], keys[i]);
    }
}
/**
 * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
 * @param a0 - The array to compare
 * @param a1 - The array to compare
 * @private
 */ function _elementsEqual(a0, a1) {
    let i, ilen, v0, v1;
    if (!a0 || !a1 || a0.length !== a1.length) return false;
    for(i = 0, ilen = a0.length; i < ilen; ++i){
        v0 = a0[i];
        v1 = a1[i];
        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) return false;
    }
    return true;
}
/**
 * Returns a deep copy of `source` without keeping references on objects and arrays.
 * @param source - The value to clone.
 */ function clone(source) {
    if (isArray(source)) return source.map(clone);
    if (isObject(source)) {
        const target = Object.create(null);
        const keys = Object.keys(source);
        const klen = keys.length;
        let k = 0;
        for(; k < klen; ++k)target[keys[k]] = clone(source[keys[k]]);
        return target;
    }
    return source;
}
function isValidKey(key) {
    return [
        "__proto__",
        "prototype",
        "constructor"
    ].indexOf(key) === -1;
}
/**
 * The default merger when Chart.helpers.merge is called without merger option.
 * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
 * @private
 */ function _merger(key, target, source, options) {
    if (!isValidKey(key)) return;
    const tval = target[key];
    const sval = source[key];
    if (isObject(tval) && isObject(sval)) // eslint-disable-next-line @typescript-eslint/no-use-before-define
    merge(tval, sval, options);
    else target[key] = clone(sval);
}
function merge(target, source, options) {
    const sources = isArray(source) ? source : [
        source
    ];
    const ilen = sources.length;
    if (!isObject(target)) return target;
    options = options || {};
    const merger = options.merger || _merger;
    let current;
    for(let i = 0; i < ilen; ++i){
        current = sources[i];
        if (!isObject(current)) continue;
        const keys = Object.keys(current);
        for(let k = 0, klen = keys.length; k < klen; ++k)merger(keys[k], target, current, options);
    }
    return target;
}
function mergeIf(target, source) {
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    return merge(target, source, {
        merger: _mergerIf
    });
}
/**
 * Merges source[key] in target[key] only if target[key] is undefined.
 * @private
 */ function _mergerIf(key, target, source) {
    if (!isValidKey(key)) return;
    const tval = target[key];
    const sval = source[key];
    if (isObject(tval) && isObject(sval)) mergeIf(tval, sval);
    else if (!Object.prototype.hasOwnProperty.call(target, key)) target[key] = clone(sval);
}
/**
 * @private
 */ function _deprecated(scope, value, previous, current) {
    if (value !== undefined) console.warn(scope + ': "' + previous + '" is deprecated. Please use "' + current + '" instead');
}
// resolveObjectKey resolver cache
const keyResolvers = {
    // Chart.helpers.core resolveObjectKey should resolve empty key to root object
    "": (v)=>v,
    // default resolvers
    x: (o)=>o.x,
    y: (o)=>o.y
};
/**
 * @private
 */ function _splitKey(key) {
    const parts = key.split(".");
    const keys = [];
    let tmp = "";
    for (const part of parts){
        tmp += part;
        if (tmp.endsWith("\\")) tmp = tmp.slice(0, -1) + ".";
        else {
            keys.push(tmp);
            tmp = "";
        }
    }
    return keys;
}
function _getKeyResolver(key) {
    const keys = _splitKey(key);
    return (obj)=>{
        for (const k of keys){
            if (k === "") break;
            obj = obj && obj[k];
        }
        return obj;
    };
}
function resolveObjectKey(obj, key) {
    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));
    return resolver(obj);
}
/**
 * @private
 */ function _capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
const defined = (value)=>typeof value !== "undefined";
const isFunction = (value)=>typeof value === "function";
// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384
const setsEqual = (a, b)=>{
    if (a.size !== b.size) return false;
    for (const item of a){
        if (!b.has(item)) return false;
    }
    return true;
};
/**
 * @param e - The event
 * @private
 */ function _isClickEvent(e) {
    return e.type === "mouseup" || e.type === "click" || e.type === "contextmenu";
}
/**
 * @alias Chart.helpers.math
 * @namespace
 */ const PI = Math.PI;
const TAU = 2 * PI;
const PITAU = TAU + PI;
const INFINITY = Number.POSITIVE_INFINITY;
const RAD_PER_DEG = PI / 180;
const HALF_PI = PI / 2;
const QUARTER_PI = PI / 4;
const TWO_THIRDS_PI = PI * 2 / 3;
const log10 = Math.log10;
const sign = Math.sign;
function almostEquals(x, y, epsilon) {
    return Math.abs(x - y) < epsilon;
}
/**
 * Implementation of the nice number algorithm used in determining where axis labels will go
 */ function niceNum(range) {
    const roundedRange = Math.round(range);
    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;
    const niceRange = Math.pow(10, Math.floor(log10(range)));
    const fraction = range / niceRange;
    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
    return niceFraction * niceRange;
}
/**
 * Returns an array of factors sorted from 1 to sqrt(value)
 * @private
 */ function _factorize(value) {
    const result = [];
    const sqrt = Math.sqrt(value);
    let i;
    for(i = 1; i < sqrt; i++)if (value % i === 0) {
        result.push(i);
        result.push(value / i);
    }
    if (sqrt === (sqrt | 0)) result.push(sqrt);
    result.sort((a, b)=>a - b).pop();
    return result;
}
function isNumber(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}
function almostWhole(x, epsilon) {
    const rounded = Math.round(x);
    return rounded - epsilon <= x && rounded + epsilon >= x;
}
/**
 * @private
 */ function _setMinAndMaxByKey(array, target, property) {
    let i, ilen, value;
    for(i = 0, ilen = array.length; i < ilen; i++){
        value = array[i][property];
        if (!isNaN(value)) {
            target.min = Math.min(target.min, value);
            target.max = Math.max(target.max, value);
        }
    }
}
function toRadians(degrees) {
    return degrees * (PI / 180);
}
function toDegrees(radians) {
    return radians * (180 / PI);
}
/**
 * Returns the number of decimal places
 * i.e. the number of digits after the decimal point, of the value of this Number.
 * @param x - A number.
 * @returns The number of decimal places.
 * @private
 */ function _decimalPlaces(x) {
    if (!isNumberFinite(x)) return;
    let e = 1;
    let p = 0;
    while(Math.round(x * e) / e !== x){
        e *= 10;
        p++;
    }
    return p;
}
// Gets the angle from vertical upright to the point about a centre.
function getAngleFromPoint(centrePoint, anglePoint) {
    const distanceFromXCenter = anglePoint.x - centrePoint.x;
    const distanceFromYCenter = anglePoint.y - centrePoint.y;
    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
    if (angle < -0.5 * PI) angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
    return {
        angle,
        distance: radialDistanceFromCenter
    };
}
function distanceBetweenPoints(pt1, pt2) {
    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
}
/**
 * Shortest distance between angles, in either direction.
 * @private
 */ function _angleDiff(a, b) {
    return (a - b + PITAU) % TAU - PI;
}
/**
 * Normalize angle to be between 0 and 2*PI
 * @private
 */ function _normalizeAngle(a) {
    return (a % TAU + TAU) % TAU;
}
/**
 * @private
 */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
    const a = _normalizeAngle(angle);
    const s = _normalizeAngle(start);
    const e = _normalizeAngle(end);
    const angleToStart = _normalizeAngle(s - a);
    const angleToEnd = _normalizeAngle(e - a);
    const startToAngle = _normalizeAngle(a - s);
    const endToAngle = _normalizeAngle(a - e);
    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;
}
/**
 * Limit `value` between `min` and `max`
 * @param value
 * @param min
 * @param max
 * @private
 */ function _limitValue(value, min, max) {
    return Math.max(min, Math.min(max, value));
}
/**
 * @param {number} value
 * @private
 */ function _int16Range(value) {
    return _limitValue(value, -32768, 32767);
}
/**
 * @param value
 * @param start
 * @param end
 * @param [epsilon]
 * @private
 */ function _isBetween(value, start, end, epsilon = 1e-6) {
    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
}
function _lookup(table, value, cmp) {
    cmp = cmp || ((index)=>table[index] < value);
    let hi = table.length - 1;
    let lo = 0;
    let mid;
    while(hi - lo > 1){
        mid = lo + hi >> 1;
        if (cmp(mid)) lo = mid;
        else hi = mid;
    }
    return {
        lo,
        hi
    };
}
/**
 * Binary search
 * @param table - the table search. must be sorted!
 * @param key - property name for the value in each entry
 * @param value - value to find
 * @param last - lookup last index
 * @private
 */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{
        const ti = table[index][key];
        return ti < value || ti === value && table[index + 1][key] === value;
    } : (index)=>table[index][key] < value);
/**
 * Reverse binary search
 * @param table - the table search. must be sorted!
 * @param key - property name for the value in each entry
 * @param value - value to find
 * @private
 */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);
/**
 * Return subset of `values` between `min` and `max` inclusive.
 * Values are assumed to be in sorted order.
 * @param values - sorted array of values
 * @param min - min value
 * @param max - max value
 */ function _filterBetween(values, min, max) {
    let start = 0;
    let end = values.length;
    while(start < end && values[start] < min)start++;
    while(end > start && values[end - 1] > max)end--;
    return start > 0 || end < values.length ? values.slice(start, end) : values;
}
const arrayEvents = [
    "push",
    "pop",
    "shift",
    "splice",
    "unshift"
];
function listenArrayEvents(array, listener) {
    if (array._chartjs) {
        array._chartjs.listeners.push(listener);
        return;
    }
    Object.defineProperty(array, "_chartjs", {
        configurable: true,
        enumerable: false,
        value: {
            listeners: [
                listener
            ]
        }
    });
    arrayEvents.forEach((key)=>{
        const method = "_onData" + _capitalize(key);
        const base = array[key];
        Object.defineProperty(array, key, {
            configurable: true,
            enumerable: false,
            value (...args) {
                const res = base.apply(this, args);
                array._chartjs.listeners.forEach((object)=>{
                    if (typeof object[method] === "function") object[method](...args);
                });
                return res;
            }
        });
    });
}
function unlistenArrayEvents(array, listener) {
    const stub = array._chartjs;
    if (!stub) return;
    const listeners = stub.listeners;
    const index = listeners.indexOf(listener);
    if (index !== -1) listeners.splice(index, 1);
    if (listeners.length > 0) return;
    arrayEvents.forEach((key)=>{
        delete array[key];
    });
    delete array._chartjs;
}
/**
 * @param items
 */ function _arrayUnique(items) {
    const set = new Set(items);
    if (set.size === items.length) return items;
    return Array.from(set);
}
function fontString(pixelSize, fontStyle, fontFamily) {
    return fontStyle + " " + pixelSize + "px " + fontFamily;
}
/**
* Request animation polyfill
*/ const requestAnimFrame = function() {
    if (typeof window === "undefined") return function(callback) {
        return callback();
    };
    return window.requestAnimationFrame;
}();
/**
 * Throttles calling `fn` once per animation frame
 * Latest arguments are used on the actual call
 */ function throttled(fn, thisArg) {
    let argsToUse = [];
    let ticking = false;
    return function(...args) {
        // Save the args for use later
        argsToUse = args;
        if (!ticking) {
            ticking = true;
            requestAnimFrame.call(window, ()=>{
                ticking = false;
                fn.apply(thisArg, argsToUse);
            });
        }
    };
}
/**
 * Debounces calling `fn` for `delay` ms
 */ function debounce(fn, delay) {
    let timeout;
    return function(...args) {
        if (delay) {
            clearTimeout(timeout);
            timeout = setTimeout(fn, delay, args);
        } else fn.apply(this, args);
        return delay;
    };
}
/**
 * Converts 'start' to 'left', 'end' to 'right' and others to 'center'
 * @private
 */ const _toLeftRightCenter = (align)=>align === "start" ? "left" : align === "end" ? "right" : "center";
/**
 * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`
 * @private
 */ const _alignStartEnd = (align, start, end)=>align === "start" ? start : align === "end" ? end : (start + end) / 2;
/**
 * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`
 * @private
 */ const _textX = (align, left, right, rtl)=>{
    const check = rtl ? "left" : "right";
    return align === check ? right : align === "center" ? (left + right) / 2 : left;
};
/**
 * Return start and count of visible points.
 * @private
 */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
    const pointCount = points.length;
    let start = 0;
    let count = pointCount;
    if (meta._sorted) {
        const { iScale, _parsed } = meta;
        const axis = iScale.axis;
        const { min, max, minDefined, maxDefined } = iScale.getUserBounds();
        if (minDefined) start = _limitValue(Math.min(_lookupByKey(_parsed, axis, min).lo, animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);
        if (maxDefined) count = _limitValue(Math.max(_lookupByKey(_parsed, iScale.axis, max, true).hi + 1, animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;
        else count = pointCount - start;
    }
    return {
        start,
        count
    };
}
/**
 * Checks if the scale ranges have changed.
 * @param {object} meta - dataset meta.
 * @returns {boolean}
 * @private
 */ function _scaleRangesChanged(meta) {
    const { xScale, yScale, _scaleRanges } = meta;
    const newRanges = {
        xmin: xScale.min,
        xmax: xScale.max,
        ymin: yScale.min,
        ymax: yScale.max
    };
    if (!_scaleRanges) {
        meta._scaleRanges = newRanges;
        return true;
    }
    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
    Object.assign(_scaleRanges, newRanges);
    return changed;
}
const atEdge = (t)=>t === 0 || t === 1;
const elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));
const elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;
/**
 * Easing functions adapted from Robert Penner's easing equations.
 * @namespace Chart.helpers.easing.effects
 * @see http://www.robertpenner.com/easing/
 */ const effects = {
    linear: (t)=>t,
    easeInQuad: (t)=>t * t,
    easeOutQuad: (t)=>-t * (t - 2),
    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),
    easeInCubic: (t)=>t * t * t,
    easeOutCubic: (t)=>(t -= 1) * t * t + 1,
    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),
    easeInQuart: (t)=>t * t * t * t,
    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),
    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),
    easeInQuint: (t)=>t * t * t * t * t,
    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,
    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),
    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,
    easeOutSine: (t)=>Math.sin(t * HALF_PI),
    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),
    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),
    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,
    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),
    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),
    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),
    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),
    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),
    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),
    easeInOutElastic (t) {
        const s = 0.1125;
        const p = 0.45;
        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);
    },
    easeInBack (t) {
        const s = 1.70158;
        return t * t * ((s + 1) * t - s);
    },
    easeOutBack (t) {
        const s = 1.70158;
        return (t -= 1) * t * ((s + 1) * t + s) + 1;
    },
    easeInOutBack (t) {
        let s = 1.70158;
        if ((t /= 0.5) < 1) return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
    },
    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),
    easeOutBounce (t) {
        const m = 7.5625;
        const d = 2.75;
        if (t < 1 / d) return m * t * t;
        if (t < 2 / d) return m * (t -= 1.5 / d) * t + 0.75;
        if (t < 2.5 / d) return m * (t -= 2.25 / d) * t + 0.9375;
        return m * (t -= 2.625 / d) * t + 0.984375;
    },
    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5
};
function isPatternOrGradient(value) {
    if (value && typeof value === "object") {
        const type = value.toString();
        return type === "[object CanvasPattern]" || type === "[object CanvasGradient]";
    }
    return false;
}
function color(value) {
    return isPatternOrGradient(value) ? value : new (0, _color.Color)(value);
}
function getHoverColor(value) {
    return isPatternOrGradient(value) ? value : new (0, _color.Color)(value).saturate(0.5).darken(0.1).hexString();
}
const numbers = [
    "x",
    "y",
    "borderWidth",
    "radius",
    "tension"
];
const colors = [
    "color",
    "borderColor",
    "backgroundColor"
];
function applyAnimationsDefaults(defaults) {
    defaults.set("animation", {
        delay: undefined,
        duration: 1000,
        easing: "easeOutQuart",
        fn: undefined,
        from: undefined,
        loop: undefined,
        to: undefined,
        type: undefined
    });
    defaults.describe("animation", {
        _fallback: false,
        _indexable: false,
        _scriptable: (name)=>name !== "onProgress" && name !== "onComplete" && name !== "fn"
    });
    defaults.set("animations", {
        colors: {
            type: "color",
            properties: colors
        },
        numbers: {
            type: "number",
            properties: numbers
        }
    });
    defaults.describe("animations", {
        _fallback: "animation"
    });
    defaults.set("transitions", {
        active: {
            animation: {
                duration: 400
            }
        },
        resize: {
            animation: {
                duration: 0
            }
        },
        show: {
            animations: {
                colors: {
                    from: "transparent"
                },
                visible: {
                    type: "boolean",
                    duration: 0
                }
            }
        },
        hide: {
            animations: {
                colors: {
                    to: "transparent"
                },
                visible: {
                    type: "boolean",
                    easing: "linear",
                    fn: (v)=>v | 0
                }
            }
        }
    });
}
function applyLayoutsDefaults(defaults) {
    defaults.set("layout", {
        autoPadding: true,
        padding: {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
        }
    });
}
const intlCache = new Map();
function getNumberFormat(locale, options) {
    options = options || {};
    const cacheKey = locale + JSON.stringify(options);
    let formatter = intlCache.get(cacheKey);
    if (!formatter) {
        formatter = new Intl.NumberFormat(locale, options);
        intlCache.set(cacheKey, formatter);
    }
    return formatter;
}
function formatNumber(num, locale, options) {
    return getNumberFormat(locale, options).format(num);
}
const formatters = {
    values (value) {
        return isArray(value) ? value : "" + value;
    },
    numeric (tickValue, index, ticks) {
        if (tickValue === 0) return "0";
        const locale = this.chart.options.locale;
        let notation;
        let delta = tickValue;
        if (ticks.length > 1) {
            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
            if (maxTick < 1e-4 || maxTick > 1e+15) notation = "scientific";
            delta = calculateDelta(tickValue, ticks);
        }
        const logDelta = log10(Math.abs(delta));
        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
        const options = {
            notation,
            minimumFractionDigits: numDecimal,
            maximumFractionDigits: numDecimal
        };
        Object.assign(options, this.options.ticks.format);
        return formatNumber(tickValue, locale, options);
    },
    logarithmic (tickValue, index, ticks) {
        if (tickValue === 0) return "0";
        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));
        if ([
            1,
            2,
            3,
            5,
            10,
            15
        ].includes(remain) || index > 0.8 * ticks.length) return formatters.numeric.call(this, tickValue, index, ticks);
        return "";
    }
};
function calculateDelta(tickValue, ticks) {
    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) delta = tickValue - Math.floor(tickValue);
    return delta;
}
var Ticks = {
    formatters
};
function applyScaleDefaults(defaults) {
    defaults.set("scale", {
        display: true,
        offset: false,
        reverse: false,
        beginAtZero: false,
        bounds: "ticks",
        clip: true,
        grace: 0,
        grid: {
            display: true,
            lineWidth: 1,
            drawOnChartArea: true,
            drawTicks: true,
            tickLength: 8,
            tickWidth: (_ctx, options)=>options.lineWidth,
            tickColor: (_ctx, options)=>options.color,
            offset: false
        },
        border: {
            display: true,
            dash: [],
            dashOffset: 0.0,
            width: 1
        },
        title: {
            display: false,
            text: "",
            padding: {
                top: 4,
                bottom: 4
            }
        },
        ticks: {
            minRotation: 0,
            maxRotation: 50,
            mirror: false,
            textStrokeWidth: 0,
            textStrokeColor: "",
            padding: 3,
            display: true,
            autoSkip: true,
            autoSkipPadding: 3,
            labelOffset: 0,
            callback: Ticks.formatters.values,
            minor: {},
            major: {},
            align: "center",
            crossAlign: "near",
            showLabelBackdrop: false,
            backdropColor: "rgba(255, 255, 255, 0.75)",
            backdropPadding: 2
        }
    });
    defaults.route("scale.ticks", "color", "", "color");
    defaults.route("scale.grid", "color", "", "borderColor");
    defaults.route("scale.border", "color", "", "borderColor");
    defaults.route("scale.title", "color", "", "color");
    defaults.describe("scale", {
        _fallback: false,
        _scriptable: (name)=>!name.startsWith("before") && !name.startsWith("after") && name !== "callback" && name !== "parser",
        _indexable: (name)=>name !== "borderDash" && name !== "tickBorderDash" && name !== "dash"
    });
    defaults.describe("scales", {
        _fallback: "scale"
    });
    defaults.describe("scale.ticks", {
        _scriptable: (name)=>name !== "backdropPadding" && name !== "callback",
        _indexable: (name)=>name !== "backdropPadding"
    });
}
const overrides = Object.create(null);
const descriptors = Object.create(null);
function getScope$1(node, key) {
    if (!key) return node;
    const keys = key.split(".");
    for(let i = 0, n = keys.length; i < n; ++i){
        const k = keys[i];
        node = node[k] || (node[k] = Object.create(null));
    }
    return node;
}
function set(root, scope, values) {
    if (typeof scope === "string") return merge(getScope$1(root, scope), values);
    return merge(getScope$1(root, ""), scope);
}
class Defaults {
    constructor(_descriptors, _appliers){
        this.animation = undefined;
        this.backgroundColor = "rgba(0,0,0,0.1)";
        this.borderColor = "rgba(0,0,0,0.1)";
        this.color = "#666";
        this.datasets = {};
        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();
        this.elements = {};
        this.events = [
            "mousemove",
            "mouseout",
            "click",
            "touchstart",
            "touchmove"
        ];
        this.font = {
            family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
            size: 12,
            style: "normal",
            lineHeight: 1.2,
            weight: null
        };
        this.hover = {};
        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);
        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);
        this.hoverColor = (ctx, options)=>getHoverColor(options.color);
        this.indexAxis = "x";
        this.interaction = {
            mode: "nearest",
            intersect: true,
            includeInvisible: false
        };
        this.maintainAspectRatio = true;
        this.onHover = null;
        this.onClick = null;
        this.parsing = true;
        this.plugins = {};
        this.responsive = true;
        this.scale = undefined;
        this.scales = {};
        this.showLine = true;
        this.drawActiveElementsOnTop = true;
        this.describe(_descriptors);
        this.apply(_appliers);
    }
    set(scope, values) {
        return set(this, scope, values);
    }
    get(scope) {
        return getScope$1(this, scope);
    }
    describe(scope, values) {
        return set(descriptors, scope, values);
    }
    override(scope, values) {
        return set(overrides, scope, values);
    }
    route(scope, name, targetScope, targetName) {
        const scopeObject = getScope$1(this, scope);
        const targetScopeObject = getScope$1(this, targetScope);
        const privateName = "_" + name;
        Object.defineProperties(scopeObject, {
            [privateName]: {
                value: scopeObject[name],
                writable: true
            },
            [name]: {
                enumerable: true,
                get () {
                    const local = this[privateName];
                    const target = targetScopeObject[targetName];
                    if (isObject(local)) return Object.assign({}, target, local);
                    return valueOrDefault(local, target);
                },
                set (value) {
                    this[privateName] = value;
                }
            }
        });
    }
    apply(appliers) {
        appliers.forEach((apply)=>apply(this));
    }
}
var defaults = /* #__PURE__ */ new Defaults({
    _scriptable: (name)=>!name.startsWith("on"),
    _indexable: (name)=>name !== "events",
    hover: {
        _fallback: "interaction"
    },
    interaction: {
        _scriptable: false,
        _indexable: false
    }
}, [
    applyAnimationsDefaults,
    applyLayoutsDefaults,
    applyScaleDefaults
]);
/**
 * Converts the given font object into a CSS font string.
 * @param font - A font object.
 * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
 * @private
 */ function toFontString(font) {
    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) return null;
    return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
}
/**
 * @private
 */ function _measureText(ctx, data, gc, longest, string) {
    let textWidth = data[string];
    if (!textWidth) {
        textWidth = data[string] = ctx.measureText(string).width;
        gc.push(string);
    }
    if (textWidth > longest) longest = textWidth;
    return longest;
}
/**
 * @private
 */ // eslint-disable-next-line complexity
function _longestText(ctx, font, arrayOfThings, cache) {
    cache = cache || {};
    let data = cache.data = cache.data || {};
    let gc = cache.garbageCollect = cache.garbageCollect || [];
    if (cache.font !== font) {
        data = cache.data = {};
        gc = cache.garbageCollect = [];
        cache.font = font;
    }
    ctx.save();
    ctx.font = font;
    let longest = 0;
    const ilen = arrayOfThings.length;
    let i, j, jlen, thing, nestedThing;
    for(i = 0; i < ilen; i++){
        thing = arrayOfThings[i];
        // Undefined strings and arrays should not be measured
        if (thing !== undefined && thing !== null && !isArray(thing)) longest = _measureText(ctx, data, gc, longest, thing);
        else if (isArray(thing)) // if it is an array lets measure each element
        // to do maybe simplify this function a bit so we can do this more recursively?
        for(j = 0, jlen = thing.length; j < jlen; j++){
            nestedThing = thing[j];
            // Undefined strings and arrays should not be measured
            if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) longest = _measureText(ctx, data, gc, longest, nestedThing);
        }
    }
    ctx.restore();
    const gcLen = gc.length / 2;
    if (gcLen > arrayOfThings.length) {
        for(i = 0; i < gcLen; i++)delete data[gc[i]];
        gc.splice(0, gcLen);
    }
    return longest;
}
/**
 * Returns the aligned pixel value to avoid anti-aliasing blur
 * @param chart - The chart instance.
 * @param pixel - A pixel value.
 * @param width - The width of the element.
 * @returns The aligned pixel value.
 * @private
 */ function _alignPixel(chart, pixel, width) {
    const devicePixelRatio = chart.currentDevicePixelRatio;
    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
}
/**
 * Clears the entire canvas.
 */ function clearCanvas(canvas, ctx) {
    if (!ctx && !canvas) return;
    ctx = ctx || canvas.getContext("2d");
    ctx.save();
    // canvas.width and canvas.height do not consider the canvas transform,
    // while clearRect does
    ctx.resetTransform();
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.restore();
}
function drawPoint(ctx, options, x, y) {
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    drawPointLegend(ctx, options, x, y, null);
}
// eslint-disable-next-line complexity
function drawPointLegend(ctx, options, x, y, w) {
    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;
    const style = options.pointStyle;
    const rotation = options.rotation;
    const radius = options.radius;
    let rad = (rotation || 0) * RAD_PER_DEG;
    if (style && typeof style === "object") {
        type = style.toString();
        if (type === "[object HTMLImageElement]" || type === "[object HTMLCanvasElement]") {
            ctx.save();
            ctx.translate(x, y);
            ctx.rotate(rad);
            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
            ctx.restore();
            return;
        }
    }
    if (isNaN(radius) || radius <= 0) return;
    ctx.beginPath();
    switch(style){
        // Default includes circle
        default:
            if (w) ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);
            else ctx.arc(x, y, radius, 0, TAU);
            ctx.closePath();
            break;
        case "triangle":
            width = w ? w / 2 : radius;
            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
            rad += TWO_THIRDS_PI;
            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
            rad += TWO_THIRDS_PI;
            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
            ctx.closePath();
            break;
        case "rectRounded":
            // NOTE: the rounded rect implementation changed to use `arc` instead of
            // `quadraticCurveTo` since it generates better results when rect is
            // almost a circle. 0.516 (instead of 0.5) produces results with visually
            // closer proportion to the previous impl and it is inscribed in the
            // circle with `radius`. For more details, see the following PRs:
            // https://github.com/chartjs/Chart.js/issues/5597
            // https://github.com/chartjs/Chart.js/issues/5858
            cornerRadius = radius * 0.516;
            size = radius - cornerRadius;
            xOffset = Math.cos(rad + QUARTER_PI) * size;
            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
            yOffset = Math.sin(rad + QUARTER_PI) * size;
            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);
            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);
            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
            ctx.closePath();
            break;
        case "rect":
            if (!rotation) {
                size = Math.SQRT1_2 * radius;
                width = w ? w / 2 : size;
                ctx.rect(x - width, y - size, 2 * width, 2 * size);
                break;
            }
            rad += QUARTER_PI;
        /* falls through */ case "rectRot":
            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
            ctx.moveTo(x - xOffsetW, y - yOffset);
            ctx.lineTo(x + yOffsetW, y - xOffset);
            ctx.lineTo(x + xOffsetW, y + yOffset);
            ctx.lineTo(x - yOffsetW, y + xOffset);
            ctx.closePath();
            break;
        case "crossRot":
            rad += QUARTER_PI;
        /* falls through */ case "cross":
            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
            ctx.moveTo(x - xOffsetW, y - yOffset);
            ctx.lineTo(x + xOffsetW, y + yOffset);
            ctx.moveTo(x + yOffsetW, y - xOffset);
            ctx.lineTo(x - yOffsetW, y + xOffset);
            break;
        case "star":
            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
            ctx.moveTo(x - xOffsetW, y - yOffset);
            ctx.lineTo(x + xOffsetW, y + yOffset);
            ctx.moveTo(x + yOffsetW, y - xOffset);
            ctx.lineTo(x - yOffsetW, y + xOffset);
            rad += QUARTER_PI;
            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
            ctx.moveTo(x - xOffsetW, y - yOffset);
            ctx.lineTo(x + xOffsetW, y + yOffset);
            ctx.moveTo(x + yOffsetW, y - xOffset);
            ctx.lineTo(x - yOffsetW, y + xOffset);
            break;
        case "line":
            xOffset = w ? w / 2 : Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            ctx.moveTo(x - xOffset, y - yOffset);
            ctx.lineTo(x + xOffset, y + yOffset);
            break;
        case "dash":
            ctx.moveTo(x, y);
            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);
            break;
        case false:
            ctx.closePath();
            break;
    }
    ctx.fill();
    if (options.borderWidth > 0) ctx.stroke();
}
/**
 * Returns true if the point is inside the rectangle
 * @param point - The point to test
 * @param area - The rectangle
 * @param margin - allowed margin
 * @private
 */ function _isPointInArea(point, area, margin) {
    margin = margin || 0.5; // margin - default is to match rounded decimals
    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
}
function clipArea(ctx, area) {
    ctx.save();
    ctx.beginPath();
    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
    ctx.clip();
}
function unclipArea(ctx) {
    ctx.restore();
}
/**
 * @private
 */ function _steppedLineTo(ctx, previous, target, flip, mode) {
    if (!previous) return ctx.lineTo(target.x, target.y);
    if (mode === "middle") {
        const midpoint = (previous.x + target.x) / 2.0;
        ctx.lineTo(midpoint, previous.y);
        ctx.lineTo(midpoint, target.y);
    } else if (mode === "after" !== !!flip) ctx.lineTo(previous.x, target.y);
    else ctx.lineTo(target.x, previous.y);
    ctx.lineTo(target.x, target.y);
}
/**
 * @private
 */ function _bezierCurveTo(ctx, previous, target, flip) {
    if (!previous) return ctx.lineTo(target.x, target.y);
    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);
}
function setRenderOpts(ctx, opts) {
    if (opts.translation) ctx.translate(opts.translation[0], opts.translation[1]);
    if (!isNullOrUndef(opts.rotation)) ctx.rotate(opts.rotation);
    if (opts.color) ctx.fillStyle = opts.color;
    if (opts.textAlign) ctx.textAlign = opts.textAlign;
    if (opts.textBaseline) ctx.textBaseline = opts.textBaseline;
}
function decorateText(ctx, x, y, line, opts) {
    if (opts.strikethrough || opts.underline) {
        /**
     * Now that IE11 support has been dropped, we can use more
     * of the TextMetrics object. The actual bounding boxes
     * are unflagged in Chrome, Firefox, Edge, and Safari so they
     * can be safely used.
     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility
     */ const metrics = ctx.measureText(line);
        const left = x - metrics.actualBoundingBoxLeft;
        const right = x + metrics.actualBoundingBoxRight;
        const top = y - metrics.actualBoundingBoxAscent;
        const bottom = y + metrics.actualBoundingBoxDescent;
        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
        ctx.strokeStyle = ctx.fillStyle;
        ctx.beginPath();
        ctx.lineWidth = opts.decorationWidth || 2;
        ctx.moveTo(left, yDecoration);
        ctx.lineTo(right, yDecoration);
        ctx.stroke();
    }
}
function drawBackdrop(ctx, opts) {
    const oldColor = ctx.fillStyle;
    ctx.fillStyle = opts.color;
    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);
    ctx.fillStyle = oldColor;
}
/**
 * Render text onto the canvas
 */ function renderText(ctx, text, x, y, font, opts = {}) {
    const lines = isArray(text) ? text : [
        text
    ];
    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== "";
    let i, line;
    ctx.save();
    ctx.font = font.string;
    setRenderOpts(ctx, opts);
    for(i = 0; i < lines.length; ++i){
        line = lines[i];
        if (opts.backdrop) drawBackdrop(ctx, opts.backdrop);
        if (stroke) {
            if (opts.strokeColor) ctx.strokeStyle = opts.strokeColor;
            if (!isNullOrUndef(opts.strokeWidth)) ctx.lineWidth = opts.strokeWidth;
            ctx.strokeText(line, x, y, opts.maxWidth);
        }
        ctx.fillText(line, x, y, opts.maxWidth);
        decorateText(ctx, x, y, line, opts);
        y += Number(font.lineHeight);
    }
    ctx.restore();
}
/**
 * Add a path of a rectangle with rounded corners to the current sub-path
 * @param ctx - Context
 * @param rect - Bounding rect
 */ function addRoundedRectPath(ctx, rect) {
    const { x, y, w, h, radius } = rect;
    // top left arc
    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);
    // line from top left to bottom left
    ctx.lineTo(x, y + h - radius.bottomLeft);
    // bottom left arc
    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
    // line from bottom left to bottom right
    ctx.lineTo(x + w - radius.bottomRight, y + h);
    // bottom right arc
    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
    // line from bottom right to top right
    ctx.lineTo(x + w, y + radius.topRight);
    // top right arc
    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);
    // line from top right to top left
    ctx.lineTo(x + radius.topLeft, y);
}
const LINE_HEIGHT = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
const FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
/**
 * @alias Chart.helpers.options
 * @namespace
 */ /**
 * Converts the given line height `value` in pixels for a specific font `size`.
 * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
 * @param size - The font size (in pixels) used to resolve relative `value`.
 * @returns The effective line height in pixels (size * 1.2 if value is invalid).
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
 * @since 2.7.0
 */ function toLineHeight(value, size) {
    const matches = ("" + value).match(LINE_HEIGHT);
    if (!matches || matches[1] === "normal") return size * 1.2;
    value = +matches[2];
    switch(matches[3]){
        case "px":
            return value;
        case "%":
            value /= 100;
            break;
    }
    return size * value;
}
const numberOrZero = (v)=>+v || 0;
function _readValueToProps(value, props) {
    const ret = {};
    const objProps = isObject(props);
    const keys = objProps ? Object.keys(props) : props;
    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;
    for (const prop of keys)ret[prop] = numberOrZero(read(prop));
    return ret;
}
/**
 * Converts the given value into a TRBL object.
 * @param value - If a number, set the value to all TRBL component,
 *  else, if an object, use defined properties and sets undefined ones to 0.
 *  x / y are shorthands for same value for left/right and top/bottom.
 * @returns The padding values (top, right, bottom, left)
 * @since 3.0.0
 */ function toTRBL(value) {
    return _readValueToProps(value, {
        top: "y",
        right: "x",
        bottom: "y",
        left: "x"
    });
}
/**
 * Converts the given value into a TRBL corners object (similar with css border-radius).
 * @param value - If a number, set the value to all TRBL corner components,
 *  else, if an object, use defined properties and sets undefined ones to 0.
 * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)
 * @since 3.0.0
 */ function toTRBLCorners(value) {
    return _readValueToProps(value, [
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight"
    ]);
}
/**
 * Converts the given value into a padding object with pre-computed width/height.
 * @param value - If a number, set the value to all TRBL component,
 *  else, if an object, use defined properties and sets undefined ones to 0.
 *  x / y are shorthands for same value for left/right and top/bottom.
 * @returns The padding values (top, right, bottom, left, width, height)
 * @since 2.7.0
 */ function toPadding(value) {
    const obj = toTRBL(value);
    obj.width = obj.left + obj.right;
    obj.height = obj.top + obj.bottom;
    return obj;
}
/**
 * Parses font options and returns the font object.
 * @param options - A object that contains font options to be parsed.
 * @param fallback - A object that contains fallback font options.
 * @return The font object.
 * @private
 */ function toFont(options, fallback) {
    options = options || {};
    fallback = fallback || defaults.font;
    let size = valueOrDefault(options.size, fallback.size);
    if (typeof size === "string") size = parseInt(size, 10);
    let style = valueOrDefault(options.style, fallback.style);
    if (style && !("" + style).match(FONT_STYLE)) {
        console.warn('Invalid font style specified: "' + style + '"');
        style = undefined;
    }
    const font = {
        family: valueOrDefault(options.family, fallback.family),
        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
        size,
        style,
        weight: valueOrDefault(options.weight, fallback.weight),
        string: ""
    };
    font.string = toFontString(font);
    return font;
}
/**
 * Evaluates the given `inputs` sequentially and returns the first defined value.
 * @param inputs - An array of values, falling back to the last value.
 * @param context - If defined and the current value is a function, the value
 * is called with `context` as first argument and the result becomes the new input.
 * @param index - If defined and the current value is an array, the value
 * at `index` become the new input.
 * @param info - object to return information about resolution in
 * @param info.cacheable - Will be set to `false` if option is not cacheable.
 * @since 2.7.0
 */ function resolve(inputs, context, index, info) {
    let cacheable = true;
    let i, ilen, value;
    for(i = 0, ilen = inputs.length; i < ilen; ++i){
        value = inputs[i];
        if (value === undefined) continue;
        if (context !== undefined && typeof value === "function") {
            value = value(context);
            cacheable = false;
        }
        if (index !== undefined && isArray(value)) {
            value = value[index % value.length];
            cacheable = false;
        }
        if (value !== undefined) {
            if (info && !cacheable) info.cacheable = false;
            return value;
        }
    }
}
/**
 * @param minmax
 * @param grace
 * @param beginAtZero
 * @private
 */ function _addGrace(minmax, grace, beginAtZero) {
    const { min, max } = minmax;
    const change = toDimension(grace, (max - min) / 2);
    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;
    return {
        min: keepZero(min, -Math.abs(change)),
        max: keepZero(max, change)
    };
}
function createContext(parentContext, context) {
    return Object.assign(Object.create(parentContext), context);
}
/**
 * Creates a Proxy for resolving raw values for options.
 * @param scopes - The option scopes to look for values, in resolution order
 * @param prefixes - The prefixes for values, in resolution order.
 * @param rootScopes - The root option scopes
 * @param fallback - Parent scopes fallback
 * @param getTarget - callback for getting the target for changed values
 * @returns Proxy
 * @private
 */ function _createResolver(scopes, prefixes = [
    ""
], rootScopes, fallback, getTarget = ()=>scopes[0]) {
    const finalRootScopes = rootScopes || scopes;
    if (typeof fallback === "undefined") fallback = _resolve("_fallback", scopes);
    const cache = {
        [Symbol.toStringTag]: "Object",
        _cacheable: true,
        _scopes: scopes,
        _rootScopes: finalRootScopes,
        _fallback: fallback,
        _getTarget: getTarget,
        override: (scope)=>_createResolver([
                scope,
                ...scopes
            ], prefixes, finalRootScopes, fallback)
    };
    return new Proxy(cache, {
        /**
     * A trap for the delete operator.
     */ deleteProperty (target, prop) {
            delete target[prop]; // remove from cache
            delete target._keys; // remove cached keys
            delete scopes[0][prop]; // remove from top level scope
            return true;
        },
        /**
     * A trap for getting property values.
     */ get (target, prop) {
            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));
        },
        /**
     * A trap for Object.getOwnPropertyDescriptor.
     * Also used by Object.hasOwnProperty.
     */ getOwnPropertyDescriptor (target, prop) {
            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
        },
        /**
     * A trap for Object.getPrototypeOf.
     */ getPrototypeOf () {
            return Reflect.getPrototypeOf(scopes[0]);
        },
        /**
     * A trap for the in operator.
     */ has (target, prop) {
            return getKeysFromAllScopes(target).includes(prop);
        },
        /**
     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
     */ ownKeys (target) {
            return getKeysFromAllScopes(target);
        },
        /**
     * A trap for setting property values.
     */ set (target, prop, value) {
            const storage = target._storage || (target._storage = getTarget());
            target[prop] = storage[prop] = value; // set to top level scope + cache
            delete target._keys; // remove cached keys
            return true;
        }
    });
}
/**
 * Returns an Proxy for resolving option values with context.
 * @param proxy - The Proxy returned by `_createResolver`
 * @param context - Context object for scriptable/indexable options
 * @param subProxy - The proxy provided for scriptable options
 * @param descriptorDefaults - Defaults for descriptors
 * @private
 */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {
    const cache = {
        _cacheable: false,
        _proxy: proxy,
        _context: context,
        _subProxy: subProxy,
        _stack: new Set(),
        _descriptors: _descriptors(proxy, descriptorDefaults),
        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),
        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
    };
    return new Proxy(cache, {
        /**
     * A trap for the delete operator.
     */ deleteProperty (target, prop) {
            delete target[prop]; // remove from cache
            delete proxy[prop]; // remove from proxy
            return true;
        },
        /**
     * A trap for getting property values.
     */ get (target, prop, receiver) {
            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));
        },
        /**
     * A trap for Object.getOwnPropertyDescriptor.
     * Also used by Object.hasOwnProperty.
     */ getOwnPropertyDescriptor (target, prop) {
            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
                enumerable: true,
                configurable: true
            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);
        },
        /**
     * A trap for Object.getPrototypeOf.
     */ getPrototypeOf () {
            return Reflect.getPrototypeOf(proxy);
        },
        /**
     * A trap for the in operator.
     */ has (target, prop) {
            return Reflect.has(proxy, prop);
        },
        /**
     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
     */ ownKeys () {
            return Reflect.ownKeys(proxy);
        },
        /**
     * A trap for setting property values.
     */ set (target, prop, value) {
            proxy[prop] = value; // set to proxy
            delete target[prop]; // remove from cache
            return true;
        }
    });
}
/**
 * @private
 */ function _descriptors(proxy, defaults = {
    scriptable: true,
    indexable: true
}) {
    const { _scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys } = proxy;
    return {
        allKeys: _allKeys,
        scriptable: _scriptable,
        indexable: _indexable,
        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,
        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable
    };
}
const readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;
const needsSubResolver = (prop, value)=>isObject(value) && prop !== "adapters" && (Object.getPrototypeOf(value) === null || value.constructor === Object);
function _cached(target, prop, resolve) {
    if (Object.prototype.hasOwnProperty.call(target, prop) || prop === "constructor") return target[prop];
    const value = resolve();
    // cache the resolved value
    target[prop] = value;
    return value;
}
function _resolveWithContext(target, prop, receiver) {
    const { _proxy, _context, _subProxy, _descriptors: descriptors } = target;
    let value = _proxy[prop]; // resolve from proxy
    // resolve with context
    if (isFunction(value) && descriptors.isScriptable(prop)) value = _resolveScriptable(prop, value, target, receiver);
    if (isArray(value) && value.length) value = _resolveArray(prop, value, target, descriptors.isIndexable);
    if (needsSubResolver(prop, value)) // if the resolved value is an object, create a sub resolver for it
    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);
    return value;
}
function _resolveScriptable(prop, getValue, target, receiver) {
    const { _proxy, _context, _subProxy, _stack } = target;
    if (_stack.has(prop)) throw new Error("Recursion detected: " + Array.from(_stack).join("->") + "->" + prop);
    _stack.add(prop);
    let value = getValue(_context, _subProxy || receiver);
    _stack.delete(prop);
    if (needsSubResolver(prop, value)) // When scriptable option returns an object, create a resolver on that.
    value = createSubResolver(_proxy._scopes, _proxy, prop, value);
    return value;
}
function _resolveArray(prop, value, target, isIndexable) {
    const { _proxy, _context, _subProxy, _descriptors: descriptors } = target;
    if (typeof _context.index !== "undefined" && isIndexable(prop)) return value[_context.index % value.length];
    else if (isObject(value[0])) {
        // Array of objects, return array or resolvers
        const arr = value;
        const scopes = _proxy._scopes.filter((s)=>s !== arr);
        value = [];
        for (const item of arr){
            const resolver = createSubResolver(scopes, _proxy, prop, item);
            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));
        }
    }
    return value;
}
function resolveFallback(fallback, prop, value) {
    return isFunction(fallback) ? fallback(prop, value) : fallback;
}
const getScope = (key, parent)=>key === true ? parent : typeof key === "string" ? resolveObjectKey(parent, key) : undefined;
function addScopes(set, parentScopes, key, parentFallback, value) {
    for (const parent of parentScopes){
        const scope = getScope(key, parent);
        if (scope) {
            set.add(scope);
            const fallback = resolveFallback(scope._fallback, key, value);
            if (typeof fallback !== "undefined" && fallback !== key && fallback !== parentFallback) // When we reach the descriptor that defines a new _fallback, return that.
            // The fallback will resume to that new scope.
            return fallback;
        } else if (scope === false && typeof parentFallback !== "undefined" && key !== parentFallback) // Fallback to `false` results to `false`, when falling back to different key.
        // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`
        return null;
    }
    return false;
}
function createSubResolver(parentScopes, resolver, prop, value) {
    const rootScopes = resolver._rootScopes;
    const fallback = resolveFallback(resolver._fallback, prop, value);
    const allScopes = [
        ...parentScopes,
        ...rootScopes
    ];
    const set = new Set();
    set.add(value);
    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);
    if (key === null) return false;
    if (typeof fallback !== "undefined" && fallback !== prop) {
        key = addScopesFromKey(set, allScopes, fallback, key, value);
        if (key === null) return false;
    }
    return _createResolver(Array.from(set), [
        ""
    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));
}
function addScopesFromKey(set, allScopes, key, fallback, item) {
    while(key)key = addScopes(set, allScopes, key, fallback, item);
    return key;
}
function subGetTarget(resolver, prop, value) {
    const parent = resolver._getTarget();
    if (!(prop in parent)) parent[prop] = {};
    const target = parent[prop];
    if (isArray(target) && isObject(value)) // For array of objects, the object is used to store updated values
    return value;
    return target || {};
}
function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
    let value;
    for (const prefix of prefixes){
        value = _resolve(readKey(prefix, prop), scopes);
        if (typeof value !== "undefined") return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;
    }
}
function _resolve(key, scopes) {
    for (const scope of scopes){
        if (!scope) continue;
        const value = scope[key];
        if (typeof value !== "undefined") return value;
    }
}
function getKeysFromAllScopes(target) {
    let keys = target._keys;
    if (!keys) keys = target._keys = resolveKeysFromAllScopes(target._scopes);
    return keys;
}
function resolveKeysFromAllScopes(scopes) {
    const set = new Set();
    for (const scope of scopes)for (const key of Object.keys(scope).filter((k)=>!k.startsWith("_")))set.add(key);
    return Array.from(set);
}
function _parseObjectDataRadialScale(meta, data, start, count) {
    const { iScale } = meta;
    const { key = "r" } = this._parsing;
    const parsed = new Array(count);
    let i, ilen, index, item;
    for(i = 0, ilen = count; i < ilen; ++i){
        index = i + start;
        item = data[index];
        parsed[i] = {
            r: iScale.parse(resolveObjectKey(item, key), index)
        };
    }
    return parsed;
}
const EPSILON = Number.EPSILON || 1e-14;
const getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];
const getValueAxis = (indexAxis)=>indexAxis === "x" ? "y" : "x";
function splineCurve(firstPoint, middlePoint, afterPoint, t) {
    // Props to Rob Spencer at scaled innovation for his post on splining between points
    // http://scaledinnovation.com/analytics/splines/aboutSplines.html
    // This function must also respect "skipped" points
    const previous = firstPoint.skip ? middlePoint : firstPoint;
    const current = middlePoint;
    const next = afterPoint.skip ? middlePoint : afterPoint;
    const d01 = distanceBetweenPoints(current, previous);
    const d12 = distanceBetweenPoints(next, current);
    let s01 = d01 / (d01 + d12);
    let s12 = d12 / (d01 + d12);
    // If all points are the same, s01 & s02 will be inf
    s01 = isNaN(s01) ? 0 : s01;
    s12 = isNaN(s12) ? 0 : s12;
    const fa = t * s01; // scaling factor for triangle Ta
    const fb = t * s12;
    return {
        previous: {
            x: current.x - fa * (next.x - previous.x),
            y: current.y - fa * (next.y - previous.y)
        },
        next: {
            x: current.x + fb * (next.x - previous.x),
            y: current.y + fb * (next.y - previous.y)
        }
    };
}
/**
 * Adjust tangents to ensure monotonic properties
 */ function monotoneAdjust(points, deltaK, mK) {
    const pointsLen = points.length;
    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
    let pointAfter = getPoint(points, 0);
    for(let i = 0; i < pointsLen - 1; ++i){
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent || !pointAfter) continue;
        if (almostEquals(deltaK[i], 0, EPSILON)) {
            mK[i] = mK[i + 1] = 0;
            continue;
        }
        alphaK = mK[i] / deltaK[i];
        betaK = mK[i + 1] / deltaK[i];
        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
        if (squaredMagnitude <= 9) continue;
        tauK = 3 / Math.sqrt(squaredMagnitude);
        mK[i] = alphaK * tauK * deltaK[i];
        mK[i + 1] = betaK * tauK * deltaK[i];
    }
}
function monotoneCompute(points, mK, indexAxis = "x") {
    const valueAxis = getValueAxis(indexAxis);
    const pointsLen = points.length;
    let delta, pointBefore, pointCurrent;
    let pointAfter = getPoint(points, 0);
    for(let i = 0; i < pointsLen; ++i){
        pointBefore = pointCurrent;
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent) continue;
        const iPixel = pointCurrent[indexAxis];
        const vPixel = pointCurrent[valueAxis];
        if (pointBefore) {
            delta = (iPixel - pointBefore[indexAxis]) / 3;
            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];
        }
        if (pointAfter) {
            delta = (pointAfter[indexAxis] - iPixel) / 3;
            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];
        }
    }
}
/**
 * This function calculates Bézier control points in a similar way than |splineCurve|,
 * but preserves monotonicity of the provided data and ensures no local extremums are added
 * between the dataset discrete points due to the interpolation.
 * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation
 */ function splineCurveMonotone(points, indexAxis = "x") {
    const valueAxis = getValueAxis(indexAxis);
    const pointsLen = points.length;
    const deltaK = Array(pointsLen).fill(0);
    const mK = Array(pointsLen);
    // Calculate slopes (deltaK) and initialize tangents (mK)
    let i, pointBefore, pointCurrent;
    let pointAfter = getPoint(points, 0);
    for(i = 0; i < pointsLen; ++i){
        pointBefore = pointCurrent;
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent) continue;
        if (pointAfter) {
            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0
            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
        }
        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;
    }
    monotoneAdjust(points, deltaK, mK);
    monotoneCompute(points, mK, indexAxis);
}
function capControlPoint(pt, min, max) {
    return Math.max(Math.min(pt, max), min);
}
function capBezierPoints(points, area) {
    let i, ilen, point, inArea, inAreaPrev;
    let inAreaNext = _isPointInArea(points[0], area);
    for(i = 0, ilen = points.length; i < ilen; ++i){
        inAreaPrev = inArea;
        inArea = inAreaNext;
        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);
        if (!inArea) continue;
        point = points[i];
        if (inAreaPrev) {
            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
        }
        if (inAreaNext) {
            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
        }
    }
}
/**
 * @private
 */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {
    let i, ilen, point, controlPoints;
    // Only consider points that are drawn in case the spanGaps option is used
    if (options.spanGaps) points = points.filter((pt)=>!pt.skip);
    if (options.cubicInterpolationMode === "monotone") splineCurveMonotone(points, indexAxis);
    else {
        let prev = loop ? points[points.length - 1] : points[0];
        for(i = 0, ilen = points.length; i < ilen; ++i){
            point = points[i];
            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);
            point.cp1x = controlPoints.previous.x;
            point.cp1y = controlPoints.previous.y;
            point.cp2x = controlPoints.next.x;
            point.cp2y = controlPoints.next.y;
            prev = point;
        }
    }
    if (options.capBezierPoints) capBezierPoints(points, area);
}
/**
 * Note: typedefs are auto-exported, so use a made-up `dom` namespace where
 * necessary to avoid duplicates with `export * from './helpers`; see
 * https://github.com/microsoft/TypeScript/issues/46011
 * @typedef { import('../core/core.controller.js').default } dom.Chart
 * @typedef { import('../../types').ChartEvent } ChartEvent
 */ /**
 * @private
 */ function _isDomSupported() {
    return typeof window !== "undefined" && typeof document !== "undefined";
}
/**
 * @private
 */ function _getParentNode(domNode) {
    let parent = domNode.parentNode;
    if (parent && parent.toString() === "[object ShadowRoot]") parent = parent.host;
    return parent;
}
/**
 * convert max-width/max-height values that may be percentages into a number
 * @private
 */ function parseMaxStyle(styleValue, node, parentProperty) {
    let valueInPixels;
    if (typeof styleValue === "string") {
        valueInPixels = parseInt(styleValue, 10);
        if (styleValue.indexOf("%") !== -1) // percentage * size in dimension
        valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    } else valueInPixels = styleValue;
    return valueInPixels;
}
const getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);
function getStyle(el, property) {
    return getComputedStyle(el).getPropertyValue(property);
}
const positions = [
    "top",
    "right",
    "bottom",
    "left"
];
function getPositionedStyle(styles, style, suffix) {
    const result = {};
    suffix = suffix ? "-" + suffix : "";
    for(let i = 0; i < 4; i++){
        const pos = positions[i];
        result[pos] = parseFloat(styles[style + "-" + pos + suffix]) || 0;
    }
    result.width = result.left + result.right;
    result.height = result.top + result.bottom;
    return result;
}
const useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);
/**
 * @param e
 * @param canvas
 * @returns Canvas position
 */ function getCanvasPosition(e, canvas) {
    const touches = e.touches;
    const source = touches && touches.length ? touches[0] : e;
    const { offsetX, offsetY } = source;
    let box = false;
    let x, y;
    if (useOffsetPos(offsetX, offsetY, e.target)) {
        x = offsetX;
        y = offsetY;
    } else {
        const rect = canvas.getBoundingClientRect();
        x = source.clientX - rect.left;
        y = source.clientY - rect.top;
        box = true;
    }
    return {
        x,
        y,
        box
    };
}
/**
 * Gets an event's x, y coordinates, relative to the chart area
 * @param event
 * @param chart
 * @returns x and y coordinates of the event
 */ function getRelativePosition(event, chart) {
    if ("native" in event) return event;
    const { canvas, currentDevicePixelRatio } = chart;
    const style = getComputedStyle(canvas);
    const borderBox = style.boxSizing === "border-box";
    const paddings = getPositionedStyle(style, "padding");
    const borders = getPositionedStyle(style, "border", "width");
    const { x, y, box } = getCanvasPosition(event, canvas);
    const xOffset = paddings.left + (box && borders.left);
    const yOffset = paddings.top + (box && borders.top);
    let { width, height } = chart;
    if (borderBox) {
        width -= paddings.width + borders.width;
        height -= paddings.height + borders.height;
    }
    return {
        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),
        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)
    };
}
function getContainerSize(canvas, width, height) {
    let maxWidth, maxHeight;
    if (width === undefined || height === undefined) {
        const container = canvas && _getParentNode(canvas);
        if (!container) {
            width = canvas.clientWidth;
            height = canvas.clientHeight;
        } else {
            const rect = container.getBoundingClientRect(); // this is the border box of the container
            const containerStyle = getComputedStyle(container);
            const containerBorder = getPositionedStyle(containerStyle, "border", "width");
            const containerPadding = getPositionedStyle(containerStyle, "padding");
            width = rect.width - containerPadding.width - containerBorder.width;
            height = rect.height - containerPadding.height - containerBorder.height;
            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, "clientWidth");
            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, "clientHeight");
        }
    }
    return {
        width,
        height,
        maxWidth: maxWidth || INFINITY,
        maxHeight: maxHeight || INFINITY
    };
}
const round1 = (v)=>Math.round(v * 10) / 10;
// eslint-disable-next-line complexity
function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
    const style = getComputedStyle(canvas);
    const margins = getPositionedStyle(style, "margin");
    const maxWidth = parseMaxStyle(style.maxWidth, canvas, "clientWidth") || INFINITY;
    const maxHeight = parseMaxStyle(style.maxHeight, canvas, "clientHeight") || INFINITY;
    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
    let { width, height } = containerSize;
    if (style.boxSizing === "content-box") {
        const borders = getPositionedStyle(style, "border", "width");
        const paddings = getPositionedStyle(style, "padding");
        width -= paddings.width + borders.width;
        height -= paddings.height + borders.height;
    }
    width = Math.max(0, width - margins.width);
    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);
    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
    if (width && !height) // https://github.com/chartjs/Chart.js/issues/4659
    // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)
    height = round1(width / 2);
    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;
    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {
        height = containerSize.height;
        width = round1(Math.floor(height * aspectRatio));
    }
    return {
        width,
        height
    };
}
/**
 * @param chart
 * @param forceRatio
 * @param forceStyle
 * @returns True if the canvas context size or transformation has changed.
 */ function retinaScale(chart, forceRatio, forceStyle) {
    const pixelRatio = forceRatio || 1;
    const deviceHeight = Math.floor(chart.height * pixelRatio);
    const deviceWidth = Math.floor(chart.width * pixelRatio);
    chart.height = Math.floor(chart.height);
    chart.width = Math.floor(chart.width);
    const canvas = chart.canvas;
    // If no style has been set on the canvas, the render size is used as display size,
    // making the chart visually bigger, so let's enforce it to the "correct" values.
    // See https://github.com/chartjs/Chart.js/issues/3575
    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
        canvas.style.height = `${chart.height}px`;
        canvas.style.width = `${chart.width}px`;
    }
    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
        chart.currentDevicePixelRatio = pixelRatio;
        canvas.height = deviceHeight;
        canvas.width = deviceWidth;
        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
        return true;
    }
    return false;
}
/**
 * Detects support for options object argument in addEventListener.
 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
 * @private
 */ const supportsEventListenerOptions = function() {
    let passiveSupported = false;
    try {
        const options = {
            get passive () {
                passiveSupported = true;
                return false;
            }
        };
        if (_isDomSupported()) {
            window.addEventListener("test", null, options);
            window.removeEventListener("test", null, options);
        }
    } catch (e) {
    // continue regardless of error
    }
    return passiveSupported;
}();
/**
 * The "used" size is the final value of a dimension property after all calculations have
 * been performed. This method uses the computed style of `element` but returns undefined
 * if the computed style is not expressed in pixels. That can happen in some cases where
 * `element` has a size relative to its parent and this last one is not yet displayed,
 * for example because of `display: none` on a parent node.
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
 * @returns Size in pixels or undefined if unknown.
 */ function readUsedSize(element, property) {
    const value = getStyle(element, property);
    const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
    return matches ? +matches[1] : undefined;
}
/**
 * @private
 */ function _pointInLine(p1, p2, t, mode) {
    return {
        x: p1.x + t * (p2.x - p1.x),
        y: p1.y + t * (p2.y - p1.y)
    };
}
/**
 * @private
 */ function _steppedInterpolation(p1, p2, t, mode) {
    return {
        x: p1.x + t * (p2.x - p1.x),
        y: mode === "middle" ? t < 0.5 ? p1.y : p2.y : mode === "after" ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y
    };
}
/**
 * @private
 */ function _bezierInterpolation(p1, p2, t, mode) {
    const cp1 = {
        x: p1.cp2x,
        y: p1.cp2y
    };
    const cp2 = {
        x: p2.cp1x,
        y: p2.cp1y
    };
    const a = _pointInLine(p1, cp1, t);
    const b = _pointInLine(cp1, cp2, t);
    const c = _pointInLine(cp2, p2, t);
    const d = _pointInLine(a, b, t);
    const e = _pointInLine(b, c, t);
    return _pointInLine(d, e, t);
}
const getRightToLeftAdapter = function(rectX, width) {
    return {
        x (x) {
            return rectX + rectX + width - x;
        },
        setWidth (w) {
            width = w;
        },
        textAlign (align) {
            if (align === "center") return align;
            return align === "right" ? "left" : "right";
        },
        xPlus (x, value) {
            return x - value;
        },
        leftForLtr (x, itemWidth) {
            return x - itemWidth;
        }
    };
};
const getLeftToRightAdapter = function() {
    return {
        x (x) {
            return x;
        },
        setWidth (w) {},
        textAlign (align) {
            return align;
        },
        xPlus (x, value) {
            return x + value;
        },
        leftForLtr (x, _itemWidth) {
            return x;
        }
    };
};
function getRtlAdapter(rtl, rectX, width) {
    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
}
function overrideTextDirection(ctx, direction) {
    let style, original;
    if (direction === "ltr" || direction === "rtl") {
        style = ctx.canvas.style;
        original = [
            style.getPropertyValue("direction"),
            style.getPropertyPriority("direction")
        ];
        style.setProperty("direction", direction, "important");
        ctx.prevTextDirection = original;
    }
}
function restoreTextDirection(ctx, original) {
    if (original !== undefined) {
        delete ctx.prevTextDirection;
        ctx.canvas.style.setProperty("direction", original[0], original[1]);
    }
}
function propertyFn(property) {
    if (property === "angle") return {
        between: _angleBetween,
        compare: _angleDiff,
        normalize: _normalizeAngle
    };
    return {
        between: _isBetween,
        compare: (a, b)=>a - b,
        normalize: (x)=>x
    };
}
function normalizeSegment({ start, end, count, loop, style }) {
    return {
        start: start % count,
        end: end % count,
        loop: loop && (end - start + 1) % count === 0,
        style
    };
}
function getSegment(segment, points, bounds) {
    const { property, start: startBound, end: endBound } = bounds;
    const { between, normalize } = propertyFn(property);
    const count = points.length;
    let { start, end, loop } = segment;
    let i, ilen;
    if (loop) {
        start += count;
        end += count;
        for(i = 0, ilen = count; i < ilen; ++i){
            if (!between(normalize(points[start % count][property]), startBound, endBound)) break;
            start--;
            end--;
        }
        start %= count;
        end %= count;
    }
    if (end < start) end += count;
    return {
        start,
        end,
        loop,
        style: segment.style
    };
}
function _boundSegment(segment, points, bounds) {
    if (!bounds) return [
        segment
    ];
    const { property, start: startBound, end: endBound } = bounds;
    const count = points.length;
    const { compare, between, normalize } = propertyFn(property);
    const { start, end, loop, style } = getSegment(segment, points, bounds);
    const result = [];
    let inside = false;
    let subStart = null;
    let value, point, prevValue;
    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);
    const shouldStart = ()=>inside || startIsBefore();
    const shouldStop = ()=>!inside || endIsBefore();
    for(let i = start, prev = start; i <= end; ++i){
        point = points[i % count];
        if (point.skip) continue;
        value = normalize(point[property]);
        if (value === prevValue) continue;
        inside = between(value, startBound, endBound);
        if (subStart === null && shouldStart()) subStart = compare(value, startBound) === 0 ? i : prev;
        if (subStart !== null && shouldStop()) {
            result.push(normalizeSegment({
                start: subStart,
                end: i,
                loop,
                count,
                style
            }));
            subStart = null;
        }
        prev = i;
        prevValue = value;
    }
    if (subStart !== null) result.push(normalizeSegment({
        start: subStart,
        end,
        loop,
        count,
        style
    }));
    return result;
}
function _boundSegments(line, bounds) {
    const result = [];
    const segments = line.segments;
    for(let i = 0; i < segments.length; i++){
        const sub = _boundSegment(segments[i], line.points, bounds);
        if (sub.length) result.push(...sub);
    }
    return result;
}
function findStartAndEnd(points, count, loop, spanGaps) {
    let start = 0;
    let end = count - 1;
    if (loop && !spanGaps) while(start < count && !points[start].skip)start++;
    while(start < count && points[start].skip)start++;
    start %= count;
    if (loop) end += start;
    while(end > start && points[end % count].skip)end--;
    end %= count;
    return {
        start,
        end
    };
}
function solidSegments(points, start, max, loop) {
    const count = points.length;
    const result = [];
    let last = start;
    let prev = points[start];
    let end;
    for(end = start + 1; end <= max; ++end){
        const cur = points[end % count];
        if (cur.skip || cur.stop) {
            if (!prev.skip) {
                loop = false;
                result.push({
                    start: start % count,
                    end: (end - 1) % count,
                    loop
                });
                start = last = cur.stop ? end : null;
            }
        } else {
            last = end;
            if (prev.skip) start = end;
        }
        prev = cur;
    }
    if (last !== null) result.push({
        start: start % count,
        end: last % count,
        loop
    });
    return result;
}
function _computeSegments(line, segmentOptions) {
    const points = line.points;
    const spanGaps = line.options.spanGaps;
    const count = points.length;
    if (!count) return [];
    const loop = !!line._loop;
    const { start, end } = findStartAndEnd(points, count, loop, spanGaps);
    if (spanGaps === true) return splitByStyles(line, [
        {
            start,
            end,
            loop
        }
    ], points, segmentOptions);
    const max = end < start ? end + count : end;
    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);
}
function splitByStyles(line, segments, points, segmentOptions) {
    if (!segmentOptions || !segmentOptions.setContext || !points) return segments;
    return doSplitByStyles(line, segments, points, segmentOptions);
}
function doSplitByStyles(line, segments, points, segmentOptions) {
    const chartContext = line._chart.getContext();
    const baseStyle = readStyle(line.options);
    const { _datasetIndex: datasetIndex, options: { spanGaps } } = line;
    const count = points.length;
    const result = [];
    let prevStyle = baseStyle;
    let start = segments[0].start;
    let i = start;
    function addStyle(s, e, l, st) {
        const dir = spanGaps ? -1 : 1;
        if (s === e) return;
        s += count;
        while(points[s % count].skip)s -= dir;
        while(points[e % count].skip)e += dir;
        if (s % count !== e % count) {
            result.push({
                start: s % count,
                end: e % count,
                loop: l,
                style: st
            });
            prevStyle = st;
            start = e % count;
        }
    }
    for (const segment of segments){
        start = spanGaps ? start : segment.start;
        let prev = points[start % count];
        let style;
        for(i = start + 1; i <= segment.end; i++){
            const pt = points[i % count];
            style = readStyle(segmentOptions.setContext(createContext(chartContext, {
                type: "segment",
                p0: prev,
                p1: pt,
                p0DataIndex: (i - 1) % count,
                p1DataIndex: i % count,
                datasetIndex
            })));
            if (styleChanged(style, prevStyle)) addStyle(start, i - 1, segment.loop, prevStyle);
            prev = pt;
            prevStyle = style;
        }
        if (start < i - 1) addStyle(start, i - 1, segment.loop, prevStyle);
    }
    return result;
}
function readStyle(options) {
    return {
        backgroundColor: options.backgroundColor,
        borderCapStyle: options.borderCapStyle,
        borderDash: options.borderDash,
        borderDashOffset: options.borderDashOffset,
        borderJoinStyle: options.borderJoinStyle,
        borderWidth: options.borderWidth,
        borderColor: options.borderColor
    };
}
function styleChanged(style, prevStyle) {
    if (!prevStyle) return false;
    const cache = [];
    const replacer = function(key, value) {
        if (!isPatternOrGradient(value)) return value;
        if (!cache.includes(value)) cache.push(value);
        return cache.indexOf(value);
    };
    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);
}

},{"@kurkle/color":"2aojw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2aojw":[function(require,module,exports) {
/*!
 * @kurkle/color v0.3.2
 * https://github.com/kurkle/color#readme
 * (c) 2023 Jukka Kurkela
 * Released under the MIT License
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Color", ()=>Color);
parcelHelpers.export(exports, "b2n", ()=>b2n);
parcelHelpers.export(exports, "b2p", ()=>b2p);
parcelHelpers.export(exports, "default", ()=>index_esm);
parcelHelpers.export(exports, "hexParse", ()=>hexParse);
parcelHelpers.export(exports, "hexString", ()=>hexString);
parcelHelpers.export(exports, "hsl2rgb", ()=>hsl2rgb);
parcelHelpers.export(exports, "hslString", ()=>hslString);
parcelHelpers.export(exports, "hsv2rgb", ()=>hsv2rgb);
parcelHelpers.export(exports, "hueParse", ()=>hueParse);
parcelHelpers.export(exports, "hwb2rgb", ()=>hwb2rgb);
parcelHelpers.export(exports, "lim", ()=>lim);
parcelHelpers.export(exports, "n2b", ()=>n2b);
parcelHelpers.export(exports, "n2p", ()=>n2p);
parcelHelpers.export(exports, "nameParse", ()=>nameParse);
parcelHelpers.export(exports, "p2b", ()=>p2b);
parcelHelpers.export(exports, "rgb2hsl", ()=>rgb2hsl);
parcelHelpers.export(exports, "rgbParse", ()=>rgbParse);
parcelHelpers.export(exports, "rgbString", ()=>rgbString);
parcelHelpers.export(exports, "rotate", ()=>rotate);
parcelHelpers.export(exports, "round", ()=>round);
function round(v) {
    return v + 0.5 | 0;
}
const lim = (v, l, h)=>Math.max(Math.min(v, h), l);
function p2b(v) {
    return lim(round(v * 2.55), 0, 255);
}
function b2p(v) {
    return lim(round(v / 2.55), 0, 100);
}
function n2b(v) {
    return lim(round(v * 255), 0, 255);
}
function b2n(v) {
    return lim(round(v / 2.55) / 100, 0, 1);
}
function n2p(v) {
    return lim(round(v * 100), 0, 100);
}
const map$1 = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    A: 10,
    B: 11,
    C: 12,
    D: 13,
    E: 14,
    F: 15,
    a: 10,
    b: 11,
    c: 12,
    d: 13,
    e: 14,
    f: 15
};
const hex = [
    ..."0123456789ABCDEF"
];
const h1 = (b)=>hex[b & 0xF];
const h2 = (b)=>hex[(b & 0xF0) >> 4] + hex[b & 0xF];
const eq = (b)=>(b & 0xF0) >> 4 === (b & 0xF);
const isShort = (v)=>eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
function hexParse(str) {
    var len = str.length;
    var ret;
    if (str[0] === "#") {
        if (len === 4 || len === 5) ret = {
            r: 255 & map$1[str[1]] * 17,
            g: 255 & map$1[str[2]] * 17,
            b: 255 & map$1[str[3]] * 17,
            a: len === 5 ? map$1[str[4]] * 17 : 255
        };
        else if (len === 7 || len === 9) ret = {
            r: map$1[str[1]] << 4 | map$1[str[2]],
            g: map$1[str[3]] << 4 | map$1[str[4]],
            b: map$1[str[5]] << 4 | map$1[str[6]],
            a: len === 9 ? map$1[str[7]] << 4 | map$1[str[8]] : 255
        };
    }
    return ret;
}
const alpha = (a, f)=>a < 255 ? f(a) : "";
function hexString(v) {
    var f = isShort(v) ? h1 : h2;
    return v ? "#" + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f) : undefined;
}
const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
function hsl2rgbn(h, s, l) {
    const a = s * Math.min(l, 1 - l);
    const f = (n, k = (n + h / 30) % 12)=>l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    return [
        f(0),
        f(8),
        f(4)
    ];
}
function hsv2rgbn(h, s, v) {
    const f = (n, k = (n + h / 60) % 6)=>v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
    return [
        f(5),
        f(3),
        f(1)
    ];
}
function hwb2rgbn(h, w, b) {
    const rgb = hsl2rgbn(h, 1, 0.5);
    let i;
    if (w + b > 1) {
        i = 1 / (w + b);
        w *= i;
        b *= i;
    }
    for(i = 0; i < 3; i++){
        rgb[i] *= 1 - w - b;
        rgb[i] += w;
    }
    return rgb;
}
function hueValue(r, g, b, d, max) {
    if (r === max) return (g - b) / d + (g < b ? 6 : 0);
    if (g === max) return (b - r) / d + 2;
    return (r - g) / d + 4;
}
function rgb2hsl(v) {
    const range = 255;
    const r = v.r / range;
    const g = v.g / range;
    const b = v.b / range;
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    const l = (max + min) / 2;
    let h, s, d;
    if (max !== min) {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = hueValue(r, g, b, d, max);
        h = h * 60 + 0.5;
    }
    return [
        h | 0,
        s || 0,
        l
    ];
}
function calln(f, a, b, c) {
    return (Array.isArray(a) ? f(a[0], a[1], a[2]) : f(a, b, c)).map(n2b);
}
function hsl2rgb(h, s, l) {
    return calln(hsl2rgbn, h, s, l);
}
function hwb2rgb(h, w, b) {
    return calln(hwb2rgbn, h, w, b);
}
function hsv2rgb(h, s, v) {
    return calln(hsv2rgbn, h, s, v);
}
function hue(h) {
    return (h % 360 + 360) % 360;
}
function hueParse(str) {
    const m = HUE_RE.exec(str);
    let a = 255;
    let v;
    if (!m) return;
    if (m[5] !== v) a = m[6] ? p2b(+m[5]) : n2b(+m[5]);
    const h = hue(+m[2]);
    const p1 = +m[3] / 100;
    const p2 = +m[4] / 100;
    if (m[1] === "hwb") v = hwb2rgb(h, p1, p2);
    else if (m[1] === "hsv") v = hsv2rgb(h, p1, p2);
    else v = hsl2rgb(h, p1, p2);
    return {
        r: v[0],
        g: v[1],
        b: v[2],
        a: a
    };
}
function rotate(v, deg) {
    var h = rgb2hsl(v);
    h[0] = hue(h[0] + deg);
    h = hsl2rgb(h);
    v.r = h[0];
    v.g = h[1];
    v.b = h[2];
}
function hslString(v) {
    if (!v) return;
    const a = rgb2hsl(v);
    const h = a[0];
    const s = n2p(a[1]);
    const l = n2p(a[2]);
    return v.a < 255 ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})` : `hsl(${h}, ${s}%, ${l}%)`;
}
const map = {
    x: "dark",
    Z: "light",
    Y: "re",
    X: "blu",
    W: "gr",
    V: "medium",
    U: "slate",
    A: "ee",
    T: "ol",
    S: "or",
    B: "ra",
    C: "lateg",
    D: "ights",
    R: "in",
    Q: "turquois",
    E: "hi",
    P: "ro",
    O: "al",
    N: "le",
    M: "de",
    L: "yello",
    F: "en",
    K: "ch",
    G: "arks",
    H: "ea",
    I: "ightg",
    J: "wh"
};
const names$1 = {
    OiceXe: "f0f8ff",
    antiquewEte: "faebd7",
    aqua: "ffff",
    aquamarRe: "7fffd4",
    azuY: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "0",
    blanKedOmond: "ffebcd",
    Xe: "ff",
    XeviTet: "8a2be2",
    bPwn: "a52a2a",
    burlywood: "deb887",
    caMtXe: "5f9ea0",
    KartYuse: "7fff00",
    KocTate: "d2691e",
    cSO: "ff7f50",
    cSnflowerXe: "6495ed",
    cSnsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "ffff",
    xXe: "8b",
    xcyan: "8b8b",
    xgTMnPd: "b8860b",
    xWay: "a9a9a9",
    xgYF: "6400",
    xgYy: "a9a9a9",
    xkhaki: "bdb76b",
    xmagFta: "8b008b",
    xTivegYF: "556b2f",
    xSange: "ff8c00",
    xScEd: "9932cc",
    xYd: "8b0000",
    xsOmon: "e9967a",
    xsHgYF: "8fbc8f",
    xUXe: "483d8b",
    xUWay: "2f4f4f",
    xUgYy: "2f4f4f",
    xQe: "ced1",
    xviTet: "9400d3",
    dAppRk: "ff1493",
    dApskyXe: "bfff",
    dimWay: "696969",
    dimgYy: "696969",
    dodgerXe: "1e90ff",
    fiYbrick: "b22222",
    flSOwEte: "fffaf0",
    foYstWAn: "228b22",
    fuKsia: "ff00ff",
    gaRsbSo: "dcdcdc",
    ghostwEte: "f8f8ff",
    gTd: "ffd700",
    gTMnPd: "daa520",
    Way: "808080",
    gYF: "8000",
    gYFLw: "adff2f",
    gYy: "808080",
    honeyMw: "f0fff0",
    hotpRk: "ff69b4",
    RdianYd: "cd5c5c",
    Rdigo: "4b0082",
    ivSy: "fffff0",
    khaki: "f0e68c",
    lavFMr: "e6e6fa",
    lavFMrXsh: "fff0f5",
    lawngYF: "7cfc00",
    NmoncEffon: "fffacd",
    ZXe: "add8e6",
    ZcSO: "f08080",
    Zcyan: "e0ffff",
    ZgTMnPdLw: "fafad2",
    ZWay: "d3d3d3",
    ZgYF: "90ee90",
    ZgYy: "d3d3d3",
    ZpRk: "ffb6c1",
    ZsOmon: "ffa07a",
    ZsHgYF: "20b2aa",
    ZskyXe: "87cefa",
    ZUWay: "778899",
    ZUgYy: "778899",
    ZstAlXe: "b0c4de",
    ZLw: "ffffe0",
    lime: "ff00",
    limegYF: "32cd32",
    lRF: "faf0e6",
    magFta: "ff00ff",
    maPon: "800000",
    VaquamarRe: "66cdaa",
    VXe: "cd",
    VScEd: "ba55d3",
    VpurpN: "9370db",
    VsHgYF: "3cb371",
    VUXe: "7b68ee",
    VsprRggYF: "fa9a",
    VQe: "48d1cc",
    VviTetYd: "c71585",
    midnightXe: "191970",
    mRtcYam: "f5fffa",
    mistyPse: "ffe4e1",
    moccasR: "ffe4b5",
    navajowEte: "ffdead",
    navy: "80",
    Tdlace: "fdf5e6",
    Tive: "808000",
    TivedBb: "6b8e23",
    Sange: "ffa500",
    SangeYd: "ff4500",
    ScEd: "da70d6",
    pOegTMnPd: "eee8aa",
    pOegYF: "98fb98",
    pOeQe: "afeeee",
    pOeviTetYd: "db7093",
    papayawEp: "ffefd5",
    pHKpuff: "ffdab9",
    peru: "cd853f",
    pRk: "ffc0cb",
    plum: "dda0dd",
    powMrXe: "b0e0e6",
    purpN: "800080",
    YbeccapurpN: "663399",
    Yd: "ff0000",
    Psybrown: "bc8f8f",
    PyOXe: "4169e1",
    saddNbPwn: "8b4513",
    sOmon: "fa8072",
    sandybPwn: "f4a460",
    sHgYF: "2e8b57",
    sHshell: "fff5ee",
    siFna: "a0522d",
    silver: "c0c0c0",
    skyXe: "87ceeb",
    UXe: "6a5acd",
    UWay: "708090",
    UgYy: "708090",
    snow: "fffafa",
    sprRggYF: "ff7f",
    stAlXe: "4682b4",
    tan: "d2b48c",
    teO: "8080",
    tEstN: "d8bfd8",
    tomato: "ff6347",
    Qe: "40e0d0",
    viTet: "ee82ee",
    JHt: "f5deb3",
    wEte: "ffffff",
    wEtesmoke: "f5f5f5",
    Lw: "ffff00",
    LwgYF: "9acd32"
};
function unpack() {
    const unpacked = {};
    const keys = Object.keys(names$1);
    const tkeys = Object.keys(map);
    let i, j, k, ok, nk;
    for(i = 0; i < keys.length; i++){
        ok = nk = keys[i];
        for(j = 0; j < tkeys.length; j++){
            k = tkeys[j];
            nk = nk.replace(k, map[k]);
        }
        k = parseInt(names$1[ok], 16);
        unpacked[nk] = [
            k >> 16 & 0xFF,
            k >> 8 & 0xFF,
            k & 0xFF
        ];
    }
    return unpacked;
}
let names;
function nameParse(str) {
    if (!names) {
        names = unpack();
        names.transparent = [
            0,
            0,
            0,
            0
        ];
    }
    const a = names[str.toLowerCase()];
    return a && {
        r: a[0],
        g: a[1],
        b: a[2],
        a: a.length === 4 ? a[3] : 255
    };
}
const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
function rgbParse(str) {
    const m = RGB_RE.exec(str);
    let a = 255;
    let r, g, b;
    if (!m) return;
    if (m[7] !== r) {
        const v = +m[7];
        a = m[8] ? p2b(v) : lim(v * 255, 0, 255);
    }
    r = +m[1];
    g = +m[3];
    b = +m[5];
    r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));
    g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));
    b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));
    return {
        r: r,
        g: g,
        b: b,
        a: a
    };
}
function rgbString(v) {
    return v && (v.a < 255 ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})` : `rgb(${v.r}, ${v.g}, ${v.b})`);
}
const to = (v)=>v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;
const from = (v)=>v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
function interpolate(rgb1, rgb2, t) {
    const r = from(b2n(rgb1.r));
    const g = from(b2n(rgb1.g));
    const b = from(b2n(rgb1.b));
    return {
        r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),
        g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),
        b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),
        a: rgb1.a + t * (rgb2.a - rgb1.a)
    };
}
function modHSL(v, i, ratio) {
    if (v) {
        let tmp = rgb2hsl(v);
        tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
        tmp = hsl2rgb(tmp);
        v.r = tmp[0];
        v.g = tmp[1];
        v.b = tmp[2];
    }
}
function clone(v, proto) {
    return v ? Object.assign(proto || {}, v) : v;
}
function fromObject(input) {
    var v = {
        r: 0,
        g: 0,
        b: 0,
        a: 255
    };
    if (Array.isArray(input)) {
        if (input.length >= 3) {
            v = {
                r: input[0],
                g: input[1],
                b: input[2],
                a: 255
            };
            if (input.length > 3) v.a = n2b(input[3]);
        }
    } else {
        v = clone(input, {
            r: 0,
            g: 0,
            b: 0,
            a: 1
        });
        v.a = n2b(v.a);
    }
    return v;
}
function functionParse(str) {
    if (str.charAt(0) === "r") return rgbParse(str);
    return hueParse(str);
}
class Color {
    constructor(input){
        if (input instanceof Color) return input;
        const type = typeof input;
        let v;
        if (type === "object") v = fromObject(input);
        else if (type === "string") v = hexParse(input) || nameParse(input) || functionParse(input);
        this._rgb = v;
        this._valid = !!v;
    }
    get valid() {
        return this._valid;
    }
    get rgb() {
        var v = clone(this._rgb);
        if (v) v.a = b2n(v.a);
        return v;
    }
    set rgb(obj) {
        this._rgb = fromObject(obj);
    }
    rgbString() {
        return this._valid ? rgbString(this._rgb) : undefined;
    }
    hexString() {
        return this._valid ? hexString(this._rgb) : undefined;
    }
    hslString() {
        return this._valid ? hslString(this._rgb) : undefined;
    }
    mix(color, weight) {
        if (color) {
            const c1 = this.rgb;
            const c2 = color.rgb;
            let w2;
            const p = weight === w2 ? 0.5 : weight;
            const w = 2 * p - 1;
            const a = c1.a - c2.a;
            const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
            w2 = 1 - w1;
            c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;
            c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;
            c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;
            c1.a = p * c1.a + (1 - p) * c2.a;
            this.rgb = c1;
        }
        return this;
    }
    interpolate(color, t) {
        if (color) this._rgb = interpolate(this._rgb, color._rgb, t);
        return this;
    }
    clone() {
        return new Color(this.rgb);
    }
    alpha(a) {
        this._rgb.a = n2b(a);
        return this;
    }
    clearer(ratio) {
        const rgb = this._rgb;
        rgb.a *= 1 - ratio;
        return this;
    }
    greyscale() {
        const rgb = this._rgb;
        const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
        rgb.r = rgb.g = rgb.b = val;
        return this;
    }
    opaquer(ratio) {
        const rgb = this._rgb;
        rgb.a *= 1 + ratio;
        return this;
    }
    negate() {
        const v = this._rgb;
        v.r = 255 - v.r;
        v.g = 255 - v.g;
        v.b = 255 - v.b;
        return this;
    }
    lighten(ratio) {
        modHSL(this._rgb, 2, ratio);
        return this;
    }
    darken(ratio) {
        modHSL(this._rgb, 2, -ratio);
        return this;
    }
    saturate(ratio) {
        modHSL(this._rgb, 1, ratio);
        return this;
    }
    desaturate(ratio) {
        modHSL(this._rgb, 1, -ratio);
        return this;
    }
    rotate(deg) {
        rotate(this._rgb, deg);
        return this;
    }
}
function index_esm(input) {
    return new Color(input);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"kMtu7":[function(require,module,exports) {
/*!
* chartjs-plugin-zoom v2.0.1
* undefined
 * (c) 2016-2023 chartjs-plugin-zoom Contributors
 * Released under the MIT License
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>plugin);
parcelHelpers.export(exports, "pan", ()=>pan);
parcelHelpers.export(exports, "resetZoom", ()=>resetZoom);
parcelHelpers.export(exports, "zoom", ()=>zoom);
parcelHelpers.export(exports, "zoomRect", ()=>zoomRect);
parcelHelpers.export(exports, "zoomScale", ()=>zoomScale);
var _hammerjs = require("hammerjs");
var _hammerjsDefault = parcelHelpers.interopDefault(_hammerjs);
var _helpers = require("chart.js/helpers");
const getModifierKey = (opts)=>opts && opts.enabled && opts.modifierKey;
const keyPressed = (key, event)=>key && event[key + "Key"];
const keyNotPressed = (key, event)=>key && !event[key + "Key"];
/**
 * @param {string|function} mode can be 'x', 'y' or 'xy'
 * @param {string} dir can be 'x' or 'y'
 * @param {import('chart.js').Chart} chart instance of the chart in question
 * @returns {boolean}
 */ function directionEnabled(mode, dir, chart) {
    if (mode === undefined) return true;
    else if (typeof mode === "string") return mode.indexOf(dir) !== -1;
    else if (typeof mode === "function") return mode({
        chart
    }).indexOf(dir) !== -1;
    return false;
}
function directionsEnabled(mode, chart) {
    if (typeof mode === "function") mode = mode({
        chart
    });
    if (typeof mode === "string") return {
        x: mode.indexOf("x") !== -1,
        y: mode.indexOf("y") !== -1
    };
    return {
        x: false,
        y: false
    };
}
/**
 * Debounces calling `fn` for `delay` ms
 * @param {function} fn - Function to call. No arguments are passed.
 * @param {number} delay - Delay in ms. 0 = immediate invocation.
 * @returns {function}
 */ function debounce(fn, delay) {
    let timeout;
    return function() {
        clearTimeout(timeout);
        timeout = setTimeout(fn, delay);
        return delay;
    };
}
/**
 * Checks which axis is under the mouse cursor.
 * @param {{x: number, y: number}} point - the mouse location
 * @param {import('chart.js').Chart} [chart] instance of the chart in question
 * @return {import('chart.js').Scale}
 */ function getScaleUnderPoint({ x, y }, chart) {
    const scales = chart.scales;
    const scaleIds = Object.keys(scales);
    for(let i = 0; i < scaleIds.length; i++){
        const scale = scales[scaleIds[i]];
        if (y >= scale.top && y <= scale.bottom && x >= scale.left && x <= scale.right) return scale;
    }
    return null;
}
/**
 * Evaluate the chart's mode, scaleMode, and overScaleMode properties to
 * determine which axes are eligible for scaling.
 * options.overScaleMode can be a function if user want zoom only one scale of many for example.
 * @param options - Zoom or pan options
 * @param {{x: number, y: number}} point - the mouse location
 * @param {import('chart.js').Chart} [chart] instance of the chart in question
 * @return {import('chart.js').Scale[]}
 */ function getEnabledScalesByPoint(options, point, chart) {
    const { mode = "xy", scaleMode, overScaleMode } = options || {};
    const scale = getScaleUnderPoint(point, chart);
    const enabled = directionsEnabled(mode, chart);
    const scaleEnabled = directionsEnabled(scaleMode, chart);
    // Convert deprecated overScaleEnabled to new scaleEnabled.
    if (overScaleMode) {
        const overScaleEnabled = directionsEnabled(overScaleMode, chart);
        for (const axis of [
            "x",
            "y"
        ])if (overScaleEnabled[axis]) {
            scaleEnabled[axis] = enabled[axis];
            enabled[axis] = false;
        }
    }
    if (scale && scaleEnabled[scale.axis]) return [
        scale
    ];
    const enabledScales = [];
    (0, _helpers.each)(chart.scales, function(scaleItem) {
        if (enabled[scaleItem.axis]) enabledScales.push(scaleItem);
    });
    return enabledScales;
}
const chartStates = new WeakMap();
function getState(chart) {
    let state = chartStates.get(chart);
    if (!state) {
        state = {
            originalScaleLimits: {},
            updatedScaleLimits: {},
            handlers: {},
            panDelta: {}
        };
        chartStates.set(chart, state);
    }
    return state;
}
function removeState(chart) {
    chartStates.delete(chart);
}
function zoomDelta(scale, zoom, center) {
    const range = scale.max - scale.min;
    const newRange = range * (zoom - 1);
    const centerPoint = scale.isHorizontal() ? center.x : center.y;
    // `scale.getValueForPixel()` can return a value less than the `scale.min` or
    // greater than `scale.max` when `centerPoint` is outside chartArea.
    const minPercent = Math.max(0, Math.min(1, (scale.getValueForPixel(centerPoint) - scale.min) / range || 0));
    const maxPercent = 1 - minPercent;
    return {
        min: newRange * minPercent,
        max: newRange * maxPercent
    };
}
function getLimit(state, scale, scaleLimits, prop, fallback) {
    let limit = scaleLimits[prop];
    if (limit === "original") {
        const original = state.originalScaleLimits[scale.id][prop];
        limit = (0, _helpers.valueOrDefault)(original.options, original.scale);
    }
    return (0, _helpers.valueOrDefault)(limit, fallback);
}
function getRange(scale, pixel0, pixel1) {
    const v0 = scale.getValueForPixel(pixel0);
    const v1 = scale.getValueForPixel(pixel1);
    return {
        min: Math.min(v0, v1),
        max: Math.max(v0, v1)
    };
}
function updateRange(scale, { min, max }, limits, zoom = false) {
    const state = getState(scale.chart);
    const { id, axis, options: scaleOpts } = scale;
    const scaleLimits = limits && (limits[id] || limits[axis]) || {};
    const { minRange = 0 } = scaleLimits;
    const minLimit = getLimit(state, scale, scaleLimits, "min", -Infinity);
    const maxLimit = getLimit(state, scale, scaleLimits, "max", Infinity);
    const range = zoom ? Math.max(max - min, minRange) : scale.max - scale.min;
    const offset = (range - max + min) / 2;
    min -= offset;
    max += offset;
    if (min < minLimit) {
        min = minLimit;
        max = Math.min(minLimit + range, maxLimit);
    } else if (max > maxLimit) {
        max = maxLimit;
        min = Math.max(maxLimit - range, minLimit);
    }
    scaleOpts.min = min;
    scaleOpts.max = max;
    state.updatedScaleLimits[scale.id] = {
        min,
        max
    };
    // return true if the scale range is changed
    return scale.parse(min) !== scale.min || scale.parse(max) !== scale.max;
}
function zoomNumericalScale(scale, zoom, center, limits) {
    const delta = zoomDelta(scale, zoom, center);
    const newRange = {
        min: scale.min + delta.min,
        max: scale.max - delta.max
    };
    return updateRange(scale, newRange, limits, true);
}
function zoomRectNumericalScale(scale, from, to, limits) {
    updateRange(scale, getRange(scale, from, to), limits, true);
}
const integerChange = (v)=>v === 0 || isNaN(v) ? 0 : v < 0 ? Math.min(Math.round(v), -1) : Math.max(Math.round(v), 1);
function existCategoryFromMaxZoom(scale) {
    const labels = scale.getLabels();
    const maxIndex = labels.length - 1;
    if (scale.min > 0) scale.min -= 1;
    if (scale.max < maxIndex) scale.max += 1;
}
function zoomCategoryScale(scale, zoom, center, limits) {
    const delta = zoomDelta(scale, zoom, center);
    if (scale.min === scale.max && zoom < 1) existCategoryFromMaxZoom(scale);
    const newRange = {
        min: scale.min + integerChange(delta.min),
        max: scale.max - integerChange(delta.max)
    };
    return updateRange(scale, newRange, limits, true);
}
function scaleLength(scale) {
    return scale.isHorizontal() ? scale.width : scale.height;
}
function panCategoryScale(scale, delta, limits) {
    const labels = scale.getLabels();
    const lastLabelIndex = labels.length - 1;
    let { min, max } = scale;
    // The visible range. Ticks can be skipped, and thus not reliable.
    const range = Math.max(max - min, 1);
    // How many pixels of delta is required before making a step. stepSize, but limited to max 1/10 of the scale length.
    const stepDelta = Math.round(scaleLength(scale) / Math.max(range, 10));
    const stepSize = Math.round(Math.abs(delta / stepDelta));
    let applied;
    if (delta < -stepDelta) {
        max = Math.min(max + stepSize, lastLabelIndex);
        min = range === 1 ? max : max - range;
        applied = max === lastLabelIndex;
    } else if (delta > stepDelta) {
        min = Math.max(0, min - stepSize);
        max = range === 1 ? min : min + range;
        applied = min === 0;
    }
    return updateRange(scale, {
        min,
        max
    }, limits) || applied;
}
const OFFSETS = {
    second: 500,
    minute: 30000,
    hour: 1800000,
    day: 43200000,
    week: 302400000,
    month: 1296000000,
    quarter: 5184000000,
    year: 15724800000 // 182 d
};
function panNumericalScale(scale, delta, limits, canZoom = false) {
    const { min: prevStart, max: prevEnd, options } = scale;
    const round = options.time && options.time.round;
    const offset = OFFSETS[round] || 0;
    const newMin = scale.getValueForPixel(scale.getPixelForValue(prevStart + offset) - delta);
    const newMax = scale.getValueForPixel(scale.getPixelForValue(prevEnd + offset) - delta);
    const { min: minLimit = -Infinity, max: maxLimit = Infinity } = canZoom && limits && limits[scale.axis] || {};
    if (isNaN(newMin) || isNaN(newMax) || newMin < minLimit || newMax > maxLimit) // At limit: No change but return true to indicate no need to store the delta.
    // NaN can happen for 0-dimension scales (either because they were configured
    // with min === max or because the chart has 0 plottable area).
    return true;
    return updateRange(scale, {
        min: newMin,
        max: newMax
    }, limits, canZoom);
}
function panNonLinearScale(scale, delta, limits) {
    return panNumericalScale(scale, delta, limits, true);
}
const zoomFunctions = {
    category: zoomCategoryScale,
    default: zoomNumericalScale
};
const zoomRectFunctions = {
    default: zoomRectNumericalScale
};
const panFunctions = {
    category: panCategoryScale,
    default: panNumericalScale,
    logarithmic: panNonLinearScale,
    timeseries: panNonLinearScale
};
function shouldUpdateScaleLimits(scale, originalScaleLimits, updatedScaleLimits) {
    const { id, options: { min, max } } = scale;
    if (!originalScaleLimits[id] || !updatedScaleLimits[id]) return true;
    const previous = updatedScaleLimits[id];
    return previous.min !== min || previous.max !== max;
}
function removeMissingScales(limits, scales) {
    (0, _helpers.each)(limits, (opt, key)=>{
        if (!scales[key]) delete limits[key];
    });
}
function storeOriginalScaleLimits(chart, state) {
    const { scales } = chart;
    const { originalScaleLimits, updatedScaleLimits } = state;
    (0, _helpers.each)(scales, function(scale) {
        if (shouldUpdateScaleLimits(scale, originalScaleLimits, updatedScaleLimits)) originalScaleLimits[scale.id] = {
            min: {
                scale: scale.min,
                options: scale.options.min
            },
            max: {
                scale: scale.max,
                options: scale.options.max
            }
        };
    });
    removeMissingScales(originalScaleLimits, scales);
    removeMissingScales(updatedScaleLimits, scales);
    return originalScaleLimits;
}
function doZoom(scale, amount, center, limits) {
    const fn = zoomFunctions[scale.type] || zoomFunctions.default;
    (0, _helpers.callback)(fn, [
        scale,
        amount,
        center,
        limits
    ]);
}
function doZoomRect(scale, amount, from, to, limits) {
    const fn = zoomRectFunctions[scale.type] || zoomRectFunctions.default;
    (0, _helpers.callback)(fn, [
        scale,
        amount,
        from,
        to,
        limits
    ]);
}
function getCenter(chart) {
    const ca = chart.chartArea;
    return {
        x: (ca.left + ca.right) / 2,
        y: (ca.top + ca.bottom) / 2
    };
}
/**
 * @param chart The chart instance
 * @param {number | {x?: number, y?: number, focalPoint?: {x: number, y: number}}} amount The zoom percentage or percentages and focal point
 * @param {string} [transition] Which transition mode to use. Defaults to 'none'
 */ function zoom(chart, amount, transition = "none") {
    const { x = 1, y = 1, focalPoint = getCenter(chart) } = typeof amount === "number" ? {
        x: amount,
        y: amount
    } : amount;
    const state = getState(chart);
    const { options: { limits, zoom: zoomOptions } } = state;
    storeOriginalScaleLimits(chart, state);
    const xEnabled = x !== 1;
    const yEnabled = y !== 1;
    const enabledScales = getEnabledScalesByPoint(zoomOptions, focalPoint, chart);
    (0, _helpers.each)(enabledScales || chart.scales, function(scale) {
        if (scale.isHorizontal() && xEnabled) doZoom(scale, x, focalPoint, limits);
        else if (!scale.isHorizontal() && yEnabled) doZoom(scale, y, focalPoint, limits);
    });
    chart.update(transition);
    (0, _helpers.callback)(zoomOptions.onZoom, [
        {
            chart
        }
    ]);
}
function zoomRect(chart, p0, p1, transition = "none") {
    const state = getState(chart);
    const { options: { limits, zoom: zoomOptions } } = state;
    const { mode = "xy" } = zoomOptions;
    storeOriginalScaleLimits(chart, state);
    const xEnabled = directionEnabled(mode, "x", chart);
    const yEnabled = directionEnabled(mode, "y", chart);
    (0, _helpers.each)(chart.scales, function(scale) {
        if (scale.isHorizontal() && xEnabled) doZoomRect(scale, p0.x, p1.x, limits);
        else if (!scale.isHorizontal() && yEnabled) doZoomRect(scale, p0.y, p1.y, limits);
    });
    chart.update(transition);
    (0, _helpers.callback)(zoomOptions.onZoom, [
        {
            chart
        }
    ]);
}
function zoomScale(chart, scaleId, range, transition = "none") {
    storeOriginalScaleLimits(chart, getState(chart));
    const scale = chart.scales[scaleId];
    updateRange(scale, range, undefined, true);
    chart.update(transition);
}
function resetZoom(chart, transition = "default") {
    const state = getState(chart);
    const originalScaleLimits = storeOriginalScaleLimits(chart, state);
    (0, _helpers.each)(chart.scales, function(scale) {
        const scaleOptions = scale.options;
        if (originalScaleLimits[scale.id]) {
            scaleOptions.min = originalScaleLimits[scale.id].min.options;
            scaleOptions.max = originalScaleLimits[scale.id].max.options;
        } else {
            delete scaleOptions.min;
            delete scaleOptions.max;
        }
    });
    chart.update(transition);
    (0, _helpers.callback)(state.options.zoom.onZoomComplete, [
        {
            chart
        }
    ]);
}
function getOriginalRange(state, scaleId) {
    const original = state.originalScaleLimits[scaleId];
    if (!original) return;
    const { min, max } = original;
    return (0, _helpers.valueOrDefault)(max.options, max.scale) - (0, _helpers.valueOrDefault)(min.options, min.scale);
}
function getZoomLevel(chart) {
    const state = getState(chart);
    let min = 1;
    let max = 1;
    (0, _helpers.each)(chart.scales, function(scale) {
        const origRange = getOriginalRange(state, scale.id);
        if (origRange) {
            const level = Math.round(origRange / (scale.max - scale.min) * 100) / 100;
            min = Math.min(min, level);
            max = Math.max(max, level);
        }
    });
    return min < 1 ? min : max;
}
function panScale(scale, delta, limits, state) {
    const { panDelta } = state;
    // Add possible cumulative delta from previous pan attempts where scale did not change
    const storedDelta = panDelta[scale.id] || 0;
    if ((0, _helpers.sign)(storedDelta) === (0, _helpers.sign)(delta)) delta += storedDelta;
    const fn = panFunctions[scale.type] || panFunctions.default;
    if ((0, _helpers.callback)(fn, [
        scale,
        delta,
        limits
    ])) // The scale changed, reset cumulative delta
    panDelta[scale.id] = 0;
    else // The scale did not change, store cumulative delta
    panDelta[scale.id] = delta;
}
function pan(chart, delta, enabledScales, transition = "none") {
    const { x = 0, y = 0 } = typeof delta === "number" ? {
        x: delta,
        y: delta
    } : delta;
    const state = getState(chart);
    const { options: { pan: panOptions, limits } } = state;
    const { onPan } = panOptions || {};
    storeOriginalScaleLimits(chart, state);
    const xEnabled = x !== 0;
    const yEnabled = y !== 0;
    (0, _helpers.each)(enabledScales || chart.scales, function(scale) {
        if (scale.isHorizontal() && xEnabled) panScale(scale, x, limits, state);
        else if (!scale.isHorizontal() && yEnabled) panScale(scale, y, limits, state);
    });
    chart.update(transition);
    (0, _helpers.callback)(onPan, [
        {
            chart
        }
    ]);
}
function getInitialScaleBounds(chart) {
    const state = getState(chart);
    storeOriginalScaleLimits(chart, state);
    const scaleBounds = {};
    for (const scaleId of Object.keys(chart.scales)){
        const { min, max } = state.originalScaleLimits[scaleId] || {
            min: {},
            max: {}
        };
        scaleBounds[scaleId] = {
            min: min.scale,
            max: max.scale
        };
    }
    return scaleBounds;
}
function isZoomedOrPanned(chart) {
    const scaleBounds = getInitialScaleBounds(chart);
    for (const scaleId of Object.keys(chart.scales)){
        const { min: originalMin, max: originalMax } = scaleBounds[scaleId];
        if (originalMin !== undefined && chart.scales[scaleId].min !== originalMin) return true;
        if (originalMax !== undefined && chart.scales[scaleId].max !== originalMax) return true;
    }
    return false;
}
function removeHandler(chart, type) {
    const { handlers } = getState(chart);
    const handler = handlers[type];
    if (handler && handler.target) {
        handler.target.removeEventListener(type, handler);
        delete handlers[type];
    }
}
function addHandler(chart, target, type, handler) {
    const { handlers, options } = getState(chart);
    const oldHandler = handlers[type];
    if (oldHandler && oldHandler.target === target) // already attached
    return;
    removeHandler(chart, type);
    handlers[type] = (event)=>handler(chart, event, options);
    handlers[type].target = target;
    target.addEventListener(type, handlers[type]);
}
function mouseMove(chart, event) {
    const state = getState(chart);
    if (state.dragStart) {
        state.dragging = true;
        state.dragEnd = event;
        chart.update("none");
    }
}
function keyDown(chart, event) {
    const state = getState(chart);
    if (!state.dragStart || event.key !== "Escape") return;
    removeHandler(chart, "keydown");
    state.dragging = false;
    state.dragStart = state.dragEnd = null;
    chart.update("none");
}
function zoomStart(chart, event, zoomOptions) {
    const { onZoomStart, onZoomRejected } = zoomOptions;
    if (onZoomStart) {
        const point = (0, _helpers.getRelativePosition)(event, chart);
        if ((0, _helpers.callback)(onZoomStart, [
            {
                chart,
                event,
                point
            }
        ]) === false) {
            (0, _helpers.callback)(onZoomRejected, [
                {
                    chart,
                    event
                }
            ]);
            return false;
        }
    }
}
function mouseDown(chart, event) {
    const state = getState(chart);
    const { pan: panOptions, zoom: zoomOptions = {} } = state.options;
    if (event.button !== 0 || keyPressed(getModifierKey(panOptions), event) || keyNotPressed(getModifierKey(zoomOptions.drag), event)) return (0, _helpers.callback)(zoomOptions.onZoomRejected, [
        {
            chart,
            event
        }
    ]);
    if (zoomStart(chart, event, zoomOptions) === false) return;
    state.dragStart = event;
    addHandler(chart, chart.canvas, "mousemove", mouseMove);
    addHandler(chart, window.document, "keydown", keyDown);
}
function computeDragRect(chart, mode, beginPointEvent, endPointEvent) {
    const xEnabled = directionEnabled(mode, "x", chart);
    const yEnabled = directionEnabled(mode, "y", chart);
    let { top, left, right, bottom, width: chartWidth, height: chartHeight } = chart.chartArea;
    const beginPoint = (0, _helpers.getRelativePosition)(beginPointEvent, chart);
    const endPoint = (0, _helpers.getRelativePosition)(endPointEvent, chart);
    if (xEnabled) {
        left = Math.min(beginPoint.x, endPoint.x);
        right = Math.max(beginPoint.x, endPoint.x);
    }
    if (yEnabled) {
        top = Math.min(beginPoint.y, endPoint.y);
        bottom = Math.max(beginPoint.y, endPoint.y);
    }
    const width = right - left;
    const height = bottom - top;
    return {
        left,
        top,
        right,
        bottom,
        width,
        height,
        zoomX: xEnabled && width ? 1 + (chartWidth - width) / chartWidth : 1,
        zoomY: yEnabled && height ? 1 + (chartHeight - height) / chartHeight : 1
    };
}
function mouseUp(chart, event) {
    const state = getState(chart);
    if (!state.dragStart) return;
    removeHandler(chart, "mousemove");
    const { mode, onZoomComplete, drag: { threshold = 0 } } = state.options.zoom;
    const rect = computeDragRect(chart, mode, state.dragStart, event);
    const distanceX = directionEnabled(mode, "x", chart) ? rect.width : 0;
    const distanceY = directionEnabled(mode, "y", chart) ? rect.height : 0;
    const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);
    // Remove drag start and end before chart update to stop drawing selected area
    state.dragStart = state.dragEnd = null;
    if (distance <= threshold) {
        state.dragging = false;
        chart.update("none");
        return;
    }
    zoomRect(chart, {
        x: rect.left,
        y: rect.top
    }, {
        x: rect.right,
        y: rect.bottom
    }, "zoom");
    setTimeout(()=>state.dragging = false, 500);
    (0, _helpers.callback)(onZoomComplete, [
        {
            chart
        }
    ]);
}
function wheelPreconditions(chart, event, zoomOptions) {
    // Before preventDefault, check if the modifier key required and pressed
    if (keyNotPressed(getModifierKey(zoomOptions.wheel), event)) {
        (0, _helpers.callback)(zoomOptions.onZoomRejected, [
            {
                chart,
                event
            }
        ]);
        return;
    }
    if (zoomStart(chart, event, zoomOptions) === false) return;
    // Prevent the event from triggering the default behavior (e.g. content scrolling).
    if (event.cancelable) event.preventDefault();
    // Firefox always fires the wheel event twice:
    // First without the delta and right after that once with the delta properties.
    if (event.deltaY === undefined) return;
    return true;
}
function wheel(chart, event) {
    const { handlers: { onZoomComplete }, options: { zoom: zoomOptions } } = getState(chart);
    if (!wheelPreconditions(chart, event, zoomOptions)) return;
    const rect = event.target.getBoundingClientRect();
    const speed = 1 + (event.deltaY >= 0 ? -zoomOptions.wheel.speed : zoomOptions.wheel.speed);
    const amount = {
        x: speed,
        y: speed,
        focalPoint: {
            x: event.clientX - rect.left,
            y: event.clientY - rect.top
        }
    };
    zoom(chart, amount);
    if (onZoomComplete) onZoomComplete();
}
function addDebouncedHandler(chart, name, handler, delay) {
    if (handler) getState(chart).handlers[name] = debounce(()=>(0, _helpers.callback)(handler, [
            {
                chart
            }
        ]), delay);
}
function addListeners(chart, options) {
    const canvas = chart.canvas;
    const { wheel: wheelOptions, drag: dragOptions, onZoomComplete } = options.zoom;
    // Install listeners. Do this dynamically based on options so that we can turn zoom on and off
    // We also want to make sure listeners aren't always on. E.g. if you're scrolling down a page
    // and the mouse goes over a chart you don't want it intercepted unless the plugin is enabled
    if (wheelOptions.enabled) {
        addHandler(chart, canvas, "wheel", wheel);
        addDebouncedHandler(chart, "onZoomComplete", onZoomComplete, 250);
    } else removeHandler(chart, "wheel");
    if (dragOptions.enabled) {
        addHandler(chart, canvas, "mousedown", mouseDown);
        addHandler(chart, canvas.ownerDocument, "mouseup", mouseUp);
    } else {
        removeHandler(chart, "mousedown");
        removeHandler(chart, "mousemove");
        removeHandler(chart, "mouseup");
        removeHandler(chart, "keydown");
    }
}
function removeListeners(chart) {
    removeHandler(chart, "mousedown");
    removeHandler(chart, "mousemove");
    removeHandler(chart, "mouseup");
    removeHandler(chart, "wheel");
    removeHandler(chart, "click");
    removeHandler(chart, "keydown");
}
function createEnabler(chart, state) {
    return function(recognizer, event) {
        const { pan: panOptions, zoom: zoomOptions = {} } = state.options;
        if (!panOptions || !panOptions.enabled) return false;
        const srcEvent = event && event.srcEvent;
        if (!srcEvent) return true;
        if (!state.panning && event.pointerType === "mouse" && (keyNotPressed(getModifierKey(panOptions), srcEvent) || keyPressed(getModifierKey(zoomOptions.drag), srcEvent))) {
            (0, _helpers.callback)(panOptions.onPanRejected, [
                {
                    chart,
                    event
                }
            ]);
            return false;
        }
        return true;
    };
}
function pinchAxes(p0, p1) {
    // fingers position difference
    const pinchX = Math.abs(p0.clientX - p1.clientX);
    const pinchY = Math.abs(p0.clientY - p1.clientY);
    // diagonal fingers will change both (xy) axes
    const p = pinchX / pinchY;
    let x, y;
    if (p > 0.3 && p < 1.7) x = y = true;
    else if (pinchX > pinchY) x = true;
    else y = true;
    return {
        x,
        y
    };
}
function handlePinch(chart, state, e) {
    if (state.scale) {
        const { center, pointers } = e;
        // Hammer reports the total scaling. We need the incremental amount
        const zoomPercent = 1 / state.scale * e.scale;
        const rect = e.target.getBoundingClientRect();
        const pinch = pinchAxes(pointers[0], pointers[1]);
        const mode = state.options.zoom.mode;
        const amount = {
            x: pinch.x && directionEnabled(mode, "x", chart) ? zoomPercent : 1,
            y: pinch.y && directionEnabled(mode, "y", chart) ? zoomPercent : 1,
            focalPoint: {
                x: center.x - rect.left,
                y: center.y - rect.top
            }
        };
        zoom(chart, amount);
        // Keep track of overall scale
        state.scale = e.scale;
    }
}
function startPinch(chart, state) {
    if (state.options.zoom.pinch.enabled) state.scale = 1;
}
function endPinch(chart, state, e) {
    if (state.scale) {
        handlePinch(chart, state, e);
        state.scale = null; // reset
        (0, _helpers.callback)(state.options.zoom.onZoomComplete, [
            {
                chart
            }
        ]);
    }
}
function handlePan(chart, state, e) {
    const delta = state.delta;
    if (delta) {
        state.panning = true;
        pan(chart, {
            x: e.deltaX - delta.x,
            y: e.deltaY - delta.y
        }, state.panScales);
        state.delta = {
            x: e.deltaX,
            y: e.deltaY
        };
    }
}
function startPan(chart, state, event) {
    const { enabled, onPanStart, onPanRejected } = state.options.pan;
    if (!enabled) return;
    const rect = event.target.getBoundingClientRect();
    const point = {
        x: event.center.x - rect.left,
        y: event.center.y - rect.top
    };
    if ((0, _helpers.callback)(onPanStart, [
        {
            chart,
            event,
            point
        }
    ]) === false) return (0, _helpers.callback)(onPanRejected, [
        {
            chart,
            event
        }
    ]);
    state.panScales = getEnabledScalesByPoint(state.options.pan, point, chart);
    state.delta = {
        x: 0,
        y: 0
    };
    clearTimeout(state.panEndTimeout);
    handlePan(chart, state, event);
}
function endPan(chart, state) {
    state.delta = null;
    if (state.panning) {
        state.panEndTimeout = setTimeout(()=>state.panning = false, 500);
        (0, _helpers.callback)(state.options.pan.onPanComplete, [
            {
                chart
            }
        ]);
    }
}
const hammers = new WeakMap();
function startHammer(chart, options) {
    const state = getState(chart);
    const canvas = chart.canvas;
    const { pan: panOptions, zoom: zoomOptions } = options;
    const mc = new (0, _hammerjsDefault.default).Manager(canvas);
    if (zoomOptions && zoomOptions.pinch.enabled) {
        mc.add(new (0, _hammerjsDefault.default).Pinch());
        mc.on("pinchstart", ()=>startPinch(chart, state));
        mc.on("pinch", (e)=>handlePinch(chart, state, e));
        mc.on("pinchend", (e)=>endPinch(chart, state, e));
    }
    if (panOptions && panOptions.enabled) {
        mc.add(new (0, _hammerjsDefault.default).Pan({
            threshold: panOptions.threshold,
            enable: createEnabler(chart, state)
        }));
        mc.on("panstart", (e)=>startPan(chart, state, e));
        mc.on("panmove", (e)=>handlePan(chart, state, e));
        mc.on("panend", ()=>endPan(chart, state));
    }
    hammers.set(chart, mc);
}
function stopHammer(chart) {
    const mc = hammers.get(chart);
    if (mc) {
        mc.remove("pinchstart");
        mc.remove("pinch");
        mc.remove("pinchend");
        mc.remove("panstart");
        mc.remove("pan");
        mc.remove("panend");
        mc.destroy();
        hammers.delete(chart);
    }
}
var version = "2.0.1";
function draw(chart, caller, options) {
    const dragOptions = options.zoom.drag;
    const { dragStart, dragEnd } = getState(chart);
    if (dragOptions.drawTime !== caller || !dragEnd) return;
    const { left, top, width, height } = computeDragRect(chart, options.zoom.mode, dragStart, dragEnd);
    const ctx = chart.ctx;
    ctx.save();
    ctx.beginPath();
    ctx.fillStyle = dragOptions.backgroundColor || "rgba(225,225,225,0.3)";
    ctx.fillRect(left, top, width, height);
    if (dragOptions.borderWidth > 0) {
        ctx.lineWidth = dragOptions.borderWidth;
        ctx.strokeStyle = dragOptions.borderColor || "rgba(225,225,225)";
        ctx.strokeRect(left, top, width, height);
    }
    ctx.restore();
}
var plugin = {
    id: "zoom",
    version,
    defaults: {
        pan: {
            enabled: false,
            mode: "xy",
            threshold: 10,
            modifierKey: null
        },
        zoom: {
            wheel: {
                enabled: false,
                speed: 0.1,
                modifierKey: null
            },
            drag: {
                enabled: false,
                drawTime: "beforeDatasetsDraw",
                modifierKey: null
            },
            pinch: {
                enabled: false
            },
            mode: "xy"
        }
    },
    start: function(chart, _args, options) {
        const state = getState(chart);
        state.options = options;
        if (Object.prototype.hasOwnProperty.call(options.zoom, "enabled")) console.warn("The option `zoom.enabled` is no longer supported. Please use `zoom.wheel.enabled`, `zoom.drag.enabled`, or `zoom.pinch.enabled`.");
        if (Object.prototype.hasOwnProperty.call(options.zoom, "overScaleMode") || Object.prototype.hasOwnProperty.call(options.pan, "overScaleMode")) console.warn("The option `overScaleMode` is deprecated. Please use `scaleMode` instead (and update `mode` as desired).");
        if (0, _hammerjsDefault.default) startHammer(chart, options);
        chart.pan = (delta, panScales, transition)=>pan(chart, delta, panScales, transition);
        chart.zoom = (args, transition)=>zoom(chart, args, transition);
        chart.zoomRect = (p0, p1, transition)=>zoomRect(chart, p0, p1, transition);
        chart.zoomScale = (id, range, transition)=>zoomScale(chart, id, range, transition);
        chart.resetZoom = (transition)=>resetZoom(chart, transition);
        chart.getZoomLevel = ()=>getZoomLevel(chart);
        chart.getInitialScaleBounds = ()=>getInitialScaleBounds(chart);
        chart.isZoomedOrPanned = ()=>isZoomedOrPanned(chart);
    },
    beforeEvent (chart) {
        const state = getState(chart);
        if (state.panning || state.dragging) // cancel any event handling while panning or dragging
        return false;
    },
    beforeUpdate: function(chart, args, options) {
        const state = getState(chart);
        state.options = options;
        addListeners(chart, options);
    },
    beforeDatasetsDraw (chart, _args, options) {
        draw(chart, "beforeDatasetsDraw", options);
    },
    afterDatasetsDraw (chart, _args, options) {
        draw(chart, "afterDatasetsDraw", options);
    },
    beforeDraw (chart, _args, options) {
        draw(chart, "beforeDraw", options);
    },
    afterDraw (chart, _args, options) {
        draw(chart, "afterDraw", options);
    },
    stop: function(chart) {
        removeListeners(chart);
        if (0, _hammerjsDefault.default) stopHammer(chart);
        removeState(chart);
    },
    panFunctions,
    zoomFunctions,
    zoomRectFunctions
};

},{"hammerjs":"lHwvQ","chart.js/helpers":"dxsY3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lHwvQ":[function(require,module,exports) {
/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */ (function(window1, document1, exportName, undefined) {
    "use strict";
    var VENDOR_PREFIXES = [
        "",
        "webkit",
        "Moz",
        "MS",
        "ms",
        "o"
    ];
    var TEST_ELEMENT = document1.createElement("div");
    var TYPE_FUNCTION = "function";
    var round = Math.round;
    var abs = Math.abs;
    var now = Date.now;
    /**
 * set a timeout with a given scope
 * @param {Function} fn
 * @param {Number} timeout
 * @param {Object} context
 * @returns {number}
 */ function setTimeoutContext(fn, timeout, context) {
        return setTimeout(bindFn(fn, context), timeout);
    }
    /**
 * if the argument is an array, we want to execute the fn on each entry
 * if it aint an array we don't want to do a thing.
 * this is used by all the methods that accept a single and array argument.
 * @param {*|Array} arg
 * @param {String} fn
 * @param {Object} [context]
 * @returns {Boolean}
 */ function invokeArrayArg(arg, fn, context) {
        if (Array.isArray(arg)) {
            each(arg, context[fn], context);
            return true;
        }
        return false;
    }
    /**
 * walk objects and arrays
 * @param {Object} obj
 * @param {Function} iterator
 * @param {Object} context
 */ function each(obj, iterator, context) {
        var i;
        if (!obj) return;
        if (obj.forEach) obj.forEach(iterator, context);
        else if (obj.length !== undefined) {
            i = 0;
            while(i < obj.length){
                iterator.call(context, obj[i], i, obj);
                i++;
            }
        } else for(i in obj)obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
    }
    /**
 * wrap a method with a deprecation warning and stack trace
 * @param {Function} method
 * @param {String} name
 * @param {String} message
 * @returns {Function} A new function wrapping the supplied method.
 */ function deprecate(method, name, message) {
        var deprecationMessage = "DEPRECATED METHOD: " + name + "\n" + message + " AT \n";
        return function() {
            var e = new Error("get-stack-trace");
            var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, "").replace(/^\s+at\s+/gm, "").replace(/^Object.<anonymous>\s*\(/gm, "{anonymous}()@") : "Unknown Stack Trace";
            var log = window1.console && (window1.console.warn || window1.console.log);
            if (log) log.call(window1.console, deprecationMessage, stack);
            return method.apply(this, arguments);
        };
    }
    /**
 * extend object.
 * means that properties in dest will be overwritten by the ones in src.
 * @param {Object} target
 * @param {...Object} objects_to_assign
 * @returns {Object} target
 */ var assign;
    if (typeof Object.assign !== "function") assign = function assign(target) {
        if (target === undefined || target === null) throw new TypeError("Cannot convert undefined or null to object");
        var output = Object(target);
        for(var index = 1; index < arguments.length; index++){
            var source = arguments[index];
            if (source !== undefined && source !== null) {
                for(var nextKey in source)if (source.hasOwnProperty(nextKey)) output[nextKey] = source[nextKey];
            }
        }
        return output;
    };
    else assign = Object.assign;
    /**
 * extend object.
 * means that properties in dest will be overwritten by the ones in src.
 * @param {Object} dest
 * @param {Object} src
 * @param {Boolean} [merge=false]
 * @returns {Object} dest
 */ var extend = deprecate(function extend(dest, src, merge) {
        var keys = Object.keys(src);
        var i = 0;
        while(i < keys.length){
            if (!merge || merge && dest[keys[i]] === undefined) dest[keys[i]] = src[keys[i]];
            i++;
        }
        return dest;
    }, "extend", "Use `assign`.");
    /**
 * merge the values from src in the dest.
 * means that properties that exist in dest will not be overwritten by src
 * @param {Object} dest
 * @param {Object} src
 * @returns {Object} dest
 */ var merge = deprecate(function merge(dest, src) {
        return extend(dest, src, true);
    }, "merge", "Use `assign`.");
    /**
 * simple class inheritance
 * @param {Function} child
 * @param {Function} base
 * @param {Object} [properties]
 */ function inherit(child, base, properties) {
        var baseP = base.prototype, childP;
        childP = child.prototype = Object.create(baseP);
        childP.constructor = child;
        childP._super = baseP;
        if (properties) assign(childP, properties);
    }
    /**
 * simple function bind
 * @param {Function} fn
 * @param {Object} context
 * @returns {Function}
 */ function bindFn(fn, context) {
        return function boundFn() {
            return fn.apply(context, arguments);
        };
    }
    /**
 * let a boolean value also be a function that must return a boolean
 * this first item in args will be used as the context
 * @param {Boolean|Function} val
 * @param {Array} [args]
 * @returns {Boolean}
 */ function boolOrFn(val, args) {
        if (typeof val == TYPE_FUNCTION) return val.apply(args ? args[0] || undefined : undefined, args);
        return val;
    }
    /**
 * use the val2 when val1 is undefined
 * @param {*} val1
 * @param {*} val2
 * @returns {*}
 */ function ifUndefined(val1, val2) {
        return val1 === undefined ? val2 : val1;
    }
    /**
 * addEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */ function addEventListeners(target, types, handler) {
        each(splitStr(types), function(type) {
            target.addEventListener(type, handler, false);
        });
    }
    /**
 * removeEventListener with multiple events at once
 * @param {EventTarget} target
 * @param {String} types
 * @param {Function} handler
 */ function removeEventListeners(target, types, handler) {
        each(splitStr(types), function(type) {
            target.removeEventListener(type, handler, false);
        });
    }
    /**
 * find if a node is in the given parent
 * @method hasParent
 * @param {HTMLElement} node
 * @param {HTMLElement} parent
 * @return {Boolean} found
 */ function hasParent(node, parent) {
        while(node){
            if (node == parent) return true;
            node = node.parentNode;
        }
        return false;
    }
    /**
 * small indexOf wrapper
 * @param {String} str
 * @param {String} find
 * @returns {Boolean} found
 */ function inStr(str, find) {
        return str.indexOf(find) > -1;
    }
    /**
 * split string on whitespace
 * @param {String} str
 * @returns {Array} words
 */ function splitStr(str) {
        return str.trim().split(/\s+/g);
    }
    /**
 * find if a array contains the object using indexOf or a simple polyFill
 * @param {Array} src
 * @param {String} find
 * @param {String} [findByKey]
 * @return {Boolean|Number} false when not found, or the index
 */ function inArray(src, find, findByKey) {
        if (src.indexOf && !findByKey) return src.indexOf(find);
        else {
            var i = 0;
            while(i < src.length){
                if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) return i;
                i++;
            }
            return -1;
        }
    }
    /**
 * convert array-like objects to real arrays
 * @param {Object} obj
 * @returns {Array}
 */ function toArray(obj) {
        return Array.prototype.slice.call(obj, 0);
    }
    /**
 * unique array with objects based on a key (like 'id') or just by the array's value
 * @param {Array} src [{id:1},{id:2},{id:1}]
 * @param {String} [key]
 * @param {Boolean} [sort=False]
 * @returns {Array} [{id:1},{id:2}]
 */ function uniqueArray(src, key, sort) {
        var results = [];
        var values = [];
        var i = 0;
        while(i < src.length){
            var val = key ? src[i][key] : src[i];
            if (inArray(values, val) < 0) results.push(src[i]);
            values[i] = val;
            i++;
        }
        if (sort) {
            if (!key) results = results.sort();
            else results = results.sort(function sortUniqueArray(a, b) {
                return a[key] > b[key];
            });
        }
        return results;
    }
    /**
 * get the prefixed property
 * @param {Object} obj
 * @param {String} property
 * @returns {String|Undefined} prefixed
 */ function prefixed(obj, property) {
        var prefix, prop;
        var camelProp = property[0].toUpperCase() + property.slice(1);
        var i = 0;
        while(i < VENDOR_PREFIXES.length){
            prefix = VENDOR_PREFIXES[i];
            prop = prefix ? prefix + camelProp : property;
            if (prop in obj) return prop;
            i++;
        }
        return undefined;
    }
    /**
 * get a unique id
 * @returns {number} uniqueId
 */ var _uniqueId = 1;
    function uniqueId() {
        return _uniqueId++;
    }
    /**
 * get the window object of an element
 * @param {HTMLElement} element
 * @returns {DocumentView|Window}
 */ function getWindowForElement(element) {
        var doc = element.ownerDocument || element;
        return doc.defaultView || doc.parentWindow || window1;
    }
    var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;
    var SUPPORT_TOUCH = "ontouchstart" in window1;
    var SUPPORT_POINTER_EVENTS = prefixed(window1, "PointerEvent") !== undefined;
    var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);
    var INPUT_TYPE_TOUCH = "touch";
    var INPUT_TYPE_PEN = "pen";
    var INPUT_TYPE_MOUSE = "mouse";
    var INPUT_TYPE_KINECT = "kinect";
    var COMPUTE_INTERVAL = 25;
    var INPUT_START = 1;
    var INPUT_MOVE = 2;
    var INPUT_END = 4;
    var INPUT_CANCEL = 8;
    var DIRECTION_NONE = 1;
    var DIRECTION_LEFT = 2;
    var DIRECTION_RIGHT = 4;
    var DIRECTION_UP = 8;
    var DIRECTION_DOWN = 16;
    var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
    var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
    var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;
    var PROPS_XY = [
        "x",
        "y"
    ];
    var PROPS_CLIENT_XY = [
        "clientX",
        "clientY"
    ];
    /**
 * create new input type manager
 * @param {Manager} manager
 * @param {Function} callback
 * @returns {Input}
 * @constructor
 */ function Input(manager, callback) {
        var self1 = this;
        this.manager = manager;
        this.callback = callback;
        this.element = manager.element;
        this.target = manager.options.inputTarget;
        // smaller wrapper around the handler, for the scope and the enabled state of the manager,
        // so when disabled the input events are completely bypassed.
        this.domHandler = function(ev) {
            if (boolOrFn(manager.options.enable, [
                manager
            ])) self1.handler(ev);
        };
        this.init();
    }
    Input.prototype = {
        /**
     * should handle the inputEvent data and trigger the callback
     * @virtual
     */ handler: function() {},
        /**
     * bind the events
     */ init: function() {
            this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        },
        /**
     * unbind the events
     */ destroy: function() {
            this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
            this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
            this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
        }
    };
    /**
 * create new input type manager
 * called by the Manager constructor
 * @param {Hammer} manager
 * @returns {Input}
 */ function createInputInstance(manager) {
        var Type;
        var inputClass = manager.options.inputClass;
        if (inputClass) Type = inputClass;
        else if (SUPPORT_POINTER_EVENTS) Type = PointerEventInput;
        else if (SUPPORT_ONLY_TOUCH) Type = TouchInput;
        else if (!SUPPORT_TOUCH) Type = MouseInput;
        else Type = TouchMouseInput;
        return new Type(manager, inputHandler);
    }
    /**
 * handle input events
 * @param {Manager} manager
 * @param {String} eventType
 * @param {Object} input
 */ function inputHandler(manager, eventType, input) {
        var pointersLen = input.pointers.length;
        var changedPointersLen = input.changedPointers.length;
        var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
        var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;
        input.isFirst = !!isFirst;
        input.isFinal = !!isFinal;
        if (isFirst) manager.session = {};
        // source event is the normalized value of the domEvents
        // like 'touchstart, mouseup, pointerdown'
        input.eventType = eventType;
        // compute scale, rotation etc
        computeInputData(manager, input);
        // emit secret event
        manager.emit("hammer.input", input);
        manager.recognize(input);
        manager.session.prevInput = input;
    }
    /**
 * extend the data with some usable properties like scale, rotate, velocity etc
 * @param {Object} manager
 * @param {Object} input
 */ function computeInputData(manager, input) {
        var session = manager.session;
        var pointers = input.pointers;
        var pointersLength = pointers.length;
        // store the first input to calculate the distance and direction
        if (!session.firstInput) session.firstInput = simpleCloneInputData(input);
        // to compute scale and rotation we need to store the multiple touches
        if (pointersLength > 1 && !session.firstMultiple) session.firstMultiple = simpleCloneInputData(input);
        else if (pointersLength === 1) session.firstMultiple = false;
        var firstInput = session.firstInput;
        var firstMultiple = session.firstMultiple;
        var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
        var center = input.center = getCenter(pointers);
        input.timeStamp = now();
        input.deltaTime = input.timeStamp - firstInput.timeStamp;
        input.angle = getAngle(offsetCenter, center);
        input.distance = getDistance(offsetCenter, center);
        computeDeltaXY(session, input);
        input.offsetDirection = getDirection(input.deltaX, input.deltaY);
        var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
        input.overallVelocityX = overallVelocity.x;
        input.overallVelocityY = overallVelocity.y;
        input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
        input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
        input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;
        input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
        computeIntervalInputData(session, input);
        // find the correct target
        var target = manager.element;
        if (hasParent(input.srcEvent.target, target)) target = input.srcEvent.target;
        input.target = target;
    }
    function computeDeltaXY(session, input) {
        var center = input.center;
        var offset = session.offsetDelta || {};
        var prevDelta = session.prevDelta || {};
        var prevInput = session.prevInput || {};
        if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
            prevDelta = session.prevDelta = {
                x: prevInput.deltaX || 0,
                y: prevInput.deltaY || 0
            };
            offset = session.offsetDelta = {
                x: center.x,
                y: center.y
            };
        }
        input.deltaX = prevDelta.x + (center.x - offset.x);
        input.deltaY = prevDelta.y + (center.y - offset.y);
    }
    /**
 * velocity is calculated every x ms
 * @param {Object} session
 * @param {Object} input
 */ function computeIntervalInputData(session, input) {
        var last = session.lastInterval || input, deltaTime = input.timeStamp - last.timeStamp, velocity, velocityX, velocityY, direction;
        if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
            var deltaX = input.deltaX - last.deltaX;
            var deltaY = input.deltaY - last.deltaY;
            var v = getVelocity(deltaTime, deltaX, deltaY);
            velocityX = v.x;
            velocityY = v.y;
            velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
            direction = getDirection(deltaX, deltaY);
            session.lastInterval = input;
        } else {
            // use latest velocity info if it doesn't overtake a minimum period
            velocity = last.velocity;
            velocityX = last.velocityX;
            velocityY = last.velocityY;
            direction = last.direction;
        }
        input.velocity = velocity;
        input.velocityX = velocityX;
        input.velocityY = velocityY;
        input.direction = direction;
    }
    /**
 * create a simple clone from the input used for storage of firstInput and firstMultiple
 * @param {Object} input
 * @returns {Object} clonedInputData
 */ function simpleCloneInputData(input) {
        // make a simple copy of the pointers because we will get a reference if we don't
        // we only need clientXY for the calculations
        var pointers = [];
        var i = 0;
        while(i < input.pointers.length){
            pointers[i] = {
                clientX: round(input.pointers[i].clientX),
                clientY: round(input.pointers[i].clientY)
            };
            i++;
        }
        return {
            timeStamp: now(),
            pointers: pointers,
            center: getCenter(pointers),
            deltaX: input.deltaX,
            deltaY: input.deltaY
        };
    }
    /**
 * get the center of all the pointers
 * @param {Array} pointers
 * @return {Object} center contains `x` and `y` properties
 */ function getCenter(pointers) {
        var pointersLength = pointers.length;
        // no need to loop when only one touch
        if (pointersLength === 1) return {
            x: round(pointers[0].clientX),
            y: round(pointers[0].clientY)
        };
        var x = 0, y = 0, i = 0;
        while(i < pointersLength){
            x += pointers[i].clientX;
            y += pointers[i].clientY;
            i++;
        }
        return {
            x: round(x / pointersLength),
            y: round(y / pointersLength)
        };
    }
    /**
 * calculate the velocity between two points. unit is in px per ms.
 * @param {Number} deltaTime
 * @param {Number} x
 * @param {Number} y
 * @return {Object} velocity `x` and `y`
 */ function getVelocity(deltaTime, x, y) {
        return {
            x: x / deltaTime || 0,
            y: y / deltaTime || 0
        };
    }
    /**
 * get the direction between two points
 * @param {Number} x
 * @param {Number} y
 * @return {Number} direction
 */ function getDirection(x, y) {
        if (x === y) return DIRECTION_NONE;
        if (abs(x) >= abs(y)) return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
        return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
    }
    /**
 * calculate the absolute distance between two points
 * @param {Object} p1 {x, y}
 * @param {Object} p2 {x, y}
 * @param {Array} [props] containing x and y keys
 * @return {Number} distance
 */ function getDistance(p1, p2, props) {
        if (!props) props = PROPS_XY;
        var x = p2[props[0]] - p1[props[0]], y = p2[props[1]] - p1[props[1]];
        return Math.sqrt(x * x + y * y);
    }
    /**
 * calculate the angle between two coordinates
 * @param {Object} p1
 * @param {Object} p2
 * @param {Array} [props] containing x and y keys
 * @return {Number} angle
 */ function getAngle(p1, p2, props) {
        if (!props) props = PROPS_XY;
        var x = p2[props[0]] - p1[props[0]], y = p2[props[1]] - p1[props[1]];
        return Math.atan2(y, x) * 180 / Math.PI;
    }
    /**
 * calculate the rotation degrees between two pointersets
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} rotation
 */ function getRotation(start, end) {
        return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
    }
    /**
 * calculate the scale factor between two pointersets
 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
 * @param {Array} start array of pointers
 * @param {Array} end array of pointers
 * @return {Number} scale
 */ function getScale(start, end) {
        return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
    }
    var MOUSE_INPUT_MAP = {
        mousedown: INPUT_START,
        mousemove: INPUT_MOVE,
        mouseup: INPUT_END
    };
    var MOUSE_ELEMENT_EVENTS = "mousedown";
    var MOUSE_WINDOW_EVENTS = "mousemove mouseup";
    /**
 * Mouse events input
 * @constructor
 * @extends Input
 */ function MouseInput() {
        this.evEl = MOUSE_ELEMENT_EVENTS;
        this.evWin = MOUSE_WINDOW_EVENTS;
        this.pressed = false; // mousedown state
        Input.apply(this, arguments);
    }
    inherit(MouseInput, Input, {
        /**
     * handle mouse events
     * @param {Object} ev
     */ handler: function MEhandler(ev) {
            var eventType = MOUSE_INPUT_MAP[ev.type];
            // on start we want to have the left mouse button down
            if (eventType & INPUT_START && ev.button === 0) this.pressed = true;
            if (eventType & INPUT_MOVE && ev.which !== 1) eventType = INPUT_END;
            // mouse must be down
            if (!this.pressed) return;
            if (eventType & INPUT_END) this.pressed = false;
            this.callback(this.manager, eventType, {
                pointers: [
                    ev
                ],
                changedPointers: [
                    ev
                ],
                pointerType: INPUT_TYPE_MOUSE,
                srcEvent: ev
            });
        }
    });
    var POINTER_INPUT_MAP = {
        pointerdown: INPUT_START,
        pointermove: INPUT_MOVE,
        pointerup: INPUT_END,
        pointercancel: INPUT_CANCEL,
        pointerout: INPUT_CANCEL
    };
    // in IE10 the pointer types is defined as an enum
    var IE10_POINTER_TYPE_ENUM = {
        2: INPUT_TYPE_TOUCH,
        3: INPUT_TYPE_PEN,
        4: INPUT_TYPE_MOUSE,
        5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
    };
    var POINTER_ELEMENT_EVENTS = "pointerdown";
    var POINTER_WINDOW_EVENTS = "pointermove pointerup pointercancel";
    // IE10 has prefixed support, and case-sensitive
    if (window1.MSPointerEvent && !window1.PointerEvent) {
        POINTER_ELEMENT_EVENTS = "MSPointerDown";
        POINTER_WINDOW_EVENTS = "MSPointerMove MSPointerUp MSPointerCancel";
    }
    /**
 * Pointer events input
 * @constructor
 * @extends Input
 */ function PointerEventInput() {
        this.evEl = POINTER_ELEMENT_EVENTS;
        this.evWin = POINTER_WINDOW_EVENTS;
        Input.apply(this, arguments);
        this.store = this.manager.session.pointerEvents = [];
    }
    inherit(PointerEventInput, Input, {
        /**
     * handle mouse events
     * @param {Object} ev
     */ handler: function PEhandler(ev) {
            var store = this.store;
            var removePointer = false;
            var eventTypeNormalized = ev.type.toLowerCase().replace("ms", "");
            var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
            var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;
            var isTouch = pointerType == INPUT_TYPE_TOUCH;
            // get index of the event in the store
            var storeIndex = inArray(store, ev.pointerId, "pointerId");
            // start and mouse must be down
            if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
                if (storeIndex < 0) {
                    store.push(ev);
                    storeIndex = store.length - 1;
                }
            } else if (eventType & (INPUT_END | INPUT_CANCEL)) removePointer = true;
            // it not found, so the pointer hasn't been down (so it's probably a hover)
            if (storeIndex < 0) return;
            // update the event in the store
            store[storeIndex] = ev;
            this.callback(this.manager, eventType, {
                pointers: store,
                changedPointers: [
                    ev
                ],
                pointerType: pointerType,
                srcEvent: ev
            });
            if (removePointer) // remove from the store
            store.splice(storeIndex, 1);
        }
    });
    var SINGLE_TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };
    var SINGLE_TOUCH_TARGET_EVENTS = "touchstart";
    var SINGLE_TOUCH_WINDOW_EVENTS = "touchstart touchmove touchend touchcancel";
    /**
 * Touch events input
 * @constructor
 * @extends Input
 */ function SingleTouchInput() {
        this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
        this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
        this.started = false;
        Input.apply(this, arguments);
    }
    inherit(SingleTouchInput, Input, {
        handler: function TEhandler(ev) {
            var type = SINGLE_TOUCH_INPUT_MAP[ev.type];
            // should we handle the touch events?
            if (type === INPUT_START) this.started = true;
            if (!this.started) return;
            var touches = normalizeSingleTouches.call(this, ev, type);
            // when done, reset the started state
            if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) this.started = false;
            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        }
    });
    /**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */ function normalizeSingleTouches(ev, type) {
        var all = toArray(ev.touches);
        var changed = toArray(ev.changedTouches);
        if (type & (INPUT_END | INPUT_CANCEL)) all = uniqueArray(all.concat(changed), "identifier", true);
        return [
            all,
            changed
        ];
    }
    var TOUCH_INPUT_MAP = {
        touchstart: INPUT_START,
        touchmove: INPUT_MOVE,
        touchend: INPUT_END,
        touchcancel: INPUT_CANCEL
    };
    var TOUCH_TARGET_EVENTS = "touchstart touchmove touchend touchcancel";
    /**
 * Multi-user touch events input
 * @constructor
 * @extends Input
 */ function TouchInput() {
        this.evTarget = TOUCH_TARGET_EVENTS;
        this.targetIds = {};
        Input.apply(this, arguments);
    }
    inherit(TouchInput, Input, {
        handler: function MTEhandler(ev) {
            var type = TOUCH_INPUT_MAP[ev.type];
            var touches = getTouches.call(this, ev, type);
            if (!touches) return;
            this.callback(this.manager, type, {
                pointers: touches[0],
                changedPointers: touches[1],
                pointerType: INPUT_TYPE_TOUCH,
                srcEvent: ev
            });
        }
    });
    /**
 * @this {TouchInput}
 * @param {Object} ev
 * @param {Number} type flag
 * @returns {undefined|Array} [all, changed]
 */ function getTouches(ev, type) {
        var allTouches = toArray(ev.touches);
        var targetIds = this.targetIds;
        // when there is only one touch, the process can be simplified
        if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
            targetIds[allTouches[0].identifier] = true;
            return [
                allTouches,
                allTouches
            ];
        }
        var i, targetTouches, changedTouches = toArray(ev.changedTouches), changedTargetTouches = [], target = this.target;
        // get target touches from touches
        targetTouches = allTouches.filter(function(touch) {
            return hasParent(touch.target, target);
        });
        // collect touches
        if (type === INPUT_START) {
            i = 0;
            while(i < targetTouches.length){
                targetIds[targetTouches[i].identifier] = true;
                i++;
            }
        }
        // filter changed touches to only contain touches that exist in the collected target ids
        i = 0;
        while(i < changedTouches.length){
            if (targetIds[changedTouches[i].identifier]) changedTargetTouches.push(changedTouches[i]);
            // cleanup removed touches
            if (type & (INPUT_END | INPUT_CANCEL)) delete targetIds[changedTouches[i].identifier];
            i++;
        }
        if (!changedTargetTouches.length) return;
        return [
            // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
            uniqueArray(targetTouches.concat(changedTargetTouches), "identifier", true),
            changedTargetTouches
        ];
    }
    /**
 * Combined touch and mouse input
 *
 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
 * This because touch devices also emit mouse events while doing a touch.
 *
 * @constructor
 * @extends Input
 */ var DEDUP_TIMEOUT = 2500;
    var DEDUP_DISTANCE = 25;
    function TouchMouseInput() {
        Input.apply(this, arguments);
        var handler = bindFn(this.handler, this);
        this.touch = new TouchInput(this.manager, handler);
        this.mouse = new MouseInput(this.manager, handler);
        this.primaryTouch = null;
        this.lastTouches = [];
    }
    inherit(TouchMouseInput, Input, {
        /**
     * handle mouse and touch events
     * @param {Hammer} manager
     * @param {String} inputEvent
     * @param {Object} inputData
     */ handler: function TMEhandler(manager, inputEvent, inputData) {
            var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH, isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;
            if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) return;
            // when we're in a touch event, record touches to  de-dupe synthetic mouse event
            if (isTouch) recordTouches.call(this, inputEvent, inputData);
            else if (isMouse && isSyntheticEvent.call(this, inputData)) return;
            this.callback(manager, inputEvent, inputData);
        },
        /**
     * remove the event listeners
     */ destroy: function destroy() {
            this.touch.destroy();
            this.mouse.destroy();
        }
    });
    function recordTouches(eventType, eventData) {
        if (eventType & INPUT_START) {
            this.primaryTouch = eventData.changedPointers[0].identifier;
            setLastTouch.call(this, eventData);
        } else if (eventType & (INPUT_END | INPUT_CANCEL)) setLastTouch.call(this, eventData);
    }
    function setLastTouch(eventData) {
        var touch = eventData.changedPointers[0];
        if (touch.identifier === this.primaryTouch) {
            var lastTouch = {
                x: touch.clientX,
                y: touch.clientY
            };
            this.lastTouches.push(lastTouch);
            var lts = this.lastTouches;
            var removeLastTouch = function() {
                var i = lts.indexOf(lastTouch);
                if (i > -1) lts.splice(i, 1);
            };
            setTimeout(removeLastTouch, DEDUP_TIMEOUT);
        }
    }
    function isSyntheticEvent(eventData) {
        var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
        for(var i = 0; i < this.lastTouches.length; i++){
            var t = this.lastTouches[i];
            var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
            if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) return true;
        }
        return false;
    }
    var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, "touchAction");
    var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;
    // magical touchAction value
    var TOUCH_ACTION_COMPUTE = "compute";
    var TOUCH_ACTION_AUTO = "auto";
    var TOUCH_ACTION_MANIPULATION = "manipulation"; // not implemented
    var TOUCH_ACTION_NONE = "none";
    var TOUCH_ACTION_PAN_X = "pan-x";
    var TOUCH_ACTION_PAN_Y = "pan-y";
    var TOUCH_ACTION_MAP = getTouchActionProps();
    /**
 * Touch Action
 * sets the touchAction property or uses the js alternative
 * @param {Manager} manager
 * @param {String} value
 * @constructor
 */ function TouchAction(manager, value) {
        this.manager = manager;
        this.set(value);
    }
    TouchAction.prototype = {
        /**
     * set the touchAction value on the element or enable the polyfill
     * @param {String} value
     */ set: function(value) {
            // find out the touch-action by the event handlers
            if (value == TOUCH_ACTION_COMPUTE) value = this.compute();
            if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
            this.actions = value.toLowerCase().trim();
        },
        /**
     * just re-set the touchAction value
     */ update: function() {
            this.set(this.manager.options.touchAction);
        },
        /**
     * compute the value for the touchAction property based on the recognizer's settings
     * @returns {String} value
     */ compute: function() {
            var actions = [];
            each(this.manager.recognizers, function(recognizer) {
                if (boolOrFn(recognizer.options.enable, [
                    recognizer
                ])) actions = actions.concat(recognizer.getTouchAction());
            });
            return cleanTouchActions(actions.join(" "));
        },
        /**
     * this method is called on each input cycle and provides the preventing of the browser behavior
     * @param {Object} input
     */ preventDefaults: function(input) {
            var srcEvent = input.srcEvent;
            var direction = input.offsetDirection;
            // if the touch action did prevented once this session
            if (this.manager.session.prevented) {
                srcEvent.preventDefault();
                return;
            }
            var actions = this.actions;
            var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
            var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
            var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];
            if (hasNone) {
                //do not prevent defaults if this is a tap gesture
                var isTapPointer = input.pointers.length === 1;
                var isTapMovement = input.distance < 2;
                var isTapTouchTime = input.deltaTime < 250;
                if (isTapPointer && isTapMovement && isTapTouchTime) return;
            }
            if (hasPanX && hasPanY) // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
            return;
            if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) return this.preventSrc(srcEvent);
        },
        /**
     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
     * @param {Object} srcEvent
     */ preventSrc: function(srcEvent) {
            this.manager.session.prevented = true;
            srcEvent.preventDefault();
        }
    };
    /**
 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
 * @param {String} actions
 * @returns {*}
 */ function cleanTouchActions(actions) {
        // none
        if (inStr(actions, TOUCH_ACTION_NONE)) return TOUCH_ACTION_NONE;
        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
        // if both pan-x and pan-y are set (different recognizers
        // for different directions, e.g. horizontal pan but vertical swipe?)
        // we need none (as otherwise with pan-x pan-y combined none of these
        // recognizers will work, since the browser would handle all panning
        if (hasPanX && hasPanY) return TOUCH_ACTION_NONE;
        // pan-x OR pan-y
        if (hasPanX || hasPanY) return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
        // manipulation
        if (inStr(actions, TOUCH_ACTION_MANIPULATION)) return TOUCH_ACTION_MANIPULATION;
        return TOUCH_ACTION_AUTO;
    }
    function getTouchActionProps() {
        if (!NATIVE_TOUCH_ACTION) return false;
        var touchMap = {};
        var cssSupports = window1.CSS && window1.CSS.supports;
        [
            "auto",
            "manipulation",
            "pan-y",
            "pan-x",
            "pan-x pan-y",
            "none"
        ].forEach(function(val) {
            // If css.supports is not supported but there is native touch-action assume it supports
            // all values. This is the case for IE 10 and 11.
            touchMap[val] = cssSupports ? window1.CSS.supports("touch-action", val) : true;
        });
        return touchMap;
    }
    /**
 * Recognizer flow explained; *
 * All recognizers have the initial state of POSSIBLE when a input session starts.
 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
 * Example session for mouse-input: mousedown -> mousemove -> mouseup
 *
 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
 * which determines with state it should be.
 *
 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
 * POSSIBLE to give it another change on the next cycle.
 *
 *               Possible
 *                  |
 *            +-----+---------------+
 *            |                     |
 *      +-----+-----+               |
 *      |           |               |
 *   Failed      Cancelled          |
 *                          +-------+------+
 *                          |              |
 *                      Recognized       Began
 *                                         |
 *                                      Changed
 *                                         |
 *                                  Ended/Recognized
 */ var STATE_POSSIBLE = 1;
    var STATE_BEGAN = 2;
    var STATE_CHANGED = 4;
    var STATE_ENDED = 8;
    var STATE_RECOGNIZED = STATE_ENDED;
    var STATE_CANCELLED = 16;
    var STATE_FAILED = 32;
    /**
 * Recognizer
 * Every recognizer needs to extend from this class.
 * @constructor
 * @param {Object} options
 */ function Recognizer(options) {
        this.options = assign({}, this.defaults, options || {});
        this.id = uniqueId();
        this.manager = null;
        // default is enable true
        this.options.enable = ifUndefined(this.options.enable, true);
        this.state = STATE_POSSIBLE;
        this.simultaneous = {};
        this.requireFail = [];
    }
    Recognizer.prototype = {
        /**
     * @virtual
     * @type {Object}
     */ defaults: {},
        /**
     * set options
     * @param {Object} options
     * @return {Recognizer}
     */ set: function(options) {
            assign(this.options, options);
            // also update the touchAction, in case something changed about the directions/enabled state
            this.manager && this.manager.touchAction.update();
            return this;
        },
        /**
     * recognize simultaneous with an other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */ recognizeWith: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, "recognizeWith", this)) return this;
            var simultaneous = this.simultaneous;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (!simultaneous[otherRecognizer.id]) {
                simultaneous[otherRecognizer.id] = otherRecognizer;
                otherRecognizer.recognizeWith(this);
            }
            return this;
        },
        /**
     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */ dropRecognizeWith: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, "dropRecognizeWith", this)) return this;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            delete this.simultaneous[otherRecognizer.id];
            return this;
        },
        /**
     * recognizer can only run when an other is failing
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */ requireFailure: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, "requireFailure", this)) return this;
            var requireFail = this.requireFail;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            if (inArray(requireFail, otherRecognizer) === -1) {
                requireFail.push(otherRecognizer);
                otherRecognizer.requireFailure(this);
            }
            return this;
        },
        /**
     * drop the requireFailure link. it does not remove the link on the other recognizer.
     * @param {Recognizer} otherRecognizer
     * @returns {Recognizer} this
     */ dropRequireFailure: function(otherRecognizer) {
            if (invokeArrayArg(otherRecognizer, "dropRequireFailure", this)) return this;
            otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
            var index = inArray(this.requireFail, otherRecognizer);
            if (index > -1) this.requireFail.splice(index, 1);
            return this;
        },
        /**
     * has require failures boolean
     * @returns {boolean}
     */ hasRequireFailures: function() {
            return this.requireFail.length > 0;
        },
        /**
     * if the recognizer can recognize simultaneous with an other recognizer
     * @param {Recognizer} otherRecognizer
     * @returns {Boolean}
     */ canRecognizeWith: function(otherRecognizer) {
            return !!this.simultaneous[otherRecognizer.id];
        },
        /**
     * You should use `tryEmit` instead of `emit` directly to check
     * that all the needed recognizers has failed before emitting.
     * @param {Object} input
     */ emit: function(input) {
            var self1 = this;
            var state = this.state;
            function emit(event) {
                self1.manager.emit(event, input);
            }
            // 'panstart' and 'panmove'
            if (state < STATE_ENDED) emit(self1.options.event + stateStr(state));
            emit(self1.options.event); // simple 'eventName' events
            if (input.additionalEvent) emit(input.additionalEvent);
            // panend and pancancel
            if (state >= STATE_ENDED) emit(self1.options.event + stateStr(state));
        },
        /**
     * Check that all the require failure recognizers has failed,
     * if true, it emits a gesture event,
     * otherwise, setup the state to FAILED.
     * @param {Object} input
     */ tryEmit: function(input) {
            if (this.canEmit()) return this.emit(input);
            // it's failing anyway
            this.state = STATE_FAILED;
        },
        /**
     * can we emit?
     * @returns {boolean}
     */ canEmit: function() {
            var i = 0;
            while(i < this.requireFail.length){
                if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) return false;
                i++;
            }
            return true;
        },
        /**
     * update the recognizer
     * @param {Object} inputData
     */ recognize: function(inputData) {
            // make a new copy of the inputData
            // so we can change the inputData without messing up the other recognizers
            var inputDataClone = assign({}, inputData);
            // is is enabled and allow recognizing?
            if (!boolOrFn(this.options.enable, [
                this,
                inputDataClone
            ])) {
                this.reset();
                this.state = STATE_FAILED;
                return;
            }
            // reset when we've reached the end
            if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) this.state = STATE_POSSIBLE;
            this.state = this.process(inputDataClone);
            // the recognizer has recognized a gesture
            // so trigger an event
            if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) this.tryEmit(inputDataClone);
        },
        /**
     * return the state of the recognizer
     * the actual recognizing happens in this method
     * @virtual
     * @param {Object} inputData
     * @returns {Const} STATE
     */ process: function(inputData) {},
        /**
     * return the preferred touch-action
     * @virtual
     * @returns {Array}
     */ getTouchAction: function() {},
        /**
     * called when the gesture isn't allowed to recognize
     * like when another is being recognized or it is disabled
     * @virtual
     */ reset: function() {}
    };
    /**
 * get a usable string, used as event postfix
 * @param {Const} state
 * @returns {String} state
 */ function stateStr(state) {
        if (state & STATE_CANCELLED) return "cancel";
        else if (state & STATE_ENDED) return "end";
        else if (state & STATE_CHANGED) return "move";
        else if (state & STATE_BEGAN) return "start";
        return "";
    }
    /**
 * direction cons to string
 * @param {Const} direction
 * @returns {String}
 */ function directionStr(direction) {
        if (direction == DIRECTION_DOWN) return "down";
        else if (direction == DIRECTION_UP) return "up";
        else if (direction == DIRECTION_LEFT) return "left";
        else if (direction == DIRECTION_RIGHT) return "right";
        return "";
    }
    /**
 * get a recognizer by name if it is bound to a manager
 * @param {Recognizer|String} otherRecognizer
 * @param {Recognizer} recognizer
 * @returns {Recognizer}
 */ function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
        var manager = recognizer.manager;
        if (manager) return manager.get(otherRecognizer);
        return otherRecognizer;
    }
    /**
 * This recognizer is just used as a base for the simple attribute recognizers.
 * @constructor
 * @extends Recognizer
 */ function AttrRecognizer() {
        Recognizer.apply(this, arguments);
    }
    inherit(AttrRecognizer, Recognizer, {
        /**
     * @namespace
     * @memberof AttrRecognizer
     */ defaults: {
            /**
         * @type {Number}
         * @default 1
         */ pointers: 1
        },
        /**
     * Used to check if it the recognizer receives valid input, like input.distance > 10.
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {Boolean} recognized
     */ attrTest: function(input) {
            var optionPointers = this.options.pointers;
            return optionPointers === 0 || input.pointers.length === optionPointers;
        },
        /**
     * Process the input and return the state for the recognizer
     * @memberof AttrRecognizer
     * @param {Object} input
     * @returns {*} State
     */ process: function(input) {
            var state = this.state;
            var eventType = input.eventType;
            var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
            var isValid = this.attrTest(input);
            // on cancel input and we've recognized before, return STATE_CANCELLED
            if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) return state | STATE_CANCELLED;
            else if (isRecognized || isValid) {
                if (eventType & INPUT_END) return state | STATE_ENDED;
                else if (!(state & STATE_BEGAN)) return STATE_BEGAN;
                return state | STATE_CHANGED;
            }
            return STATE_FAILED;
        }
    });
    /**
 * Pan
 * Recognized when the pointer is down and moved in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */ function PanRecognizer() {
        AttrRecognizer.apply(this, arguments);
        this.pX = null;
        this.pY = null;
    }
    inherit(PanRecognizer, AttrRecognizer, {
        /**
     * @namespace
     * @memberof PanRecognizer
     */ defaults: {
            event: "pan",
            threshold: 10,
            pointers: 1,
            direction: DIRECTION_ALL
        },
        getTouchAction: function() {
            var direction = this.options.direction;
            var actions = [];
            if (direction & DIRECTION_HORIZONTAL) actions.push(TOUCH_ACTION_PAN_Y);
            if (direction & DIRECTION_VERTICAL) actions.push(TOUCH_ACTION_PAN_X);
            return actions;
        },
        directionTest: function(input) {
            var options = this.options;
            var hasMoved = true;
            var distance = input.distance;
            var direction = input.direction;
            var x = input.deltaX;
            var y = input.deltaY;
            // lock to axis?
            if (!(direction & options.direction)) {
                if (options.direction & DIRECTION_HORIZONTAL) {
                    direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
                    hasMoved = x != this.pX;
                    distance = Math.abs(input.deltaX);
                } else {
                    direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
                    hasMoved = y != this.pY;
                    distance = Math.abs(input.deltaY);
                }
            }
            input.direction = direction;
            return hasMoved && distance > options.threshold && direction & options.direction;
        },
        attrTest: function(input) {
            return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
        },
        emit: function(input) {
            this.pX = input.deltaX;
            this.pY = input.deltaY;
            var direction = directionStr(input.direction);
            if (direction) input.additionalEvent = this.options.event + direction;
            this._super.emit.call(this, input);
        }
    });
    /**
 * Pinch
 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
 * @constructor
 * @extends AttrRecognizer
 */ function PinchRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }
    inherit(PinchRecognizer, AttrRecognizer, {
        /**
     * @namespace
     * @memberof PinchRecognizer
     */ defaults: {
            event: "pinch",
            threshold: 0,
            pointers: 2
        },
        getTouchAction: function() {
            return [
                TOUCH_ACTION_NONE
            ];
        },
        attrTest: function(input) {
            return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
        },
        emit: function(input) {
            if (input.scale !== 1) {
                var inOut = input.scale < 1 ? "in" : "out";
                input.additionalEvent = this.options.event + inOut;
            }
            this._super.emit.call(this, input);
        }
    });
    /**
 * Press
 * Recognized when the pointer is down for x ms without any movement.
 * @constructor
 * @extends Recognizer
 */ function PressRecognizer() {
        Recognizer.apply(this, arguments);
        this._timer = null;
        this._input = null;
    }
    inherit(PressRecognizer, Recognizer, {
        /**
     * @namespace
     * @memberof PressRecognizer
     */ defaults: {
            event: "press",
            pointers: 1,
            time: 251,
            threshold: 9 // a minimal movement is ok, but keep it low
        },
        getTouchAction: function() {
            return [
                TOUCH_ACTION_AUTO
            ];
        },
        process: function(input) {
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTime = input.deltaTime > options.time;
            this._input = input;
            // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) this.reset();
            else if (input.eventType & INPUT_START) {
                this.reset();
                this._timer = setTimeoutContext(function() {
                    this.state = STATE_RECOGNIZED;
                    this.tryEmit();
                }, options.time, this);
            } else if (input.eventType & INPUT_END) return STATE_RECOGNIZED;
            return STATE_FAILED;
        },
        reset: function() {
            clearTimeout(this._timer);
        },
        emit: function(input) {
            if (this.state !== STATE_RECOGNIZED) return;
            if (input && input.eventType & INPUT_END) this.manager.emit(this.options.event + "up", input);
            else {
                this._input.timeStamp = now();
                this.manager.emit(this.options.event, this._input);
            }
        }
    });
    /**
 * Rotate
 * Recognized when two or more pointer are moving in a circular motion.
 * @constructor
 * @extends AttrRecognizer
 */ function RotateRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }
    inherit(RotateRecognizer, AttrRecognizer, {
        /**
     * @namespace
     * @memberof RotateRecognizer
     */ defaults: {
            event: "rotate",
            threshold: 0,
            pointers: 2
        },
        getTouchAction: function() {
            return [
                TOUCH_ACTION_NONE
            ];
        },
        attrTest: function(input) {
            return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
        }
    });
    /**
 * Swipe
 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
 * @constructor
 * @extends AttrRecognizer
 */ function SwipeRecognizer() {
        AttrRecognizer.apply(this, arguments);
    }
    inherit(SwipeRecognizer, AttrRecognizer, {
        /**
     * @namespace
     * @memberof SwipeRecognizer
     */ defaults: {
            event: "swipe",
            threshold: 10,
            velocity: 0.3,
            direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
            pointers: 1
        },
        getTouchAction: function() {
            return PanRecognizer.prototype.getTouchAction.call(this);
        },
        attrTest: function(input) {
            var direction = this.options.direction;
            var velocity;
            if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) velocity = input.overallVelocity;
            else if (direction & DIRECTION_HORIZONTAL) velocity = input.overallVelocityX;
            else if (direction & DIRECTION_VERTICAL) velocity = input.overallVelocityY;
            return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
        },
        emit: function(input) {
            var direction = directionStr(input.offsetDirection);
            if (direction) this.manager.emit(this.options.event + direction, input);
            this.manager.emit(this.options.event, input);
        }
    });
    /**
 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
 * a single tap.
 *
 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
 * multi-taps being recognized.
 * @constructor
 * @extends Recognizer
 */ function TapRecognizer() {
        Recognizer.apply(this, arguments);
        // previous time and center,
        // used for tap counting
        this.pTime = false;
        this.pCenter = false;
        this._timer = null;
        this._input = null;
        this.count = 0;
    }
    inherit(TapRecognizer, Recognizer, {
        /**
     * @namespace
     * @memberof PinchRecognizer
     */ defaults: {
            event: "tap",
            pointers: 1,
            taps: 1,
            interval: 300,
            time: 250,
            threshold: 9,
            posThreshold: 10 // a multi-tap can be a bit off the initial position
        },
        getTouchAction: function() {
            return [
                TOUCH_ACTION_MANIPULATION
            ];
        },
        process: function(input) {
            var options = this.options;
            var validPointers = input.pointers.length === options.pointers;
            var validMovement = input.distance < options.threshold;
            var validTouchTime = input.deltaTime < options.time;
            this.reset();
            if (input.eventType & INPUT_START && this.count === 0) return this.failTimeout();
            // we only allow little movement
            // and we've reached an end event, so a tap is possible
            if (validMovement && validTouchTime && validPointers) {
                if (input.eventType != INPUT_END) return this.failTimeout();
                var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
                var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;
                this.pTime = input.timeStamp;
                this.pCenter = input.center;
                if (!validMultiTap || !validInterval) this.count = 1;
                else this.count += 1;
                this._input = input;
                // if tap count matches we have recognized it,
                // else it has began recognizing...
                var tapCount = this.count % options.taps;
                if (tapCount === 0) {
                    // no failing requirements, immediately trigger the tap event
                    // or wait as long as the multitap interval to trigger
                    if (!this.hasRequireFailures()) return STATE_RECOGNIZED;
                    else {
                        this._timer = setTimeoutContext(function() {
                            this.state = STATE_RECOGNIZED;
                            this.tryEmit();
                        }, options.interval, this);
                        return STATE_BEGAN;
                    }
                }
            }
            return STATE_FAILED;
        },
        failTimeout: function() {
            this._timer = setTimeoutContext(function() {
                this.state = STATE_FAILED;
            }, this.options.interval, this);
            return STATE_FAILED;
        },
        reset: function() {
            clearTimeout(this._timer);
        },
        emit: function() {
            if (this.state == STATE_RECOGNIZED) {
                this._input.tapCount = this.count;
                this.manager.emit(this.options.event, this._input);
            }
        }
    });
    /**
 * Simple way to create a manager with a default set of recognizers.
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */ function Hammer(element, options) {
        options = options || {};
        options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
        return new Manager(element, options);
    }
    /**
 * @const {string}
 */ Hammer.VERSION = "2.0.7";
    /**
 * default settings
 * @namespace
 */ Hammer.defaults = {
        /**
     * set if DOM events are being triggered.
     * But this is slower and unused by simple implementations, so disabled by default.
     * @type {Boolean}
     * @default false
     */ domEvents: false,
        /**
     * The value for the touchAction property/fallback.
     * When set to `compute` it will magically set the correct value based on the added recognizers.
     * @type {String}
     * @default compute
     */ touchAction: TOUCH_ACTION_COMPUTE,
        /**
     * @type {Boolean}
     * @default true
     */ enable: true,
        /**
     * EXPERIMENTAL FEATURE -- can be removed/changed
     * Change the parent input target element.
     * If Null, then it is being set the to main element.
     * @type {Null|EventTarget}
     * @default null
     */ inputTarget: null,
        /**
     * force an input class
     * @type {Null|Function}
     * @default null
     */ inputClass: null,
        /**
     * Default recognizer setup when calling `Hammer()`
     * When creating a new Manager these will be skipped.
     * @type {Array}
     */ preset: [
            // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
            [
                RotateRecognizer,
                {
                    enable: false
                }
            ],
            [
                PinchRecognizer,
                {
                    enable: false
                },
                [
                    "rotate"
                ]
            ],
            [
                SwipeRecognizer,
                {
                    direction: DIRECTION_HORIZONTAL
                }
            ],
            [
                PanRecognizer,
                {
                    direction: DIRECTION_HORIZONTAL
                },
                [
                    "swipe"
                ]
            ],
            [
                TapRecognizer
            ],
            [
                TapRecognizer,
                {
                    event: "doubletap",
                    taps: 2
                },
                [
                    "tap"
                ]
            ],
            [
                PressRecognizer
            ]
        ],
        /**
     * Some CSS properties can be used to improve the working of Hammer.
     * Add them to this method and they will be set when creating a new Manager.
     * @namespace
     */ cssProps: {
            /**
         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */ userSelect: "none",
            /**
         * Disable the Windows Phone grippers when pressing an element.
         * @type {String}
         * @default 'none'
         */ touchSelect: "none",
            /**
         * Disables the default callout shown when you touch and hold a touch target.
         * On iOS, when you touch and hold a touch target such as a link, Safari displays
         * a callout containing information about the link. This property allows you to disable that callout.
         * @type {String}
         * @default 'none'
         */ touchCallout: "none",
            /**
         * Specifies whether zooming is enabled. Used by IE10>
         * @type {String}
         * @default 'none'
         */ contentZooming: "none",
            /**
         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
         * @type {String}
         * @default 'none'
         */ userDrag: "none",
            /**
         * Overrides the highlight color shown when the user taps a link or a JavaScript
         * clickable element in iOS. This property obeys the alpha value, if specified.
         * @type {String}
         * @default 'rgba(0,0,0,0)'
         */ tapHighlightColor: "rgba(0,0,0,0)"
        }
    };
    var STOP = 1;
    var FORCED_STOP = 2;
    /**
 * Manager
 * @param {HTMLElement} element
 * @param {Object} [options]
 * @constructor
 */ function Manager(element, options) {
        this.options = assign({}, Hammer.defaults, options || {});
        this.options.inputTarget = this.options.inputTarget || element;
        this.handlers = {};
        this.session = {};
        this.recognizers = [];
        this.oldCssProps = {};
        this.element = element;
        this.input = createInputInstance(this);
        this.touchAction = new TouchAction(this, this.options.touchAction);
        toggleCssProps(this, true);
        each(this.options.recognizers, function(item) {
            var recognizer = this.add(new item[0](item[1]));
            item[2] && recognizer.recognizeWith(item[2]);
            item[3] && recognizer.requireFailure(item[3]);
        }, this);
    }
    Manager.prototype = {
        /**
     * set options
     * @param {Object} options
     * @returns {Manager}
     */ set: function(options) {
            assign(this.options, options);
            // Options that need a little more setup
            if (options.touchAction) this.touchAction.update();
            if (options.inputTarget) {
                // Clean up existing event listeners and reinitialize
                this.input.destroy();
                this.input.target = options.inputTarget;
                this.input.init();
            }
            return this;
        },
        /**
     * stop recognizing for this session.
     * This session will be discarded, when a new [input]start event is fired.
     * When forced, the recognizer cycle is stopped immediately.
     * @param {Boolean} [force]
     */ stop: function(force) {
            this.session.stopped = force ? FORCED_STOP : STOP;
        },
        /**
     * run the recognizers!
     * called by the inputHandler function on every movement of the pointers (touches)
     * it walks through all the recognizers and tries to detect the gesture that is being made
     * @param {Object} inputData
     */ recognize: function(inputData) {
            var session = this.session;
            if (session.stopped) return;
            // run the touch-action polyfill
            this.touchAction.preventDefaults(inputData);
            var recognizer;
            var recognizers = this.recognizers;
            // this holds the recognizer that is being recognized.
            // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
            // if no recognizer is detecting a thing, it is set to `null`
            var curRecognizer = session.curRecognizer;
            // reset when the last recognizer is recognized
            // or when we're in a new session
            if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) curRecognizer = session.curRecognizer = null;
            var i = 0;
            while(i < recognizers.length){
                recognizer = recognizers[i];
                // find out if we are allowed try to recognize the input for this one.
                // 1.   allow if the session is NOT forced stopped (see the .stop() method)
                // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
                //      that is being recognized.
                // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
                //      this can be setup with the `recognizeWith()` method on the recognizer.
                if (session.stopped !== FORCED_STOP && (!curRecognizer || recognizer == curRecognizer || // 2
                recognizer.canRecognizeWith(curRecognizer))) recognizer.recognize(inputData);
                else recognizer.reset();
                // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
                // current active recognizer. but only if we don't already have an active recognizer
                if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) curRecognizer = session.curRecognizer = recognizer;
                i++;
            }
        },
        /**
     * get a recognizer by its event name.
     * @param {Recognizer|String} recognizer
     * @returns {Recognizer|Null}
     */ get: function(recognizer) {
            if (recognizer instanceof Recognizer) return recognizer;
            var recognizers = this.recognizers;
            for(var i = 0; i < recognizers.length; i++){
                if (recognizers[i].options.event == recognizer) return recognizers[i];
            }
            return null;
        },
        /**
     * add a recognizer to the manager
     * existing recognizers with the same event name will be removed
     * @param {Recognizer} recognizer
     * @returns {Recognizer|Manager}
     */ add: function(recognizer) {
            if (invokeArrayArg(recognizer, "add", this)) return this;
            // remove existing
            var existing = this.get(recognizer.options.event);
            if (existing) this.remove(existing);
            this.recognizers.push(recognizer);
            recognizer.manager = this;
            this.touchAction.update();
            return recognizer;
        },
        /**
     * remove a recognizer by name or instance
     * @param {Recognizer|String} recognizer
     * @returns {Manager}
     */ remove: function(recognizer) {
            if (invokeArrayArg(recognizer, "remove", this)) return this;
            recognizer = this.get(recognizer);
            // let's make sure this recognizer exists
            if (recognizer) {
                var recognizers = this.recognizers;
                var index = inArray(recognizers, recognizer);
                if (index !== -1) {
                    recognizers.splice(index, 1);
                    this.touchAction.update();
                }
            }
            return this;
        },
        /**
     * bind event
     * @param {String} events
     * @param {Function} handler
     * @returns {EventEmitter} this
     */ on: function(events, handler) {
            if (events === undefined) return;
            if (handler === undefined) return;
            var handlers = this.handlers;
            each(splitStr(events), function(event) {
                handlers[event] = handlers[event] || [];
                handlers[event].push(handler);
            });
            return this;
        },
        /**
     * unbind event, leave emit blank to remove all handlers
     * @param {String} events
     * @param {Function} [handler]
     * @returns {EventEmitter} this
     */ off: function(events, handler) {
            if (events === undefined) return;
            var handlers = this.handlers;
            each(splitStr(events), function(event) {
                if (!handler) delete handlers[event];
                else handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
            });
            return this;
        },
        /**
     * emit event to the listeners
     * @param {String} event
     * @param {Object} data
     */ emit: function(event, data) {
            // we also want to trigger dom events
            if (this.options.domEvents) triggerDomEvent(event, data);
            // no handlers, so skip it all
            var handlers = this.handlers[event] && this.handlers[event].slice();
            if (!handlers || !handlers.length) return;
            data.type = event;
            data.preventDefault = function() {
                data.srcEvent.preventDefault();
            };
            var i = 0;
            while(i < handlers.length){
                handlers[i](data);
                i++;
            }
        },
        /**
     * destroy the manager and unbinds all events
     * it doesn't unbind dom events, that is the user own responsibility
     */ destroy: function() {
            this.element && toggleCssProps(this, false);
            this.handlers = {};
            this.session = {};
            this.input.destroy();
            this.element = null;
        }
    };
    /**
 * add/remove the css properties as defined in manager.options.cssProps
 * @param {Manager} manager
 * @param {Boolean} add
 */ function toggleCssProps(manager, add) {
        var element = manager.element;
        if (!element.style) return;
        var prop;
        each(manager.options.cssProps, function(value, name) {
            prop = prefixed(element.style, name);
            if (add) {
                manager.oldCssProps[prop] = element.style[prop];
                element.style[prop] = value;
            } else element.style[prop] = manager.oldCssProps[prop] || "";
        });
        if (!add) manager.oldCssProps = {};
    }
    /**
 * trigger dom event
 * @param {String} event
 * @param {Object} data
 */ function triggerDomEvent(event, data) {
        var gestureEvent = document1.createEvent("Event");
        gestureEvent.initEvent(event, true, true);
        gestureEvent.gesture = data;
        data.target.dispatchEvent(gestureEvent);
    }
    assign(Hammer, {
        INPUT_START: INPUT_START,
        INPUT_MOVE: INPUT_MOVE,
        INPUT_END: INPUT_END,
        INPUT_CANCEL: INPUT_CANCEL,
        STATE_POSSIBLE: STATE_POSSIBLE,
        STATE_BEGAN: STATE_BEGAN,
        STATE_CHANGED: STATE_CHANGED,
        STATE_ENDED: STATE_ENDED,
        STATE_RECOGNIZED: STATE_RECOGNIZED,
        STATE_CANCELLED: STATE_CANCELLED,
        STATE_FAILED: STATE_FAILED,
        DIRECTION_NONE: DIRECTION_NONE,
        DIRECTION_LEFT: DIRECTION_LEFT,
        DIRECTION_RIGHT: DIRECTION_RIGHT,
        DIRECTION_UP: DIRECTION_UP,
        DIRECTION_DOWN: DIRECTION_DOWN,
        DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
        DIRECTION_VERTICAL: DIRECTION_VERTICAL,
        DIRECTION_ALL: DIRECTION_ALL,
        Manager: Manager,
        Input: Input,
        TouchAction: TouchAction,
        TouchInput: TouchInput,
        MouseInput: MouseInput,
        PointerEventInput: PointerEventInput,
        TouchMouseInput: TouchMouseInput,
        SingleTouchInput: SingleTouchInput,
        Recognizer: Recognizer,
        AttrRecognizer: AttrRecognizer,
        Tap: TapRecognizer,
        Pan: PanRecognizer,
        Swipe: SwipeRecognizer,
        Pinch: PinchRecognizer,
        Rotate: RotateRecognizer,
        Press: PressRecognizer,
        on: addEventListeners,
        off: removeEventListeners,
        each: each,
        merge: merge,
        extend: extend,
        assign: assign,
        inherit: inherit,
        bindFn: bindFn,
        prefixed: prefixed
    });
    // this prevents errors when Hammer is loaded in the presence of an AMD
    //  style loader but by script tag, not by the loader.
    var freeGlobal = typeof window1 !== "undefined" ? window1 : typeof self !== "undefined" ? self : {}; // jshint ignore:line
    freeGlobal.Hammer = Hammer;
    if (typeof define === "function" && define.amd) define(function() {
        return Hammer;
    });
    else if (0, module.exports) module.exports = Hammer;
    else window1[exportName] = Hammer;
})(window, document, "Hammer");

},{}],"dxsY3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _helpersJs = require("../dist/helpers.js");
parcelHelpers.exportAll(_helpersJs, exports);

},{"../dist/helpers.js":"2ZYxS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ZYxS":[function(require,module,exports) {
/*!
 * Chart.js v4.4.4
 * https://www.chartjs.org
 * (c) 2024 Chart.js Contributors
 * Released under the MIT License
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HALF_PI", ()=>(0, _helpersSegmentJs.H));
parcelHelpers.export(exports, "INFINITY", ()=>(0, _helpersSegmentJs.b2));
parcelHelpers.export(exports, "PI", ()=>(0, _helpersSegmentJs.P));
parcelHelpers.export(exports, "PITAU", ()=>(0, _helpersSegmentJs.b1));
parcelHelpers.export(exports, "QUARTER_PI", ()=>(0, _helpersSegmentJs.b4));
parcelHelpers.export(exports, "RAD_PER_DEG", ()=>(0, _helpersSegmentJs.b3));
parcelHelpers.export(exports, "TAU", ()=>(0, _helpersSegmentJs.T));
parcelHelpers.export(exports, "TWO_THIRDS_PI", ()=>(0, _helpersSegmentJs.b5));
parcelHelpers.export(exports, "_addGrace", ()=>(0, _helpersSegmentJs.R));
parcelHelpers.export(exports, "_alignPixel", ()=>(0, _helpersSegmentJs.X));
parcelHelpers.export(exports, "_alignStartEnd", ()=>(0, _helpersSegmentJs.a2));
parcelHelpers.export(exports, "_angleBetween", ()=>(0, _helpersSegmentJs.p));
parcelHelpers.export(exports, "_angleDiff", ()=>(0, _helpersSegmentJs.b6));
parcelHelpers.export(exports, "_arrayUnique", ()=>(0, _helpersSegmentJs._));
parcelHelpers.export(exports, "_attachContext", ()=>(0, _helpersSegmentJs.a8));
parcelHelpers.export(exports, "_bezierCurveTo", ()=>(0, _helpersSegmentJs.as));
parcelHelpers.export(exports, "_bezierInterpolation", ()=>(0, _helpersSegmentJs.ap));
parcelHelpers.export(exports, "_boundSegment", ()=>(0, _helpersSegmentJs.ax));
parcelHelpers.export(exports, "_boundSegments", ()=>(0, _helpersSegmentJs.an));
parcelHelpers.export(exports, "_capitalize", ()=>(0, _helpersSegmentJs.a5));
parcelHelpers.export(exports, "_computeSegments", ()=>(0, _helpersSegmentJs.am));
parcelHelpers.export(exports, "_createResolver", ()=>(0, _helpersSegmentJs.a9));
parcelHelpers.export(exports, "_decimalPlaces", ()=>(0, _helpersSegmentJs.aK));
parcelHelpers.export(exports, "_deprecated", ()=>(0, _helpersSegmentJs.aV));
parcelHelpers.export(exports, "_descriptors", ()=>(0, _helpersSegmentJs.aa));
parcelHelpers.export(exports, "_elementsEqual", ()=>(0, _helpersSegmentJs.ah));
parcelHelpers.export(exports, "_factorize", ()=>(0, _helpersSegmentJs.N));
parcelHelpers.export(exports, "_filterBetween", ()=>(0, _helpersSegmentJs.aO));
parcelHelpers.export(exports, "_getParentNode", ()=>(0, _helpersSegmentJs.I));
parcelHelpers.export(exports, "_getStartAndCountOfVisiblePoints", ()=>(0, _helpersSegmentJs.q));
parcelHelpers.export(exports, "_int16Range", ()=>(0, _helpersSegmentJs.W));
parcelHelpers.export(exports, "_isBetween", ()=>(0, _helpersSegmentJs.aj));
parcelHelpers.export(exports, "_isClickEvent", ()=>(0, _helpersSegmentJs.ai));
parcelHelpers.export(exports, "_isDomSupported", ()=>(0, _helpersSegmentJs.M));
parcelHelpers.export(exports, "_isPointInArea", ()=>(0, _helpersSegmentJs.C));
parcelHelpers.export(exports, "_limitValue", ()=>(0, _helpersSegmentJs.S));
parcelHelpers.export(exports, "_longestText", ()=>(0, _helpersSegmentJs.aN));
parcelHelpers.export(exports, "_lookup", ()=>(0, _helpersSegmentJs.aP));
parcelHelpers.export(exports, "_lookupByKey", ()=>(0, _helpersSegmentJs.B));
parcelHelpers.export(exports, "_measureText", ()=>(0, _helpersSegmentJs.V));
parcelHelpers.export(exports, "_merger", ()=>(0, _helpersSegmentJs.aT));
parcelHelpers.export(exports, "_mergerIf", ()=>(0, _helpersSegmentJs.aU));
parcelHelpers.export(exports, "_normalizeAngle", ()=>(0, _helpersSegmentJs.ay));
parcelHelpers.export(exports, "_parseObjectDataRadialScale", ()=>(0, _helpersSegmentJs.y));
parcelHelpers.export(exports, "_pointInLine", ()=>(0, _helpersSegmentJs.aq));
parcelHelpers.export(exports, "_readValueToProps", ()=>(0, _helpersSegmentJs.ak));
parcelHelpers.export(exports, "_rlookupByKey", ()=>(0, _helpersSegmentJs.A));
parcelHelpers.export(exports, "_scaleRangesChanged", ()=>(0, _helpersSegmentJs.w));
parcelHelpers.export(exports, "_setMinAndMaxByKey", ()=>(0, _helpersSegmentJs.aG));
parcelHelpers.export(exports, "_splitKey", ()=>(0, _helpersSegmentJs.aW));
parcelHelpers.export(exports, "_steppedInterpolation", ()=>(0, _helpersSegmentJs.ao));
parcelHelpers.export(exports, "_steppedLineTo", ()=>(0, _helpersSegmentJs.ar));
parcelHelpers.export(exports, "_textX", ()=>(0, _helpersSegmentJs.aB));
parcelHelpers.export(exports, "_toLeftRightCenter", ()=>(0, _helpersSegmentJs.a1));
parcelHelpers.export(exports, "_updateBezierControlPoints", ()=>(0, _helpersSegmentJs.al));
parcelHelpers.export(exports, "addRoundedRectPath", ()=>(0, _helpersSegmentJs.au));
parcelHelpers.export(exports, "almostEquals", ()=>(0, _helpersSegmentJs.aJ));
parcelHelpers.export(exports, "almostWhole", ()=>(0, _helpersSegmentJs.aI));
parcelHelpers.export(exports, "callback", ()=>(0, _helpersSegmentJs.Q));
parcelHelpers.export(exports, "clearCanvas", ()=>(0, _helpersSegmentJs.af));
parcelHelpers.export(exports, "clipArea", ()=>(0, _helpersSegmentJs.Y));
parcelHelpers.export(exports, "clone", ()=>(0, _helpersSegmentJs.aS));
parcelHelpers.export(exports, "color", ()=>(0, _helpersSegmentJs.c));
parcelHelpers.export(exports, "createContext", ()=>(0, _helpersSegmentJs.j));
parcelHelpers.export(exports, "debounce", ()=>(0, _helpersSegmentJs.ad));
parcelHelpers.export(exports, "defined", ()=>(0, _helpersSegmentJs.h));
parcelHelpers.export(exports, "distanceBetweenPoints", ()=>(0, _helpersSegmentJs.aE));
parcelHelpers.export(exports, "drawPoint", ()=>(0, _helpersSegmentJs.at));
parcelHelpers.export(exports, "drawPointLegend", ()=>(0, _helpersSegmentJs.aD));
parcelHelpers.export(exports, "each", ()=>(0, _helpersSegmentJs.F));
parcelHelpers.export(exports, "easingEffects", ()=>(0, _helpersSegmentJs.e));
parcelHelpers.export(exports, "finiteOrDefault", ()=>(0, _helpersSegmentJs.O));
parcelHelpers.export(exports, "fontString", ()=>(0, _helpersSegmentJs.a$));
parcelHelpers.export(exports, "formatNumber", ()=>(0, _helpersSegmentJs.o));
parcelHelpers.export(exports, "getAngleFromPoint", ()=>(0, _helpersSegmentJs.D));
parcelHelpers.export(exports, "getHoverColor", ()=>(0, _helpersSegmentJs.aR));
parcelHelpers.export(exports, "getMaximumSize", ()=>(0, _helpersSegmentJs.G));
parcelHelpers.export(exports, "getRelativePosition", ()=>(0, _helpersSegmentJs.z));
parcelHelpers.export(exports, "getRtlAdapter", ()=>(0, _helpersSegmentJs.az));
parcelHelpers.export(exports, "getStyle", ()=>(0, _helpersSegmentJs.a_));
parcelHelpers.export(exports, "isArray", ()=>(0, _helpersSegmentJs.b));
parcelHelpers.export(exports, "isFinite", ()=>(0, _helpersSegmentJs.g));
parcelHelpers.export(exports, "isFunction", ()=>(0, _helpersSegmentJs.a7));
parcelHelpers.export(exports, "isNullOrUndef", ()=>(0, _helpersSegmentJs.k));
parcelHelpers.export(exports, "isNumber", ()=>(0, _helpersSegmentJs.x));
parcelHelpers.export(exports, "isObject", ()=>(0, _helpersSegmentJs.i));
parcelHelpers.export(exports, "isPatternOrGradient", ()=>(0, _helpersSegmentJs.aQ));
parcelHelpers.export(exports, "listenArrayEvents", ()=>(0, _helpersSegmentJs.l));
parcelHelpers.export(exports, "log10", ()=>(0, _helpersSegmentJs.aM));
parcelHelpers.export(exports, "merge", ()=>(0, _helpersSegmentJs.a4));
parcelHelpers.export(exports, "mergeIf", ()=>(0, _helpersSegmentJs.ab));
parcelHelpers.export(exports, "niceNum", ()=>(0, _helpersSegmentJs.aH));
parcelHelpers.export(exports, "noop", ()=>(0, _helpersSegmentJs.aF));
parcelHelpers.export(exports, "overrideTextDirection", ()=>(0, _helpersSegmentJs.aA));
parcelHelpers.export(exports, "readUsedSize", ()=>(0, _helpersSegmentJs.J));
parcelHelpers.export(exports, "renderText", ()=>(0, _helpersSegmentJs.Z));
parcelHelpers.export(exports, "requestAnimFrame", ()=>(0, _helpersSegmentJs.r));
parcelHelpers.export(exports, "resolve", ()=>(0, _helpersSegmentJs.a));
parcelHelpers.export(exports, "resolveObjectKey", ()=>(0, _helpersSegmentJs.f));
parcelHelpers.export(exports, "restoreTextDirection", ()=>(0, _helpersSegmentJs.aC));
parcelHelpers.export(exports, "retinaScale", ()=>(0, _helpersSegmentJs.ae));
parcelHelpers.export(exports, "setsEqual", ()=>(0, _helpersSegmentJs.ag));
parcelHelpers.export(exports, "sign", ()=>(0, _helpersSegmentJs.s));
parcelHelpers.export(exports, "splineCurve", ()=>(0, _helpersSegmentJs.aY));
parcelHelpers.export(exports, "splineCurveMonotone", ()=>(0, _helpersSegmentJs.aZ));
parcelHelpers.export(exports, "supportsEventListenerOptions", ()=>(0, _helpersSegmentJs.K));
parcelHelpers.export(exports, "throttled", ()=>(0, _helpersSegmentJs.L));
parcelHelpers.export(exports, "toDegrees", ()=>(0, _helpersSegmentJs.U));
parcelHelpers.export(exports, "toDimension", ()=>(0, _helpersSegmentJs.n));
parcelHelpers.export(exports, "toFont", ()=>(0, _helpersSegmentJs.a0));
parcelHelpers.export(exports, "toFontString", ()=>(0, _helpersSegmentJs.aX));
parcelHelpers.export(exports, "toLineHeight", ()=>(0, _helpersSegmentJs.b0));
parcelHelpers.export(exports, "toPadding", ()=>(0, _helpersSegmentJs.E));
parcelHelpers.export(exports, "toPercentage", ()=>(0, _helpersSegmentJs.m));
parcelHelpers.export(exports, "toRadians", ()=>(0, _helpersSegmentJs.t));
parcelHelpers.export(exports, "toTRBL", ()=>(0, _helpersSegmentJs.av));
parcelHelpers.export(exports, "toTRBLCorners", ()=>(0, _helpersSegmentJs.aw));
parcelHelpers.export(exports, "uid", ()=>(0, _helpersSegmentJs.ac));
parcelHelpers.export(exports, "unclipArea", ()=>(0, _helpersSegmentJs.$));
parcelHelpers.export(exports, "unlistenArrayEvents", ()=>(0, _helpersSegmentJs.u));
parcelHelpers.export(exports, "valueOrDefault", ()=>(0, _helpersSegmentJs.v));
var _helpersSegmentJs = require("./chunks/helpers.segment.js");
var _color = require("@kurkle/color");

},{"./chunks/helpers.segment.js":"7oQuk","@kurkle/color":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["bQKaC","jXAve"], "jXAve", "parcelRequire30ab")

//# sourceMappingURL=index.f0f04e5b.js.map
